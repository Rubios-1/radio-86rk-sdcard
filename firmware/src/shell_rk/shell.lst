0001   0000               .include "stdlib8080.inc"
0001+  0000               .org 0
0002+  0000             start:
0003+  0000 C3 8D 0E      jmp main
0004+  0003             
0005+  0003             
0006+  0003             
0007+  0003             
0002   0003             drawFiles:
0003   0003 CD 4C 1A      call hideFileCursor
0004   0006               ; 27 drawColumn(0);
0005   0006 AF            xra a
0006   0007 CD AD 1D      call drawColumn
0007   000A               ; 28 drawColumn(1);
0008   000A 3E 01         mvi a, 1
0009   000C C3 AD 1D      jmp drawColumn
0010   000F             swapPanels:
0011   000F 21 1B 27      lxi h, panelA
0012   0012 22 7A 2D      shld memswap_1
0013   0015 21 25 28      lxi h, panelB
0014   0018 22 7C 2D      shld memswap_2
0015   001B 21 0A 01      lxi h, 266
0016   001E CD CA 20      call memswap
0017   0021               ; 36 drawSwapPanels();
0018   0021 C3 42 1A      jmp drawSwapPanels
0019   0024             getSel:
0020   0024 2A 1F 28      lhld (panelA)+(260)
0021   0027 EB            xchg
0022   0028 2A 1E 28      lhld (panelA)+(259)
0023   002B 26 00         mvi h, 0
0024   002D 19            dad d
0025   002E E5            push h
0026   002F 16 16         mvi d, 22
0027   0031 3A 1D 28      lda (panelA)+(258)
0028   0034 CD EC 20      call op_mul
0029   0037               ; Сложение
0030   0037 D1            pop d
0031   0038 19            dad d
0032   0039 22 45 2A      shld getSel_n
0033   003C               ; 43 if(n < panelA.cnt) return panelA.files1 + n;
0034   003C EB            xchg
0035   003D 2A 21 28      lhld (panelA)+(262)
0036   0040 CD 00 21      call op_cmp16
0037   0043 DA 59 00      jc l0
0038   0046 CA 59 00      jz l0
0039   0049               ; 43 return panelA.files1 + n;
0040   0049 2A 45 2A      lhld getSel_n
0041   004C               ; Умножение HL на 20
0042   004C 54            mov d, h
0043   004D 5D            mov e, l
0044   004E 29            dad h
0045   004F 29            dad h
0046   0050 19            dad d
0047   0051 29            dad h
0048   0052 29            dad h
0049   0053               ; Сложение
0050   0053 EB            xchg
0051   0054 2A 1B 27      lhld panelA
0052   0057 19            dad d
0053   0058 C9            ret
0054   0059             l0:
0055   0059               ; 44 panelA.offset = 0;
0056   0059 21 00 00      lxi h, 0
0057   005C 22 1F 28      shld (panelA)+(260)
0058   005F               ; 45 panelA.cursorY = 0;
0059   005F AF            xra a
0060   0060 32 1E 28      sta (panelA)+(259)
0061   0063               ; 46 panelA.cursorX = 0;
0062   0063 32 1D 28      sta (panelA)+(258)
0063   0066               ; 47 if(panelA.cnt != 0) return panelA.files1;Сложение с константой 0
0064   0066 2A 21 28      lhld (panelA)+(262)
0065   0069 7D            mov a, l
0066   006A B4            ora h
0067   006B CA 72 00      jz l1
0068   006E               ; 47 return panelA.files1;
0069   006E 2A 1B 27      lhld panelA
0070   0071 C9            ret
0071   0072             l1:
0072   0072               ; 48 return (FileInfo*)parentDir;
0073   0072 21 31 2A      lxi h, parentDir
0074   0075 C9            ret
0075   0076               ; --- getSelNoBack -----------------------------------------------------------------
0076   0076             getSelNoBack:
0077   0076 CD 24 00      call getSel
0078   0079 22 47 2A      shld getSelNoBack_f
0079   007C               ; 55 if(f->fname[0] == '.') f = 0;Сложение с константой 0
0080   007C 7E            mov a, m
0081   007D FE 2E         cpi 46
0082   007F C2 88 00      jnz l2
0083   0082               ; 55 f = 0;
0084   0082 21 00 00      lxi h, 0
0085   0085 22 47 2A      shld getSelNoBack_f
0086   0088             l2:
0087   0088               ; 56 return f;  
0088   0088 C9            ret
0089   0089               ; --- drawFileInfo -----------------------------------------------------------------
0090   0089             drawFileInfo:
0091   0089 CD 24 00      call getSel
0092   008C 22 49 2A      shld drawFileInfo_f
0093   008F               ; 68 if(f->fattrib & 0x10) {Сложение
0094   008F 11 0B 00      lxi d, 11
0095   0092 19            dad d
0096   0093 7E            mov a, m
0097   0094 E6 10         ani 16
0098   0096               ; convertToConfition
0099   0096 CA 9F 00      jz l3
0100   0099               ; 69 drawFileInfoDir();
0101   0099 CD 83 1E      call drawFileInfoDir
0102   009C C3 C0 00      jmp l4
0103   009F             l3:
0104   009F               ; 71 i2s32(buf, &f->fsize, 10, ' ');           
0105   009F 21 4B 2A      lxi h, drawFileInfo_buf
0106   00A2 22 80 2D      shld i2s32_1
0107   00A5               ; Сложение
0108   00A5 2A 49 2A      lhld drawFileInfo_f
0109   00A8 11 0C 00      lxi d, 12
0110   00AB 19            dad d
0111   00AC 22 82 2D      shld i2s32_2
0112   00AF 21 0A 00      lxi h, 10
0113   00B2 22 84 2D      shld i2s32_3
0114   00B5 3E 20         mvi a, 32
0115   00B7 CD 06 21      call i2s32
0116   00BA               ; 72 drawFileInfo1(buf);
0117   00BA 21 4B 2A      lxi h, drawFileInfo_buf
0118   00BD CD 6B 1E      call drawFileInfo1
0119   00C0             l4:
0120   00C0               ; 75 if(f->fdate==0 && f->ftime==0) {Сложение
0121   00C0 2A 49 2A      lhld drawFileInfo_f
0122   00C3 11 12 00      lxi d, 18
0123   00C6 19            dad d
0124   00C7               ; Сложение с константой 0
0125   00C7 5E            mov e, m
0126   00C8 23            inx h
0127   00C9 56            mov d, m
0128   00CA EB            xchg
0129   00CB 7D            mov a, l
0130   00CC B4            ora h
0131   00CD C2 E7 00      jnz l5
0132   00D0               ; Сложение
0133   00D0 2A 49 2A      lhld drawFileInfo_f
0134   00D3 11 10 00      lxi d, 16
0135   00D6 19            dad d
0136   00D7               ; Сложение с константой 0
0137   00D7 5E            mov e, m
0138   00D8 23            inx h
0139   00D9 56            mov d, m
0140   00DA EB            xchg
0141   00DB 7D            mov a, l
0142   00DC B4            ora h
0143   00DD C2 E7 00      jnz l5
0144   00E0               ; 76 buf[0] = 0;
0145   00E0 AF            xra a
0146   00E1 32 4B 2A      sta (drawFileInfo_buf)+(0)
0147   00E4 C3 C1 01      jmp l6
0148   00E7             l5:
0149   00E7               ; 78 i2s(buf, f->fdate & 31, 2, ' ');  
0150   00E7 21 4B 2A      lxi h, drawFileInfo_buf
0151   00EA 22 8B 2D      shld i2s_1
0152   00ED               ; Сложение
0153   00ED 2A 49 2A      lhld drawFileInfo_f
0154   00F0 11 12 00      lxi d, 18
0155   00F3 19            dad d
0156   00F4               ; 16 битная арифметическая операция с константой
0157   00F4 5E            mov e, m
0158   00F5 23            inx h
0159   00F6 56            mov d, m
0160   00F7 EB            xchg
0161   00F8 7D            mov a, l
0162   00F9 E6 1F         ani 31
0163   00FB 6F            mov l, a
0164   00FC 26 00         mvi h, 0
0165   00FE 22 8D 2D      shld i2s_2
0166   0101 2E 02         mvi l, 2
0167   0103 22 8F 2D      shld i2s_3
0168   0106 3E 20         mvi a, 32
0169   0108 CD 7C 21      call i2s
0170   010B               ; 79 buf[2] = '-';
0171   010B 3E 2D         mvi a, 45
0172   010D 32 4D 2A      sta (drawFileInfo_buf)+(2)
0173   0110               ; 80 i2s(buf+3, (f->fdate>>5) & 15, 2, '0');
0174   0110 21 4E 2A      lxi h, (drawFileInfo_buf)+(3)
0175   0113 22 8B 2D      shld i2s_1
0176   0116               ; Сложение
0177   0116 2A 49 2A      lhld drawFileInfo_f
0178   0119 11 12 00      lxi d, 18
0179   011C 19            dad d
0180   011D               ; Сдвиг вправо
0181   011D 5E            mov e, m
0182   011E 23            inx h
0183   011F 56            mov d, m
0184   0120 EB            xchg
0185   0121 11 05 00      lxi d, 5
0186   0124 CD DE 21      call op_shr16
0187   0127               ; 16 битная арифметическая операция с константой
0188   0127 7D            mov a, l
0189   0128 E6 0F         ani 15
0190   012A 6F            mov l, a
0191   012B 26 00         mvi h, 0
0192   012D 22 8D 2D      shld i2s_2
0193   0130 2E 02         mvi l, 2
0194   0132 22 8F 2D      shld i2s_3
0195   0135 3E 30         mvi a, 48
0196   0137 CD 7C 21      call i2s
0197   013A               ; 81 buf[5] = '-';
0198   013A 3E 2D         mvi a, 45
0199   013C 32 50 2A      sta (drawFileInfo_buf)+(5)
0200   013F               ; 82 i2s(buf+6, (f->fdate>>9)+1980, 4, '0');
0201   013F 21 51 2A      lxi h, (drawFileInfo_buf)+(6)
0202   0142 22 8B 2D      shld i2s_1
0203   0145               ; Сложение
0204   0145 2A 49 2A      lhld drawFileInfo_f
0205   0148 11 12 00      lxi d, 18
0206   014B 19            dad d
0207   014C               ; Сдвиг вправо
0208   014C 5E            mov e, m
0209   014D 23            inx h
0210   014E 56            mov d, m
0211   014F EB            xchg
0212   0150 11 09 00      lxi d, 9
0213   0153 CD DE 21      call op_shr16
0214   0156               ; Сложение
0215   0156 11 BC 07      lxi d, 1980
0216   0159 19            dad d
0217   015A 22 8D 2D      shld i2s_2
0218   015D 21 04 00      lxi h, 4
0219   0160 22 8F 2D      shld i2s_3
0220   0163 3E 30         mvi a, 48
0221   0165 CD 7C 21      call i2s
0222   0168               ; 83 buf[10] = ' ';
0223   0168 3E 20         mvi a, 32
0224   016A 32 55 2A      sta (drawFileInfo_buf)+(10)
0225   016D               ; 84 i2s(buf+11, f->ftime>>11, 2, '0');
0226   016D 21 56 2A      lxi h, (drawFileInfo_buf)+(11)
0227   0170 22 8B 2D      shld i2s_1
0228   0173               ; Сложение
0229   0173 2A 49 2A      lhld drawFileInfo_f
0230   0176 11 10 00      lxi d, 16
0231   0179 19            dad d
0232   017A               ; Сдвиг вправо
0233   017A 5E            mov e, m
0234   017B 23            inx h
0235   017C 56            mov d, m
0236   017D EB            xchg
0237   017E 11 0B 00      lxi d, 11
0238   0181 CD DE 21      call op_shr16
0239   0184 22 8D 2D      shld i2s_2
0240   0187 21 02 00      lxi h, 2
0241   018A 22 8F 2D      shld i2s_3
0242   018D 3E 30         mvi a, 48
0243   018F CD 7C 21      call i2s
0244   0192               ; 85 buf[13] = ':';
0245   0192 3E 3A         mvi a, 58
0246   0194 32 58 2A      sta (drawFileInfo_buf)+(13)
0247   0197               ; 86 i2s(buf+14, (f->ftime>>5)&63, 2, '0');
0248   0197 21 59 2A      lxi h, (drawFileInfo_buf)+(14)
0249   019A 22 8B 2D      shld i2s_1
0250   019D               ; Сложение
0251   019D 2A 49 2A      lhld drawFileInfo_f
0252   01A0 11 10 00      lxi d, 16
0253   01A3 19            dad d
0254   01A4               ; Сдвиг вправо
0255   01A4 5E            mov e, m
0256   01A5 23            inx h
0257   01A6 56            mov d, m
0258   01A7 EB            xchg
0259   01A8 11 05 00      lxi d, 5
0260   01AB CD DE 21      call op_shr16
0261   01AE               ; 16 битная арифметическая операция с константой
0262   01AE 7D            mov a, l
0263   01AF E6 3F         ani 63
0264   01B1 6F            mov l, a
0265   01B2 26 00         mvi h, 0
0266   01B4 22 8D 2D      shld i2s_2
0267   01B7 2E 02         mvi l, 2
0268   01B9 22 8F 2D      shld i2s_3
0269   01BC 3E 30         mvi a, 48
0270   01BE CD 7C 21      call i2s
0271   01C1             l6:
0272   01C1               ; 88 drawFileInfo2(buf);
0273   01C1 21 4B 2A      lxi h, drawFileInfo_buf
0274   01C4 C3 89 1E      jmp drawFileInfo2
0275   01C7             showFileCursorAndDrawFileInfo:
0276   01C7 CD 64 1A      call showFileCursor
0277   01CA               ; 96 drawFileInfo();  
0278   01CA C3 89 00      jmp drawFileInfo
0279   01CD             drawFilesCount:
0280   01CD 21 00 00      lxi h, 0
0281   01D0 22 5D 2A      shld (drawFilesCount_total)+(0)
0282   01D3               ; 1 ((ushort*)a)[1] = (b>>16); }
0283   01D3 22 5F 2A      shld (drawFilesCount_total)+(2)
0284   01D6               ; 107 filesCnt = 0;
0285   01D6 22 63 2A      shld drawFilesCount_filesCnt
0286   01D9               ; 108 for(p = panelA.files1, i = panelA.cnt; i; ++p, --i) {
0287   01D9 2A 1B 27      lhld panelA
0288   01DC 22 65 2A      shld drawFilesCount_p
0289   01DF 2A 21 28      lhld (panelA)+(262)
0290   01E2 22 61 2A      shld drawFilesCount_i
0291   01E5             l7:
0292   01E5               ; convertToConfition
0293   01E5 7D            mov a, l
0294   01E6 B4            ora h
0295   01E7 CA 22 02      jz l8
0296   01EA               ; 109 if((p->fattrib & 0x10) == 0) ++filesCnt;Сложение
0297   01EA 2A 65 2A      lhld drawFilesCount_p
0298   01ED 11 0B 00      lxi d, 11
0299   01F0 19            dad d
0300   01F1 7E            mov a, m
0301   01F2 E6 10         ani 16
0302   01F4 C2 FE 01      jnz l10
0303   01F7               ; 109 ++filesCnt;
0304   01F7 2A 63 2A      lhld drawFilesCount_filesCnt
0305   01FA 23            inx h
0306   01FB 22 63 2A      shld drawFilesCount_filesCnt
0307   01FE             l10:
0308   01FE               ; 110 add32_32(&total, &p->fsize);
0309   01FE 21 5D 2A      lxi h, drawFilesCount_total
0310   0201 22 92 2D      shld add32_32_1
0311   0204               ; Сложение
0312   0204 2A 65 2A      lhld drawFilesCount_p
0313   0207 11 0C 00      lxi d, 12
0314   020A 19            dad d
0315   020B CD EC 21      call add32_32
0316   020E             l9:
0317   020E 2A 65 2A      lhld drawFilesCount_p
0318   0211 11 14 00      lxi d, 20
0319   0214 19            dad d
0320   0215 22 65 2A      shld drawFilesCount_p
0321   0218 2A 61 2A      lhld drawFilesCount_i
0322   021B 2B            dcx h
0323   021C 22 61 2A      shld drawFilesCount_i
0324   021F C3 E5 01      jmp l7
0325   0222             l8:
0326   0222               ; 113 drawFilesCountInt(&total, filesCnt);
0327   0222 21 5D 2A      lxi h, drawFilesCount_total
0328   0225 22 3D 2D      shld drawFilesCountInt_1
0329   0228 2A 63 2A      lhld drawFilesCount_filesCnt
0330   022B C3 4F 1B      jmp drawFilesCountInt
0331   022E             drawFiles2:
0332   022E CD 03 00      call drawFiles
0333   0231               ; 121 drawFilesCount();
0334   0231 CD CD 01      call drawFilesCount
0335   0234               ; 122 swapPanels();
0336   0234 CD 0F 00      call swapPanels
0337   0237               ; 123 drawFiles();
0338   0237 CD 03 00      call drawFiles
0339   023A               ; 124 drawFilesCount();
0340   023A CD CD 01      call drawFilesCount
0341   023D               ; 125 drawFileInfo();
0342   023D CD 89 00      call drawFileInfo
0343   0240               ; 126 swapPanels();
0344   0240 CD 0F 00      call swapPanels
0345   0243               ; 127 showFileCursorAndDrawFileInfo();
0346   0243 C3 C7 01      jmp showFileCursorAndDrawFileInfo
0347   0246             drawScreen:
0348   0246 AF            xra a
0349   0247 32 2F 29      sta (cmdline)+(0)
0350   024A               ; 135 drawScreenInt();
0351   024A CD 52 1C      call drawScreenInt
0352   024D               ; 136 drawCmdLineWithPath();
0353   024D CD A1 1E      call drawCmdLineWithPath
0354   0250               ; 137 drawFiles2();
0355   0250 C3 2E 02      jmp drawFiles2
0356   0253             processInput:
0357   0253 C5            push b
0358   0254 32 67 2A      sta processInput_1
0359   0257               ; 144 strlen(cmdline);<cmdline_pos>
0360   0257 21 2F 29      lxi h, cmdline
0361   025A CD 07 22      call strlen
0362   025D 44            mov b, h
0363   025E 4D            mov c, l
0364   025F               ; 145 if(c==KEY_BKSPC) {
0365   025F 3A 67 2A      lda processInput_1
0366   0262 FE 7F         cpi 127
0367   0264 C2 77 02      jnz l11
0368   0267               ; 146 if(cmdline_pos==0) return;Сложение с константой 0
0369   0267 7D            mov a, l
0370   0268 B4            ora h
0371   0269 C2 6E 02      jnz l12
0372   026C               ; 146 return;
0373   026C C1            pop b
0374   026D C9            ret
0375   026E             l12:
0376   026E               ; 147 --cmdline_pos;    
0377   026E 0B            dcx b
0378   026F               ; 148 cmdline[cmdline_pos] = 0;Сложение с BC
0379   026F 21 2F 29      lxi h, cmdline
0380   0272 09            dad b
0381   0273 36 00         mvi m, 0
0382   0275               ; 149 return;
0383   0275 C1            pop b
0384   0276 C9            ret
0385   0277             l11:
0386   0277               ; 151 if(c>=32) {
0387   0277 3A 67 2A      lda processInput_1
0388   027A FE 20         cpi 32
0389   027C DA 99 02      jc l13
0390   027F               ; 152 if(cmdline_pos==255) return; Сложение с BC
0391   027F 21 01 FF      lxi h, 65281
0392   0282 09            dad b
0393   0283 7D            mov a, l
0394   0284 B4            ora h
0395   0285 C2 8A 02      jnz l14
0396   0288               ; 152 return; 
0397   0288 C1            pop b
0398   0289 C9            ret
0399   028A             l14:
0400   028A               ; 153 cmdline[cmdline_pos] = c;Сложение с BC
0401   028A 21 2F 29      lxi h, cmdline
0402   028D 09            dad b
0403   028E 3A 67 2A      lda processInput_1
0404   0291 77            mov m, a
0405   0292               ; 154 ++cmdline_pos;
0406   0292 03            inx b
0407   0293               ; 155 cmdline[cmdline_pos] = 0;Сложение с BC
0408   0293 21 2F 29      lxi h, cmdline
0409   0296 09            dad b
0410   0297 36 00         mvi m, 0
0411   0299             l13:
0412   0299 C1            pop b
0413   029A C9            ret
0414   029B               ; --- drawError -----------------------------------------------------------------
0415   029B             drawError:
0416   029B 32 6A 2A      sta drawError_2
0417   029E               ; 166 if(e == 0) return;
0418   029E B7            ora a
0419   029F C2 A3 02      jnz l15
0420   02A2               ; 166 return;
0421   02A2 C9            ret
0422   02A3             l15:
0423   02A3               ; 169 drawWindow(" o{ibka ");
0424   02A3 21 6B 2E      lxi h, string0
0425   02A6 CD 10 1F      call drawWindow
0426   02A9               ; 170 drawAnyKeyButton();
0427   02A9 CD 6C 1F      call drawAnyKeyButton
0428   02AC               ; 171 drawWindowText(0, 0, text);
0429   02AC AF            xra a
0430   02AD 32 64 2D      sta drawWindowText_1
0431   02B0 32 65 2D      sta drawWindowText_2
0432   02B3 2A 68 2A      lhld drawError_1
0433   02B6 CD 8C 1F      call drawWindowText
0434   02B9               ; 174 switch(e) {
0435   02B9 3A 6A 2A      lda drawError_2
0436   02BC FE 01         cpi 1
0437   02BE CA F1 02      jz l17
0438   02C1 FE 02         cpi 2
0439   02C3 CA FA 02      jz l18
0440   02C6 FE 07         cpi 7
0441   02C8 CA 03 03      jz l19
0442   02CB FE 03         cpi 3
0443   02CD CA 0C 03      jz l20
0444   02D0 FE 04         cpi 4
0445   02D2 CA 15 03      jz l21
0446   02D5 FE 05         cpi 5
0447   02D7 CA 1E 03      jz l22
0448   02DA FE 06         cpi 6
0449   02DC CA 27 03      jz l23
0450   02DF FE 08         cpi 8
0451   02E1 CA 30 03      jz l24
0452   02E4 FE 80         cpi 128
0453   02E6 CA 39 03      jz l25
0454   02E9 FE 0B         cpi 11
0455   02EB CA 42 03      jz l26
0456   02EE C3 4B 03      jmp l27
0457   02F1             l17:
0458   02F1               ; 175 text = "net fajlowoj sistemy"; break;
0459   02F1 21 FC 2F      lxi h, string1
0460   02F4 22 68 2A      shld drawError_1
0461   02F7               ; 175 break;
0462   02F7 C3 69 03      jmp l16
0463   02FA             l18:
0464   02FA               ; 176 text = "o{ibka nakopitelq"; break;
0465   02FA 21 24 30      lxi h, string2
0466   02FD 22 68 2A      shld drawError_1
0467   0300               ; 176 break;
0468   0300 C3 69 03      jmp l16
0469   0303             l19:
0470   0303               ; 177 text = "papka ne pusta"; break;
0471   0303 21 7D 30      lxi h, string3
0472   0306 22 68 2A      shld drawError_1
0473   0309               ; 177 break;
0474   0309 C3 69 03      jmp l16
0475   030C             l20:
0476   030C               ; 178 text = "fajl ne otkryt"; break;
0477   030C 21 B9 2F      lxi h, string4
0478   030F 22 68 2A      shld drawError_1
0479   0312               ; 178 break;
0480   0312 C3 69 03      jmp l16
0481   0315             l21:
0482   0315               ; 179 text = "putx ne najden"; break;
0483   0315 21 C8 30      lxi h, string5
0484   0318 22 68 2A      shld drawError_1
0485   031B               ; 179 break;
0486   031B C3 69 03      jmp l16
0487   031E             l22:
0488   031E               ; 180 text = "maksimum fajlow w papke"; break;
0489   031E 21 E4 2F      lxi h, string6
0490   0321 22 68 2A      shld drawError_1
0491   0324               ; 180 break;
0492   0324 C3 69 03      jmp l16
0493   0327             l23:
0494   0327               ; 181 text = "disk zapolnen"; break;
0495   0327 21 9B 2F      lxi h, string7
0496   032A 22 68 2A      shld drawError_1
0497   032D               ; 181 break;
0498   032D C3 69 03      jmp l16
0499   0330             l24:
0500   0330               ; 182 text = "fail su}estwuet"; break;
0501   0330 21 A9 2F      lxi h, string8
0502   0333 22 68 2A      shld drawError_1
0503   0336               ; 182 break;
0504   0336 C3 69 03      jmp l16
0505   0339             l25:
0506   0339               ; 183 text = "prerwano polxzowatelem"; break;
0507   0339 21 8C 30      lxi h, string9
0508   033C 22 68 2A      shld drawError_1
0509   033F               ; 183 break;
0510   033F C3 69 03      jmp l16
0511   0342             l26:
0512   0342               ; 184 text = "putx bolx{e 255 simwolow"; break;
0513   0342 21 AF 30      lxi h, string10
0514   0345 22 68 2A      shld drawError_1
0515   0348               ; 184 break;
0516   0348 C3 69 03      jmp l16
0517   034B             l27:
0518   034B               ; 185 i2s(buf, e, 3, '0'); text = buf; break;
0519   034B 21 6B 2A      lxi h, drawError_buf
0520   034E 22 8B 2D      shld i2s_1
0521   0351 2A 6A 2A      lhld drawError_2
0522   0354 26 00         mvi h, 0
0523   0356 22 8D 2D      shld i2s_2
0524   0359 2E 03         mvi l, 3
0525   035B 22 8F 2D      shld i2s_3
0526   035E 3E 30         mvi a, 48
0527   0360 CD 7C 21      call i2s
0528   0363               ; 185 text = buf; break;
0529   0363 21 6B 2A      lxi h, drawError_buf
0530   0366 22 68 2A      shld drawError_1
0531   0369               ; 185 break;
0532   0369             l16:
0533   0369               ; 189 drawWindowText(0, 2, text);
0534   0369 AF            xra a
0535   036A 32 64 2D      sta drawWindowText_1
0536   036D 3E 02         mvi a, 2
0537   036F 32 65 2D      sta drawWindowText_2
0538   0372 2A 68 2A      lhld drawError_1
0539   0375 CD 8C 1F      call drawWindowText
0540   0378               ; 192 getch1();
0541   0378 C3 C2 20      jmp getch1
0542   037B             inputBox:
0543   037B C5            push b
0544   037C 22 6F 2A      shld inputBox_1
0545   037F               ; 200 clearFlag = 1;
0546   037F 0E 01         mvi c, 1
0547   0381               ; 203 drawWindow(title);
0548   0381 CD 10 1F      call drawWindow
0549   0384               ; 204 drawWindowText(3, 1, "imq:");
0550   0384 3E 03         mvi a, 3
0551   0386 32 64 2D      sta drawWindowText_1
0552   0389 3E 01         mvi a, 1
0553   038B 32 65 2D      sta drawWindowText_2
0554   038E 21 DB 2F      lxi h, string11
0555   0391 CD 8C 1F      call drawWindowText
0556   0394               ; 205 drawWindowText(6, 4, "[ wk - ok ]  [ ar2 - otmena ]");
0557   0394 3E 06         mvi a, 6
0558   0396 32 64 2D      sta drawWindowText_1
0559   0399 3E 04         mvi a, 4
0560   039B 32 65 2D      sta drawWindowText_2
0561   039E 21 70 2F      lxi h, string12
0562   03A1 CD 8C 1F      call drawWindowText
0563   03A4               ; 208 while(1) {
0564   03A4             l28:
0565   03A4               ; 209 drawWindowInput(3, 2, 32);
0566   03A4 3E 03         mvi a, 3
0567   03A6 32 77 2D      sta drawWindowInput_1
0568   03A9 3D            dcr a
0569   03AA 32 78 2D      sta drawWindowInput_2
0570   03AD 3E 20         mvi a, 32
0571   03AF CD A9 20      call drawWindowInput
0572   03B2               ; 210 c = getch1();
0573   03B2 CD C2 20      call getch1
0574   03B5 47            mov b, a
0575   03B6               ; 211 if(c==KEY_RIGHT) clearFlag = 0;
0576   03B6 3E 50         mvi a, 80
0577   03B8 B8            cmp b
0578   03B9 C2 BE 03      jnz l30
0579   03BC               ; 211 clearFlag = 0;
0580   03BC 0E 00         mvi c, 0
0581   03BE             l30:
0582   03BE               ; 212 if(c==KEY_LEFT) clearFlag = 0;
0583   03BE 3D            dcr a
0584   03BF B8            cmp b
0585   03C0 C2 C5 03      jnz l31
0586   03C3               ; 212 clearFlag = 0;
0587   03C3 0E 00         mvi c, 0
0588   03C5             l31:
0589   03C5               ; 213 if(c==KEY_ENTER) { hideTextCursor(); return 1; }
0590   03C5 3E 0D         mvi a, 13
0591   03C7 B8            cmp b
0592   03C8 C2 D2 03      jnz l32
0593   03CB               ; 213 hideTextCursor(); return 1; }
0594   03CB CD 3A 1A      call hideTextCursor
0595   03CE               ; 213 return 1; }
0596   03CE 3E 01         mvi a, 1
0597   03D0 C1            pop b
0598   03D1 C9            ret
0599   03D2             l32:
0600   03D2               ; 214 if(c==KEY_ESC) { hideTextCursor(); return 0; }
0601   03D2 3E 1B         mvi a, 27
0602   03D4 B8            cmp b
0603   03D5 C2 DE 03      jnz l33
0604   03D8               ; 214 hideTextCursor(); return 0; }
0605   03D8 CD 3A 1A      call hideTextCursor
0606   03DB               ; 214 return 0; }
0607   03DB AF            xra a
0608   03DC C1            pop b
0609   03DD C9            ret
0610   03DE             l33:
0611   03DE               ; 215 if(clearFlag) clearFlag = 0, cmdline[0] = 0;convertToConfition
0612   03DE 79            mov a, c
0613   03DF B7            ora a
0614   03E0 CA E9 03      jz l34
0615   03E3               ; 215 clearFlag = 0, cmdline[0] = 0;
0616   03E3 0E 00         mvi c, 0
0617   03E5 AF            xra a
0618   03E6 32 2F 29      sta (cmdline)+(0)
0619   03E9             l34:
0620   03E9               ; 216 processInput(c);
0621   03E9 78            mov a, b
0622   03EA CD 53 02      call processInput
0623   03ED C3 A4 03      jmp l28
0624   03F0             l29:
0625   03F0 C1            pop b
0626   03F1 C9            ret
0627   03F2               ; --- confirm -----------------------------------------------------------------
0628   03F2             confirm:
0629   03F2 22 73 2A      shld confirm_2
0630   03F5               ; 225 drawWindow(title);
0631   03F5 2A 71 2A      lhld confirm_1
0632   03F8 CD 10 1F      call drawWindow
0633   03FB               ; 226 drawWindowText(3, 1, text);
0634   03FB 3E 03         mvi a, 3
0635   03FD 32 64 2D      sta drawWindowText_1
0636   0400 3E 01         mvi a, 1
0637   0402 32 65 2D      sta drawWindowText_2
0638   0405 2A 73 2A      lhld confirm_2
0639   0408 CD 8C 1F      call drawWindowText
0640   040B               ; 227 drawWindowText(6, 4, "[ wk - ok ]  [ ar2 - otmena ]");
0641   040B 3E 06         mvi a, 6
0642   040D 32 64 2D      sta drawWindowText_1
0643   0410 3E 04         mvi a, 4
0644   0412 32 65 2D      sta drawWindowText_2
0645   0415 21 70 2F      lxi h, string12
0646   0418 CD 8C 1F      call drawWindowText
0647   041B               ; 230 while(1) {
0648   041B             l35:
0649   041B               ; 231 switch(getch1()) {
0650   041B CD C2 20      call getch1
0651   041E FE 0D         cpi 13
0652   0420 CA 2B 04      jz l38
0653   0423 FE 1B         cpi 27
0654   0425 CA 2E 04      jz l39
0655   0428 C3 30 04      jmp l37
0656   042B             l38:
0657   042B               ; 232 return 1;
0658   042B 3E 01         mvi a, 1
0659   042D C9            ret
0660   042E             l39:
0661   042E               ; 233 return 0;
0662   042E AF            xra a
0663   042F C9            ret
0664   0430             l37:
0665   0430 C3 1B 04      jmp l35
0666   0433             l36:
0667   0433 C9            ret
0668   0434               ; --- unpackName -----------------------------------------------------------------
0669   0434             unpackName:
0670   0434 C5            push b
0671   0435 22 77 2A      shld unpackName_2
0672   0438               ; 243 for(i=0; i!=11; ++i, ++s) {
0673   0438 06 00         mvi b, 0
0674   043A             l40:
0675   043A 3E 0B         mvi a, 11
0676   043C B8            cmp b
0677   043D CA 6F 04      jz l41
0678   0440               ; 244 if(i==8) *d = '.', ++d;
0679   0440 3E 08         mvi a, 8
0680   0442 B8            cmp b
0681   0443 C2 4F 04      jnz l43
0682   0446               ; 244 *d = '.', ++d;
0683   0446 2A 75 2A      lhld unpackName_1
0684   0449 36 2E         mvi m, 46
0685   044B 23            inx h
0686   044C 22 75 2A      shld unpackName_1
0687   044F             l43:
0688   044F               ; 245 if(*s!=' ') *d = *s, ++d;
0689   044F 2A 77 2A      lhld unpackName_2
0690   0452 7E            mov a, m
0691   0453 FE 20         cpi 32
0692   0455 CA 64 04      jz l44
0693   0458               ; 245 *d = *s, ++d;
0694   0458 7E            mov a, m
0695   0459 2A 75 2A      lhld unpackName_1
0696   045C 77            mov m, a
0697   045D 2A 75 2A      lhld unpackName_1
0698   0460 23            inx h
0699   0461 22 75 2A      shld unpackName_1
0700   0464             l44:
0701   0464             l42:
0702   0464 04            inr b
0703   0465 2A 77 2A      lhld unpackName_2
0704   0468 23            inx h
0705   0469 22 77 2A      shld unpackName_2
0706   046C C3 3A 04      jmp l40
0707   046F             l41:
0708   046F               ; 247 if(d[-1]=='.') --d;Сложение с константой -1
0709   046F 2A 75 2A      lhld unpackName_1
0710   0472 2B            dcx h
0711   0473 7E            mov a, m
0712   0474 FE 2E         cpi 46
0713   0476 C2 80 04      jnz l45
0714   0479               ; 247 --d;
0715   0479 2A 75 2A      lhld unpackName_1
0716   047C 2B            dcx h
0717   047D 22 75 2A      shld unpackName_1
0718   0480             l45:
0719   0480               ; 248 *d = 0;
0720   0480 2A 75 2A      lhld unpackName_1
0721   0483 36 00         mvi m, 0
0722   0485 C1            pop b
0723   0486 C9            ret
0724   0487               ; --- catPathAndUnpack -----------------------------------------------------------------
0725   0487             catPathAndUnpack:
0726   0487 22 7B 2A      shld catPathAndUnpack_2
0727   048A               ; 254 strlen(str);<len>
0728   048A 2A 79 2A      lhld catPathAndUnpack_1
0729   048D CD 07 22      call strlen
0730   0490 22 7D 2A      shld catPathAndUnpack_len
0731   0493               ; 255 if(len) {convertToConfition
0732   0493 7D            mov a, l
0733   0494 B4            ora h
0734   0495 CA B8 04      jz l46
0735   0498               ; 256 if(len >= 255-13) return 1; // Не влезает разделитель плюс имя файла  Сложение
0736   0498 11 0E FF      lxi d, 65294
0737   049B 19            dad d
0738   049C D2 A2 04      jnc l47
0739   049F               ; 256 return 1; // Не влезает разделитель плюс имя файла  
0740   049F 3E 01         mvi a, 1
0741   04A1 C9            ret
0742   04A2             l47:
0743   04A2               ; 257 str[len] = '/';  Сложение
0744   04A2 2A 79 2A      lhld catPathAndUnpack_1
0745   04A5 EB            xchg
0746   04A6 2A 7D 2A      lhld catPathAndUnpack_len
0747   04A9 19            dad d
0748   04AA 36 2F         mvi m, 47
0749   04AC               ; 258 str += len+1;Сложение с константой 1
0750   04AC 2A 7D 2A      lhld catPathAndUnpack_len
0751   04AF 23            inx h
0752   04B0               ; Сложение
0753   04B0 EB            xchg
0754   04B1 2A 79 2A      lhld catPathAndUnpack_1
0755   04B4 19            dad d
0756   04B5 22 79 2A      shld catPathAndUnpack_1
0757   04B8             l46:
0758   04B8               ; 260 unpackName(str, fileName);
0759   04B8 2A 79 2A      lhld catPathAndUnpack_1
0760   04BB 22 75 2A      shld unpackName_1
0761   04BE 2A 7B 2A      lhld catPathAndUnpack_2
0762   04C1 CD 34 04      call unpackName
0763   04C4               ; 261 return 0;
0764   04C4 AF            xra a
0765   04C5 C9            ret
0766   04C6               ; --- getFirstSelected -----------------------------------------------------------------
0767   04C6             getFirstSelected:
0768   04C6 22 97 2A      shld getFirstSelected_1
0769   04C9               ; 272 nextSelectedCnt = panelA.cnt;
0770   04C9 2A 21 28      lhld (panelA)+(262)
0771   04CC 22 7F 2A      shld nextSelectedCnt
0772   04CF               ; 273 nextSelectedFile = panelA.files1;
0773   04CF 2A 1B 27      lhld panelA
0774   04D2 22 81 2A      shld nextSelectedFile
0775   04D5               ; 274 if(type = getNextSelected(name)) return type; 
0776   04D5 2A 97 2A      lhld getFirstSelected_1
0777   04D8 CD 12 05      call getNextSelected
0778   04DB 32 99 2A      sta getFirstSelected_type
0779   04DE               ; convertToConfition
0780   04DE B7            ora a
0781   04DF CA E6 04      jz l48
0782   04E2               ; 274 return type; 
0783   04E2 3A 99 2A      lda getFirstSelected_type
0784   04E5 C9            ret
0785   04E6             l48:
0786   04E6               ; 276 nextSelectedFile = getSelNoBack();
0787   04E6 CD 76 00      call getSelNoBack
0788   04E9 22 81 2A      shld nextSelectedFile
0789   04EC               ; 277 if(!nextSelectedFile) return 0;convertToConfition
0790   04EC 7D            mov a, l
0791   04ED B4            ora h
0792   04EE C2 F3 04      jnz l49
0793   04F1               ; 277 return 0;
0794   04F1 AF            xra a
0795   04F2 C9            ret
0796   04F3             l49:
0797   04F3               ; 278 unpackName(name, nextSelectedFile->fname);
0798   04F3 2A 97 2A      lhld getFirstSelected_1
0799   04F6 22 75 2A      shld unpackName_1
0800   04F9 2A 81 2A      lhld nextSelectedFile
0801   04FC CD 34 04      call unpackName
0802   04FF               ; 279 if(nextSelectedFile->fattrib & 0x10) return 2;Сложение
0803   04FF 2A 81 2A      lhld nextSelectedFile
0804   0502 11 0B 00      lxi d, 11
0805   0505 19            dad d
0806   0506 7E            mov a, m
0807   0507 E6 10         ani 16
0808   0509               ; convertToConfition
0809   0509 CA 0F 05      jz l50
0810   050C               ; 279 return 2;
0811   050C 3E 02         mvi a, 2
0812   050E C9            ret
0813   050F             l50:
0814   050F               ; 280 return 1;
0815   050F 3E 01         mvi a, 1
0816   0511 C9            ret
0817   0512               ; --- getNextSelected -----------------------------------------------------------------
0818   0512             getNextSelected:
0819   0512 22 9A 2A      shld getNextSelected_1
0820   0515               ; 286 for(;;) {
0821   0515             l51:
0822   0515               ; 287 if(nextSelectedCnt == 0) return 0;Сложение с константой 0
0823   0515 2A 7F 2A      lhld nextSelectedCnt
0824   0518 7D            mov a, l
0825   0519 B4            ora h
0826   051A C2 1F 05      jnz l54
0827   051D               ; 287 return 0;
0828   051D AF            xra a
0829   051E C9            ret
0830   051F             l54:
0831   051F               ; 288 if(nextSelectedFile->fattrib & 0x80) break;Сложение
0832   051F 2A 81 2A      lhld nextSelectedFile
0833   0522 11 0B 00      lxi d, 11
0834   0525 19            dad d
0835   0526 7E            mov a, m
0836   0527 E6 80         ani 128
0837   0529               ; convertToConfition
0838   0529 C2 40 05      jnz l52
0839   052C 2A 81 2A      lhld nextSelectedFile
0840   052F 11 14 00      lxi d, 20
0841   0532 19            dad d
0842   0533 22 81 2A      shld nextSelectedFile
0843   0536 2A 7F 2A      lhld nextSelectedCnt
0844   0539 2B            dcx h
0845   053A 22 7F 2A      shld nextSelectedCnt
0846   053D             l53:
0847   053D C3 15 05      jmp l51
0848   0540             l52:
0849   0540               ; 292 nextSelectedFile->fattrib &= 0x7F;Сложение
0850   0540 2A 81 2A      lhld nextSelectedFile
0851   0543 11 0B 00      lxi d, 11
0852   0546 19            dad d
0853   0547 7E            mov a, m
0854   0548 E6 7F         ani 127
0855   054A 77            mov m, a
0856   054B               ; 293 unpackName(name, nextSelectedFile->fname);
0857   054B 2A 9A 2A      lhld getNextSelected_1
0858   054E 22 75 2A      shld unpackName_1
0859   0551 2A 81 2A      lhld nextSelectedFile
0860   0554 CD 34 04      call unpackName
0861   0557               ; 294 ++nextSelectedFile, --nextSelectedCnt;
0862   0557 2A 81 2A      lhld nextSelectedFile
0863   055A 11 14 00      lxi d, 20
0864   055D 19            dad d
0865   055E 22 81 2A      shld nextSelectedFile
0866   0561 2A 7F 2A      lhld nextSelectedCnt
0867   0564 2B            dcx h
0868   0565 22 7F 2A      shld nextSelectedCnt
0869   0568               ; 295 if(nextSelectedFile[-1].fattrib & 0x10) return 2;Сложение
0870   0568 2A 81 2A      lhld nextSelectedFile
0871   056B 11 EC FF      lxi d, 65516
0872   056E 19            dad d
0873   056F               ; Сложение
0874   056F 11 0B 00      lxi d, 11
0875   0572 19            dad d
0876   0573 7E            mov a, m
0877   0574 E6 10         ani 16
0878   0576               ; convertToConfition
0879   0576 CA 7C 05      jz l56
0880   0579               ; 295 return 2;
0881   0579 3E 02         mvi a, 2
0882   057B C9            ret
0883   057C             l56:
0884   057C               ; 296 return 1;
0885   057C 3E 01         mvi a, 1
0886   057E C9            ret
0887   057F               ; --- cmpFileInfo -----------------------------------------------------------------
0888   057F             cmpFileInfo:
0889   057F C5            push b
0890   0580 22 9E 2A      shld cmpFileInfo_2
0891   0583               ; 305 i = (a->fattrib&0x10);Сложение
0892   0583 2A 9C 2A      lhld cmpFileInfo_1
0893   0586 11 0B 00      lxi d, 11
0894   0589 19            dad d
0895   058A 7E            mov a, m
0896   058B E6 10         ani 16
0897   058D 47            mov b, a
0898   058E               ; 306 j = (b->fattrib&0x10);Сложение
0899   058E 2A 9E 2A      lhld cmpFileInfo_2
0900   0591 11 0B 00      lxi d, 11
0901   0594 19            dad d
0902   0595 7E            mov a, m
0903   0596 E6 10         ani 16
0904   0598 4F            mov c, a
0905   0599               ; 307 if(i<j) return 1;
0906   0599 79            mov a, c
0907   059A B8            cmp b
0908   059B DA A5 05      jc l57
0909   059E CA A5 05      jz l57
0910   05A1               ; 307 return 1;
0911   05A1 3E 01         mvi a, 1
0912   05A3 C1            pop b
0913   05A4 C9            ret
0914   05A5             l57:
0915   05A5               ; 308 if(j<i) return 0;
0916   05A5 79            mov a, c
0917   05A6 B8            cmp b
0918   05A7 D2 AD 05      jnc l58
0919   05AA               ; 308 return 0;
0920   05AA AF            xra a
0921   05AB C1            pop b
0922   05AC C9            ret
0923   05AD             l58:
0924   05AD               ; 309 if(1==memcmp(a->fname, b->fname, sizeof(a->fname))) return 1;
0925   05AD 2A 9C 2A      lhld cmpFileInfo_1
0926   05B0 22 98 2D      shld memcmp_1
0927   05B3 2A 9E 2A      lhld cmpFileInfo_2
0928   05B6 22 9A 2D      shld memcmp_2
0929   05B9 21 0B 00      lxi h, 11
0930   05BC CD 16 22      call memcmp
0931   05BF FE 01         cpi 1
0932   05C1 C2 C8 05      jnz l59
0933   05C4               ; 309 return 1;
0934   05C4 3E 01         mvi a, 1
0935   05C6 C1            pop b
0936   05C7 C9            ret
0937   05C8             l59:
0938   05C8               ; 310 return 0;
0939   05C8 AF            xra a
0940   05C9 C1            pop b
0941   05CA C9            ret
0942   05CB               ; --- sort -----------------------------------------------------------------
0943   05CB             sort:
0944   05CB 22 A2 2A      shld sort_2
0945   05CE               ; 317 st_;<st>
0946   05CE 21 AA 2A      lxi h, sort_st_
0947   05D1 22 2A 2B      shld sort_st
0948   05D4               ; 318 0;<stc>
0949   05D4 AF            xra a
0950   05D5 32 2C 2B      sta sort_stc
0951   05D8               ; 319 while(1) {
0952   05D8             l60:
0953   05D8               ; 320 i = low;
0954   05D8 2A A0 2A      lhld sort_1
0955   05DB 22 A4 2A      shld sort_i
0956   05DE               ; 321 j = high;
0957   05DE 2A A2 2A      lhld sort_2
0958   05E1 22 A6 2A      shld sort_j
0959   05E4               ; 322 x = low + (high-low)/2;16 битная арифметическая операция с константой
0960   05E4 2A A0 2A      lhld sort_1
0961   05E7 EB            xchg
0962   05E8 2A A2 2A      lhld sort_2
0963   05EB 7D            mov a, l
0964   05EC 93            sub e
0965   05ED 6F            mov l, a
0966   05EE 7C            mov a, h
0967   05EF 9A            sbb d
0968   05F0 67            mov h, a
0969   05F1 11 14 00      lxi d, 20
0970   05F4 CD 3B 22      call op_div16
0971   05F7 11 02 00      lxi d, 2
0972   05FA CD 3B 22      call op_div16
0973   05FD               ; Умножение HL на 20
0974   05FD 54            mov d, h
0975   05FE 5D            mov e, l
0976   05FF 29            dad h
0977   0600 29            dad h
0978   0601 19            dad d
0979   0602 29            dad h
0980   0603 29            dad h
0981   0604               ; Сложение
0982   0604 EB            xchg
0983   0605 2A A0 2A      lhld sort_1
0984   0608 19            dad d
0985   0609 22 A8 2A      shld sort_x
0986   060C               ; 323 while(1) {
0987   060C             l62:
0988   060C               ; 324 while(0!=cmpFileInfo(x, i)) i++;
0989   060C             l64:
0990   060C 2A A8 2A      lhld sort_x
0991   060F 22 9C 2A      shld cmpFileInfo_1
0992   0612 2A A4 2A      lhld sort_i
0993   0615 CD 7F 05      call cmpFileInfo
0994   0618 B7            ora a
0995   0619 CA 2B 06      jz l65
0996   061C               ; 324 i++;
0997   061C 2A A4 2A      lhld sort_i
0998   061F E5            push h
0999   0620 11 14 00      lxi d, 20
1000   0623 19            dad d
1001   0624 22 A4 2A      shld sort_i
1002   0627 E1            pop h
1003   0628 C3 0C 06      jmp l64
1004   062B             l65:
1005   062B               ; 325 while(0!=cmpFileInfo(j, x)) j--;
1006   062B             l66:
1007   062B 2A A6 2A      lhld sort_j
1008   062E 22 9C 2A      shld cmpFileInfo_1
1009   0631 2A A8 2A      lhld sort_x
1010   0634 CD 7F 05      call cmpFileInfo
1011   0637 B7            ora a
1012   0638 CA 4A 06      jz l67
1013   063B               ; 325 j--;
1014   063B 2A A6 2A      lhld sort_j
1015   063E E5            push h
1016   063F 11 EC FF      lxi d, 65516
1017   0642 19            dad d
1018   0643 22 A6 2A      shld sort_j
1019   0646 E1            pop h
1020   0647 C3 2B 06      jmp l66
1021   064A             l67:
1022   064A               ; 326 if(i <= j) {
1023   064A 2A A4 2A      lhld sort_i
1024   064D EB            xchg
1025   064E 2A A6 2A      lhld sort_j
1026   0651 CD 00 21      call op_cmp16
1027   0654 DA AA 06      jc l68
1028   0657               ; 327 memswap(i, j, sizeof(FileInfo));
1029   0657 2A A4 2A      lhld sort_i
1030   065A 22 7A 2D      shld memswap_1
1031   065D 2A A6 2A      lhld sort_j
1032   0660 22 7C 2D      shld memswap_2
1033   0663 21 14 00      lxi h, 20
1034   0666 CD CA 20      call memswap
1035   0669               ; 328 if(x==i) x=j; else if(x==j) x=i;
1036   0669 2A A8 2A      lhld sort_x
1037   066C EB            xchg
1038   066D 2A A4 2A      lhld sort_i
1039   0670 CD 00 21      call op_cmp16
1040   0673 C2 7F 06      jnz l69
1041   0676               ; 328 x=j; else if(x==j) x=i;
1042   0676 2A A6 2A      lhld sort_j
1043   0679 22 A8 2A      shld sort_x
1044   067C C3 92 06      jmp l70
1045   067F             l69:
1046   067F               ; 328 if(x==j) x=i;
1047   067F 2A A8 2A      lhld sort_x
1048   0682 EB            xchg
1049   0683 2A A6 2A      lhld sort_j
1050   0686 CD 00 21      call op_cmp16
1051   0689 C2 92 06      jnz l71
1052   068C               ; 328 x=i;
1053   068C 2A A4 2A      lhld sort_i
1054   068F 22 A8 2A      shld sort_x
1055   0692             l71:
1056   0692             l70:
1057   0692               ; 329 i++; j--;   
1058   0692 2A A4 2A      lhld sort_i
1059   0695 E5            push h
1060   0696 11 14 00      lxi d, 20
1061   0699 19            dad d
1062   069A 22 A4 2A      shld sort_i
1063   069D E1            pop h
1064   069E               ; 329 j--;   
1065   069E 2A A6 2A      lhld sort_j
1066   06A1 E5            push h
1067   06A2 11 EC FF      lxi d, 65516
1068   06A5 19            dad d
1069   06A6 22 A6 2A      shld sort_j
1070   06A9 E1            pop h
1071   06AA             l68:
1072   06AA               ; 331 if(j<=i) break;
1073   06AA 2A A6 2A      lhld sort_j
1074   06AD EB            xchg
1075   06AE 2A A4 2A      lhld sort_i
1076   06B1 CD 00 21      call op_cmp16
1077   06B4 D2 BA 06      jnc l63
1078   06B7 C3 0C 06      jmp l62
1079   06BA             l63:
1080   06BA               ; 333 if(i < high) {
1081   06BA 2A A4 2A      lhld sort_i
1082   06BD EB            xchg
1083   06BE 2A A2 2A      lhld sort_2
1084   06C1 CD 00 21      call op_cmp16
1085   06C4 DA 13 07      jc l73
1086   06C7 CA 13 07      jz l73
1087   06CA               ; 334 if(low < j) if(stc != SORT_STACK_MAX) *st = low, ++st, *st = j, ++st, ++stc;
1088   06CA 2A A0 2A      lhld sort_1
1089   06CD EB            xchg
1090   06CE 2A A6 2A      lhld sort_j
1091   06D1 CD 00 21      call op_cmp16
1092   06D4 DA 0A 07      jc l74
1093   06D7 CA 0A 07      jz l74
1094   06DA               ; 334 if(stc != SORT_STACK_MAX) *st = low, ++st, *st = j, ++st, ++stc;
1095   06DA 3A 2C 2B      lda sort_stc
1096   06DD FE 20         cpi 32
1097   06DF CA 0A 07      jz l75
1098   06E2               ; 334 *st = low, ++st, *st = j, ++st, ++stc;
1099   06E2 2A A0 2A      lhld sort_1
1100   06E5 EB            xchg
1101   06E6 2A 2A 2B      lhld sort_st
1102   06E9 73            mov m, e
1103   06EA 23            inx h
1104   06EB 72            mov m, d
1105   06EC 2A 2A 2B      lhld sort_st
1106   06EF 23            inx h
1107   06F0 23            inx h
1108   06F1 22 2A 2B      shld sort_st
1109   06F4 2A A6 2A      lhld sort_j
1110   06F7 EB            xchg
1111   06F8 2A 2A 2B      lhld sort_st
1112   06FB 73            mov m, e
1113   06FC 23            inx h
1114   06FD 72            mov m, d
1115   06FE 2A 2A 2B      lhld sort_st
1116   0701 23            inx h
1117   0702 23            inx h
1118   0703 22 2A 2B      shld sort_st
1119   0706 21 2C 2B      lxi h, sort_stc
1120   0709 34            inr m
1121   070A             l75:
1122   070A             l74:
1123   070A               ; 335 low = i; 
1124   070A 2A A4 2A      lhld sort_i
1125   070D 22 A0 2A      shld sort_1
1126   0710               ; 336 continue;
1127   0710 C3 D8 05      jmp l60
1128   0713             l73:
1129   0713               ; 338 if(low < j) { 
1130   0713 2A A0 2A      lhld sort_1
1131   0716 EB            xchg
1132   0717 2A A6 2A      lhld sort_j
1133   071A CD 00 21      call op_cmp16
1134   071D DA 2C 07      jc l76
1135   0720 CA 2C 07      jz l76
1136   0723               ; 339 high = j;
1137   0723 2A A6 2A      lhld sort_j
1138   0726 22 A2 2A      shld sort_2
1139   0729               ; 340 continue; 
1140   0729 C3 D8 05      jmp l60
1141   072C             l76:
1142   072C               ; 342 if(stc==0) break;
1143   072C 3A 2C 2B      lda sort_stc
1144   072F B7            ora a
1145   0730 CA 58 07      jz l61
1146   0733 21 2C 2B      lxi h, sort_stc
1147   0736 35            dcr m
1148   0737 2A 2A 2B      lhld sort_st
1149   073A 2B            dcx h
1150   073B 2B            dcx h
1151   073C 22 2A 2B      shld sort_st
1152   073F 5E            mov e, m
1153   0740 23            inx h
1154   0741 56            mov d, m
1155   0742 EB            xchg
1156   0743 22 A2 2A      shld sort_2
1157   0746 2A 2A 2B      lhld sort_st
1158   0749 2B            dcx h
1159   074A 2B            dcx h
1160   074B 22 2A 2B      shld sort_st
1161   074E 5E            mov e, m
1162   074F 23            inx h
1163   0750 56            mov d, m
1164   0751 EB            xchg
1165   0752 22 A0 2A      shld sort_1
1166   0755 C3 D8 05      jmp l60
1167   0758             l61:
1168   0758 C9            ret
1169   0759               ; --- packName -----------------------------------------------------------------
1170   0759             packName:
1171   0759 C5            push b
1172   075A 22 2F 2B      shld packName_2
1173   075D               ; 352 memset(buf, ' ', 11);    
1174   075D 2A 2D 2B      lhld packName_1
1175   0760 22 A0 2D      shld memset_1
1176   0763 3E 20         mvi a, 32
1177   0765 32 A2 2D      sta memset_2
1178   0768 21 0B 00      lxi h, 11
1179   076B CD 76 22      call memset
1180   076E               ; 354 i = 8;
1181   076E 3E 08         mvi a, 8
1182   0770 32 31 2B      sta packName_i
1183   0773               ; 355 f = '.';
1184   0773 0E 2E         mvi c, 46
1185   0775               ; 356 for(;;) {
1186   0775             l78:
1187   0775               ; 357 c = *path;
1188   0775 2A 2F 2B      lhld packName_2
1189   0778 46            mov b, m
1190   0779               ; 358 if(c == 0) return;
1191   0779 AF            xra a
1192   077A B8            cmp b
1193   077B C2 80 07      jnz l81
1194   077E               ; 358 return;
1195   077E C1            pop b
1196   077F C9            ret
1197   0780             l81:
1198   0780               ; 359 ++path;
1199   0780 23            inx h
1200   0781 22 2F 2B      shld packName_2
1201   0784               ; 360 if(c == f) { buf += i; i = 3; f = 0; continue; }
1202   0784 79            mov a, c
1203   0785 B8            cmp b
1204   0786 C2 9F 07      jnz l82
1205   0789               ; 360 buf += i; i = 3; f = 0; continue; }Сложение
1206   0789 2A 31 2B      lhld packName_i
1207   078C 26 00         mvi h, 0
1208   078E EB            xchg
1209   078F 2A 2D 2B      lhld packName_1
1210   0792 19            dad d
1211   0793 22 2D 2B      shld packName_1
1212   0796               ; 360 i = 3; f = 0; continue; }
1213   0796 3E 03         mvi a, 3
1214   0798 32 31 2B      sta packName_i
1215   079B               ; 360 f = 0; continue; }
1216   079B 4A            mov c, d
1217   079C               ; 360 continue; }
1218   079C C3 B5 07      jmp l80
1219   079F             l82:
1220   079F               ; 361 if(i) { *buf = c; ++buf; --i; }convertToConfition
1221   079F 3A 31 2B      lda packName_i
1222   07A2 B7            ora a
1223   07A3 CA B5 07      jz l83
1224   07A6               ; 361 *buf = c; ++buf; --i; }
1225   07A6 2A 2D 2B      lhld packName_1
1226   07A9 70            mov m, b
1227   07AA               ; 361 ++buf; --i; }
1228   07AA 2A 2D 2B      lhld packName_1
1229   07AD 23            inx h
1230   07AE 22 2D 2B      shld packName_1
1231   07B1               ; 361 --i; }
1232   07B1 21 31 2B      lxi h, packName_i
1233   07B4 35            dcr m
1234   07B5             l83:
1235   07B5             l80:
1236   07B5 C3 75 07      jmp l78
1237   07B8             l79:
1238   07B8 C1            pop b
1239   07B9 C9            ret
1240   07BA               ; --- getFiles -----------------------------------------------------------------
1241   07BA             getFiles:
1242   07BA CD 3A 1A      call hideTextCursor
1243   07BD               ; 378 panelA.cnt = 0;
1244   07BD 21 00 00      lxi h, 0
1245   07C0 22 21 28      shld (panelA)+(262)
1246   07C3               ; 379 panelA.offset = 0;
1247   07C3 22 1F 28      shld (panelA)+(260)
1248   07C6               ; 380 panelA.cursorX = 0;
1249   07C6 AF            xra a
1250   07C7 32 1D 28      sta (panelA)+(258)
1251   07CA               ; 381 panelA.cursorY = 0;
1252   07CA 32 1E 28      sta (panelA)+(259)
1253   07CD               ; 383 f = panelA.files1;
1254   07CD 2A 1B 27      lhld panelA
1255   07D0 22 32 2B      shld getFiles_f
1256   07D3               ; 386 if(panelA.path1[0]) {convertToConfition
1257   07D3 3A 1D 27      lda ((panelA)+(2))+(0)
1258   07D6 B7            ora a
1259   07D7 CA FA 07      jz l84
1260   07DA               ; 387 memcpy(f, parentDir, sizeof(FileInfo));
1261   07DA 22 A5 2D      shld memcpy_1
1262   07DD 21 31 2A      lxi h, parentDir
1263   07E0 22 A7 2D      shld memcpy_2
1264   07E3 21 14 00      lxi h, 20
1265   07E6 CD 90 22      call memcpy
1266   07E9               ; 388 ++f;
1267   07E9 2A 32 2B      lhld getFiles_f
1268   07EC 11 14 00      lxi d, 20
1269   07EF 19            dad d
1270   07F0 22 32 2B      shld getFiles_f
1271   07F3               ; 389 ++panelA.cnt;    
1272   07F3 2A 21 28      lhld (panelA)+(262)
1273   07F6 23            inx h
1274   07F7 22 21 28      shld (panelA)+(262)
1275   07FA             l84:
1276   07FA               ; 392 st = f;
1277   07FA 2A 32 2B      lhld getFiles_f
1278   07FD 22 34 2B      shld getFiles_st
1279   0800               ; 393 for(;;) {
1280   0800             l85:
1281   0800               ; 394 i = fs_findfirst(panelA.path1, f, maxFiles-panelA.cnt);  
1282   0800 21 1D 27      lxi h, (panelA)+(2)
1283   0803 22 AB 2D      shld fs_findfirst_1
1284   0806 2A 32 2B      lhld getFiles_f
1285   0809 22 AD 2D      shld fs_findfirst_2
1286   080C               ; 16 битная арифметическая операция с константой
1287   080C 2A 21 28      lhld (panelA)+(262)
1288   080F EB            xchg
1289   0810 2A 2F 2A      lhld maxFiles
1290   0813 7D            mov a, l
1291   0814 93            sub e
1292   0815 6F            mov l, a
1293   0816 7C            mov a, h
1294   0817 9A            sbb d
1295   0818 67            mov h, a
1296   0819 CD B4 22      call fs_findfirst
1297   081C 32 38 2B      sta getFiles_i
1298   081F               ; 395 if(i==ERR_MAX_FILES) i=0; //! Вывести бы ошибки
1299   081F FE 0A         cpi 10
1300   0821 C2 28 08      jnz l88
1301   0824               ; 395 i=0; //! Вывести бы ошибки
1302   0824 AF            xra a
1303   0825 32 38 2B      sta getFiles_i
1304   0828             l88:
1305   0828               ; 396 if(i==0) break;    
1306   0828 B7            ora a
1307   0829 CA 3B 08      jz l86
1308   082C 3A 1D 27      lda ((panelA)+(2))+(0)
1309   082F B7            ora a
1310   0830 C2 34 08      jnz l90
1311   0833               ; 397 return; //! Вывести бы ошибки
1312   0833 C9            ret
1313   0834             l90:
1314   0834               ; 398 panelA.path1[0] = 0;
1315   0834 AF            xra a
1316   0835 32 1D 27      sta ((panelA)+(2))+(0)
1317   0838             l87:
1318   0838 C3 00 08      jmp l85
1319   083B             l86:
1320   083B               ; 401 f += fs_low;
1321   083B 2A DA 2D      lhld fs_low
1322   083E               ; Умножение HL на 20
1323   083E 54            mov d, h
1324   083F 5D            mov e, l
1325   0840 29            dad h
1326   0841 29            dad h
1327   0842 19            dad d
1328   0843 29            dad h
1329   0844 29            dad h
1330   0845               ; Сложение
1331   0845 EB            xchg
1332   0846 2A 32 2B      lhld getFiles_f
1333   0849 19            dad d
1334   084A 22 32 2B      shld getFiles_f
1335   084D               ; 402 panelA.cnt += fs_low;Сложение
1336   084D 2A DA 2D      lhld fs_low
1337   0850 EB            xchg
1338   0851 2A 21 28      lhld (panelA)+(262)
1339   0854 19            dad d
1340   0855 22 21 28      shld (panelA)+(262)
1341   0858               ; 404 for(j=panelA.cnt, f=panelA.files1; j; --j, ++f) { 
1342   0858 22 39 2B      shld getFiles_j
1343   085B 2A 1B 27      lhld panelA
1344   085E 22 32 2B      shld getFiles_f
1345   0861             l91:
1346   0861               ; convertToConfition
1347   0861 2A 39 2B      lhld getFiles_j
1348   0864 7D            mov a, l
1349   0865 B4            ora h
1350   0866 CA BE 08      jz l92
1351   0869               ; 405 f->fattrib &= 0x7F;Сложение
1352   0869 2A 32 2B      lhld getFiles_f
1353   086C 11 0B 00      lxi d, 11
1354   086F 19            dad d
1355   0870 7E            mov a, m
1356   0871 E6 7F         ani 127
1357   0873 77            mov m, a
1358   0874               ; 406 n=f->fname;
1359   0874 2A 32 2B      lhld getFiles_f
1360   0877 22 36 2B      shld getFiles_n
1361   087A               ; 407 for(i=12; i; --i, ++n)
1362   087A 3E 0C         mvi a, 12
1363   087C 32 38 2B      sta getFiles_i
1364   087F             l94:
1365   087F               ; convertToConfition
1366   087F 3A 38 2B      lda getFiles_i
1367   0882 B7            ora a
1368   0883 CA AA 08      jz l95
1369   0886               ; 408 if((uchar)*n>='a' && (uchar)*n<='z')
1370   0886 7E            mov a, m
1371   0887 FE 61         cpi 97
1372   0889 DA 9C 08      jc l97
1373   088C 7E            mov a, m
1374   088D FE 7A         cpi 122
1375   088F CA 95 08      jz l98
1376   0892 D2 9C 08      jnc l97
1377   0895             l98:
1378   0895               ; 409 *n = *n-('a'-'A');Арифметика 9/3
1379   0895 2A 36 2B      lhld getFiles_n
1380   0898 7E            mov a, m
1381   0899 D6 20         sui 32
1382   089B 77            mov m, a
1383   089C             l97:
1384   089C             l96:
1385   089C 21 38 2B      lxi h, getFiles_i
1386   089F 35            dcr m
1387   08A0 2A 36 2B      lhld getFiles_n
1388   08A3 23            inx h
1389   08A4 22 36 2B      shld getFiles_n
1390   08A7 C3 7F 08      jmp l94
1391   08AA             l95:
1392   08AA             l93:
1393   08AA 2A 39 2B      lhld getFiles_j
1394   08AD 2B            dcx h
1395   08AE 22 39 2B      shld getFiles_j
1396   08B1 2A 32 2B      lhld getFiles_f
1397   08B4 11 14 00      lxi d, 20
1398   08B7 19            dad d
1399   08B8 22 32 2B      shld getFiles_f
1400   08BB C3 61 08      jmp l91
1401   08BE             l92:
1402   08BE               ; 412 if(panelA.cnt > 1)Сложение с константой -2
1403   08BE 2A 21 28      lhld (panelA)+(262)
1404   08C1 2B            dcx h
1405   08C2 2B            dcx h
1406   08C3 CA C9 08      jz l100
1407   08C6 D2 E2 08      jnc l99
1408   08C9             l100:
1409   08C9               ; 413 sort(st, ((FileInfo*)panelA.files1) + (panelA.cnt-1));
1410   08C9 2A 34 2B      lhld getFiles_st
1411   08CC 22 A0 2A      shld sort_1
1412   08CF               ; Сложение с константой -1
1413   08CF 2A 21 28      lhld (panelA)+(262)
1414   08D2 2B            dcx h
1415   08D3               ; Умножение HL на 20
1416   08D3 54            mov d, h
1417   08D4 5D            mov e, l
1418   08D5 29            dad h
1419   08D6 29            dad h
1420   08D7 19            dad d
1421   08D8 29            dad h
1422   08D9 29            dad h
1423   08DA               ; Сложение
1424   08DA EB            xchg
1425   08DB 2A 1B 27      lhld panelA
1426   08DE 19            dad d
1427   08DF CD CB 05      call sort
1428   08E2             l99:
1429   08E2 C9            ret
1430   08E3               ; --- selectFile -----------------------------------------------------------------
1431   08E3             selectFile:
1432   08E3 C5            push b
1433   08E4 22 4F 2B      shld selectFile_1
1434   08E7               ; 421 for(l=0, f=panelA.files1; l<panelA.cnt; ++l, ++f) {
1435   08E7 01 00 00      lxi b, 0
1436   08EA 2A 1B 27      lhld panelA
1437   08ED 22 51 2B      shld selectFile_f
1438   08F0             l101:
1439   08F0 2A 21 28      lhld (panelA)+(262)
1440   08F3 50            mov d, b
1441   08F4 59            mov e, c
1442   08F5 CD 00 21      call op_cmp16
1443   08F8 DA 5C 09      jc l102
1444   08FB CA 5C 09      jz l102
1445   08FE               ; 422 if(0==memcmp(f->fname, sfile, 11)) {
1446   08FE 2A 51 2B      lhld selectFile_f
1447   0901 22 98 2D      shld memcmp_1
1448   0904 2A 4F 2B      lhld selectFile_1
1449   0907 22 9A 2D      shld memcmp_2
1450   090A 21 0B 00      lxi h, 11
1451   090D CD 16 22      call memcmp
1452   0910 B7            ora a
1453   0911 C2 4E 09      jnz l104
1454   0914               ; 424 if(l>=2*ROWS_CNT) {Сложение с BC
1455   0914 21 D4 FF      lxi h, 65492
1456   0917 09            dad b
1457   0918 D2 39 09      jnc l105
1458   091B               ; 425 panelA.offset = l-ROWS_CNT-(l%ROWS_CNT);Сложение с BC
1459   091B 21 EA FF      lxi h, 65514
1460   091E 09            dad b
1461   091F 11 16 00      lxi d, 22
1462   0922 E5            push h
1463   0923 60            mov h, b
1464   0924 69            mov l, c
1465   0925 CD DB 22      call op_mod16
1466   0928               ; 16 битная арифметическая операция с константой
1467   0928 EB            xchg
1468   0929 E1            pop h
1469   092A 7D            mov a, l
1470   092B 93            sub e
1471   092C 6F            mov l, a
1472   092D 7C            mov a, h
1473   092E 9A            sbb d
1474   092F 67            mov h, a
1475   0930 22 1F 28      shld (panelA)+(260)
1476   0933               ; 426 l-=panelA.offset;Арифметическая операция с BC&
1477   0933 79            mov a, c
1478   0934 95            sub l
1479   0935 4F            mov c, a
1480   0936 7C            mov a, h
1481   0937 9C            sbb h
1482   0938 47            mov b, a
1483   0939             l105:
1484   0939               ; 429 panelA.cursorX = l/ROWS_CNT;
1485   0939 11 16 00      lxi d, 22
1486   093C 60            mov h, b
1487   093D 69            mov l, c
1488   093E CD 3B 22      call op_div16
1489   0941 7D            mov a, l
1490   0942 32 1D 28      sta (panelA)+(258)
1491   0945               ; 430 panelA.cursorY = op_div16_mod;
1492   0945 3A 9E 2D      lda op_div16_mod
1493   0948 32 1E 28      sta (panelA)+(259)
1494   094B               ; 431 break;
1495   094B C3 5C 09      jmp l102
1496   094E             l104:
1497   094E             l103:
1498   094E 03            inx b
1499   094F 2A 51 2B      lhld selectFile_f
1500   0952 11 14 00      lxi d, 20
1501   0955 19            dad d
1502   0956 22 51 2B      shld selectFile_f
1503   0959 C3 F0 08      jmp l101
1504   095C             l102:
1505   095C C1            pop b
1506   095D C9            ret
1507   095E               ; --- reloadFiles -----------------------------------------------------------------
1508   095E             reloadFiles:
1509   095E 22 53 2B      shld reloadFiles_1
1510   0961               ; 441 drawPanelTitle(1);   
1511   0961 3E 01         mvi a, 1
1512   0963 CD 9E 1C      call drawPanelTitle
1513   0966               ; 442 drawCmdLineWithPath();
1514   0966 CD A1 1E      call drawCmdLineWithPath
1515   0969               ; 445 getFiles();
1516   0969 CD BA 07      call getFiles
1517   096C               ; 448 drawPanelTitle(1);   
1518   096C 3E 01         mvi a, 1
1519   096E CD 9E 1C      call drawPanelTitle
1520   0971               ; 449 drawCmdLineWithPath();
1521   0971 CD A1 1E      call drawCmdLineWithPath
1522   0974               ; 452 if(sfile) {convertToConfition
1523   0974 2A 53 2B      lhld reloadFiles_1
1524   0977 7D            mov a, l
1525   0978 B4            ora h
1526   0979 CA 7F 09      jz l106
1527   097C               ; 453 selectFile(sfile);
1528   097C CD E3 08      call selectFile
1529   097F             l106:
1530   097F               ; 457 drawFilesCount();
1531   097F CD CD 01      call drawFilesCount
1532   0982               ; 458 drawFiles();
1533   0982 CD 03 00      call drawFiles
1534   0985               ; 459 showFileCursorAndDrawFileInfo();
1535   0985 CD C7 01      call showFileCursorAndDrawFileInfo
1536   0988               ; 462 drawCmdLine(); 
1537   0988 C3 D5 1F      jmp drawCmdLine
1538   098B             absolutePath:
1539   098B 22 55 2B      shld absolutePath_1
1540   098E               ; 472 if(str[0] == '/') {Сложение с константой 0
1541   098E 7E            mov a, m
1542   098F FE 2F         cpi 47
1543   0991 C2 A1 09      jnz l107
1544   0994               ; 473 strcpy(str, str+1);
1545   0994 22 B1 2D      shld strcpy_1
1546   0997               ; Сложение с константой 1
1547   0997 2A 55 2B      lhld absolutePath_1
1548   099A 23            inx h
1549   099B CD E2 22      call strcpy
1550   099E               ; 474 return 1;
1551   099E 3E 01         mvi a, 1
1552   09A0 C9            ret
1553   09A1             l107:
1554   09A1               ; 478 l = strlen(panelA.path1);
1555   09A1 21 1D 27      lxi h, (panelA)+(2)
1556   09A4 CD 07 22      call strlen
1557   09A7 22 57 2B      shld absolutePath_l
1558   09AA               ; 481 if(l != 0) l++;Сложение с константой 0
1559   09AA 7D            mov a, l
1560   09AB B4            ora h
1561   09AC CA B6 09      jz l108
1562   09AF               ; 481 l++;
1563   09AF 54            mov d, h
1564   09B0 5D            mov e, l
1565   09B1 23            inx h
1566   09B2 22 57 2B      shld absolutePath_l
1567   09B5 EB            xchg
1568   09B6             l108:
1569   09B6               ; 484 if(strlen(str) + l >= 255) return 0;
1570   09B6 2A 55 2B      lhld absolutePath_1
1571   09B9 CD 07 22      call strlen
1572   09BC               ; Сложение
1573   09BC EB            xchg
1574   09BD 2A 57 2B      lhld absolutePath_l
1575   09C0 19            dad d
1576   09C1               ; Сложение
1577   09C1 11 01 FF      lxi d, 65281
1578   09C4 19            dad d
1579   09C5 D2 CA 09      jnc l109
1580   09C8               ; 484 return 0;
1581   09C8 AF            xra a
1582   09C9 C9            ret
1583   09CA             l109:
1584   09CA               ; 487 memcpy_back(str+l, str, strlen(str)+1);Сложение
1585   09CA 2A 55 2B      lhld absolutePath_1
1586   09CD EB            xchg
1587   09CE 2A 57 2B      lhld absolutePath_l
1588   09D1 19            dad d
1589   09D2 22 B5 2D      shld memcpy_back_1
1590   09D5 2A 55 2B      lhld absolutePath_1
1591   09D8 22 B7 2D      shld memcpy_back_2
1592   09DB 2A 55 2B      lhld absolutePath_1
1593   09DE CD 07 22      call strlen
1594   09E1               ; Сложение с константой 1
1595   09E1 23            inx h
1596   09E2 CD F3 22      call memcpy_back
1597   09E5               ; 488 memcpy(str, panelA.path1, l);
1598   09E5 2A 55 2B      lhld absolutePath_1
1599   09E8 22 A5 2D      shld memcpy_1
1600   09EB 21 1D 27      lxi h, (panelA)+(2)
1601   09EE 22 A7 2D      shld memcpy_2
1602   09F1 2A 57 2B      lhld absolutePath_l
1603   09F4 CD 90 22      call memcpy
1604   09F7               ; 491 if(l != 0) str[l-1] = '/';Сложение с константой 0
1605   09F7 2A 57 2B      lhld absolutePath_l
1606   09FA 7D            mov a, l
1607   09FB B4            ora h
1608   09FC CA 07 0A      jz l110
1609   09FF               ; 491 str[l-1] = '/';Сложение с константой -1
1610   09FF 2B            dcx h
1611   0A00               ; Сложение
1612   0A00 EB            xchg
1613   0A01 2A 55 2B      lhld absolutePath_1
1614   0A04 19            dad d
1615   0A05 36 2F         mvi m, 47
1616   0A07             l110:
1617   0A07               ; 493 return 1;
1618   0A07 3E 01         mvi a, 1
1619   0A09 C9            ret
1620   0A0A               ; --- getName -----------------------------------------------------------------
1621   0A0A             getName:
1622   0A0A 22 59 2B      shld getName_1
1623   0A0D               ; 500 for(p = name; *p; p++)
1624   0A0D 22 5B 2B      shld getName_p
1625   0A10             l111:
1626   0A10               ; convertToConfition
1627   0A10 2A 5B 2B      lhld getName_p
1628   0A13 AF            xra a
1629   0A14 B6            ora m
1630   0A15 CA 2F 0A      jz l112
1631   0A18               ; 501 if(*p == '/')
1632   0A18 7E            mov a, m
1633   0A19 FE 2F         cpi 47
1634   0A1B C2 22 0A      jnz l114
1635   0A1E               ; 502 name = p+1;Сложение с константой 1
1636   0A1E 23            inx h
1637   0A1F 22 59 2B      shld getName_1
1638   0A22             l114:
1639   0A22             l113:
1640   0A22 2A 5B 2B      lhld getName_p
1641   0A25 54            mov d, h
1642   0A26 5D            mov e, l
1643   0A27 23            inx h
1644   0A28 22 5B 2B      shld getName_p
1645   0A2B EB            xchg
1646   0A2C C3 10 0A      jmp l111
1647   0A2F             l112:
1648   0A2F               ; 503 return name;
1649   0A2F 2A 59 2B      lhld getName_1
1650   0A32 C9            ret
1651   0A33               ; --- dropPathInt -----------------------------------------------------------------
1652   0A33             dropPathInt:
1653   0A33 22 5F 2B      shld dropPathInt_2
1654   0A36               ; 513 p = getname(src);
1655   0A36 2A 5D 2B      lhld dropPathInt_1
1656   0A39 CD 0A 0A      call getName
1657   0A3C 22 61 2B      shld dropPathInt_p
1658   0A3F               ; 516 if(preparedName) packName(preparedName, p);convertToConfition
1659   0A3F 2A 5F 2B      lhld dropPathInt_2
1660   0A42 7D            mov a, l
1661   0A43 B4            ora h
1662   0A44 CA 50 0A      jz l115
1663   0A47               ; 516 packName(preparedName, p);
1664   0A47 22 2D 2B      shld packName_1
1665   0A4A 2A 61 2B      lhld dropPathInt_p
1666   0A4D CD 59 07      call packName
1667   0A50             l115:
1668   0A50               ; 519 if(p != src) --p;
1669   0A50 2A 61 2B      lhld dropPathInt_p
1670   0A53 EB            xchg
1671   0A54 2A 5D 2B      lhld dropPathInt_1
1672   0A57 CD 00 21      call op_cmp16
1673   0A5A CA 64 0A      jz l116
1674   0A5D               ; 519 --p;
1675   0A5D 2A 61 2B      lhld dropPathInt_p
1676   0A60 2B            dcx h
1677   0A61 22 61 2B      shld dropPathInt_p
1678   0A64             l116:
1679   0A64               ; 520 *p = 0;
1680   0A64 2A 61 2B      lhld dropPathInt_p
1681   0A67 36 00         mvi m, 0
1682   0A69 C9            ret
1683   0A6A               ; --- dropPath -----------------------------------------------------------------
1684   0A6A             dropPath:
1685   0A6A 21 1D 27      lxi h, (panelA)+(2)
1686   0A6D 22 5D 2B      shld dropPathInt_1
1687   0A70 21 63 2B      lxi h, dropPath_buf
1688   0A73 CD 33 0A      call dropPathInt
1689   0A76               ; 529 reloadFiles(buf);
1690   0A76 21 63 2B      lxi h, dropPath_buf
1691   0A79 C3 5E 09      jmp reloadFiles
1692   0A7C             cursor_left:
1693   0A7C 3A 1D 28      lda (panelA)+(258)
1694   0A7F B7            ora a
1695   0A80 CA 8A 0A      jz l117
1696   0A83               ; 537 --panelA.cursorX; 
1697   0A83 21 1D 28      lxi h, (panelA)+(258)
1698   0A86 35            dcr m
1699   0A87 C3 C7 0A      jmp l118
1700   0A8A             l117:
1701   0A8A               ; 539 if(panelA.offset) { convertToConfition
1702   0A8A 2A 1F 28      lhld (panelA)+(260)
1703   0A8D 7D            mov a, l
1704   0A8E B4            ora h
1705   0A8F CA BC 0A      jz l119
1706   0A92               ; 540 if(ROWS_CNT > panelA.offset) { Сложение
1707   0A92 11 EA FF      lxi d, 65514
1708   0A95 19            dad d
1709   0A96 DA A8 0A      jc l120
1710   0A99 CA A8 0A      jz l120
1711   0A9C               ; 541 panelA.offset = 0; 
1712   0A9C 21 00 00      lxi h, 0
1713   0A9F 22 1F 28      shld (panelA)+(260)
1714   0AA2               ; 542 drawFiles();
1715   0AA2 CD 03 00      call drawFiles
1716   0AA5 C3 B9 0A      jmp l121
1717   0AA8             l120:
1718   0AA8               ; 544 panelA.offset -= ROWS_CNT; 16 битная арифметическая операция с константой
1719   0AA8 2A 1F 28      lhld (panelA)+(260)
1720   0AAB 7D            mov a, l
1721   0AAC D6 16         sui 22
1722   0AAE 6F            mov l, a
1723   0AAF 7C            mov a, h
1724   0AB0 DE 00         sbi 0
1725   0AB2 67            mov h, a
1726   0AB3 22 1F 28      shld (panelA)+(260)
1727   0AB6               ; 545 drawFiles();
1728   0AB6 CD 03 00      call drawFiles
1729   0AB9             l121:
1730   0AB9 C3 C7 0A      jmp l122
1731   0ABC             l119:
1732   0ABC               ; 548 if(panelA.cursorY) {convertToConfition
1733   0ABC 3A 1E 28      lda (panelA)+(259)
1734   0ABF B7            ora a
1735   0AC0 CA C7 0A      jz l123
1736   0AC3               ; 549 panelA.cursorY = 0; 
1737   0AC3 AF            xra a
1738   0AC4 32 1E 28      sta (panelA)+(259)
1739   0AC7             l123:
1740   0AC7             l122:
1741   0AC7             l118:
1742   0AC7               ; 552 showFileCursorAndDrawFileInfo();
1743   0AC7 C3 C7 01      jmp showFileCursorAndDrawFileInfo
1744   0ACA             cursor_right:
1745   0ACA 2A 1F 28      lhld (panelA)+(260)
1746   0ACD EB            xchg
1747   0ACE 2A 1E 28      lhld (panelA)+(259)
1748   0AD1 26 00         mvi h, 0
1749   0AD3 19            dad d
1750   0AD4 E5            push h
1751   0AD5 16 16         mvi d, 22
1752   0AD7 3A 1D 28      lda (panelA)+(258)
1753   0ADA CD EC 20      call op_mul
1754   0ADD               ; Сложение
1755   0ADD D1            pop d
1756   0ADE 19            dad d
1757   0ADF 22 6E 2B      shld cursor_right_w
1758   0AE2               ; 563 if(w + ROWS_CNT >= panelA.cnt) { //! перепутаны > и >=Сложение
1759   0AE2 11 16 00      lxi d, 22
1760   0AE5 19            dad d
1761   0AE6 EB            xchg
1762   0AE7 2A 21 28      lhld (panelA)+(262)
1763   0AEA CD 00 21      call op_cmp16
1764   0AED CA F3 0A      jz l125
1765   0AF0 D2 4D 0B      jnc l124
1766   0AF3             l125:
1767   0AF3               ; 565 if(w + 1 >= panelA.cnt) { Сложение с константой 1
1768   0AF3 2A 6E 2B      lhld cursor_right_w
1769   0AF6 23            inx h
1770   0AF7 EB            xchg
1771   0AF8 2A 21 28      lhld (panelA)+(262)
1772   0AFB CD 00 21      call op_cmp16
1773   0AFE CA 04 0B      jz l127
1774   0B01 D2 05 0B      jnc l126
1775   0B04             l127:
1776   0B04               ; 566 return;
1777   0B04 C9            ret
1778   0B05             l126:
1779   0B05               ; 569 panelA.cursorY = panelA.cnt - (panelA.offset + panelA.cursorX*ROWS_CNT + 1);
1780   0B05 16 16         mvi d, 22
1781   0B07 3A 1D 28      lda (panelA)+(258)
1782   0B0A CD EC 20      call op_mul
1783   0B0D               ; Сложение
1784   0B0D EB            xchg
1785   0B0E 2A 1F 28      lhld (panelA)+(260)
1786   0B11 19            dad d
1787   0B12               ; Сложение с константой 1
1788   0B12 23            inx h
1789   0B13               ; 16 битная арифметическая операция с константой
1790   0B13 EB            xchg
1791   0B14 2A 21 28      lhld (panelA)+(262)
1792   0B17 7D            mov a, l
1793   0B18 93            sub e
1794   0B19 6F            mov l, a
1795   0B1A 7C            mov a, h
1796   0B1B 9A            sbb d
1797   0B1C 67            mov h, a
1798   0B1D 7D            mov a, l
1799   0B1E 32 1E 28      sta (panelA)+(259)
1800   0B21               ; 571 if(panelA.cursorY>ROWS_CNT-1) {
1801   0B21 FE 15         cpi 21
1802   0B23 DA 4A 0B      jc l128
1803   0B26 CA 4A 0B      jz l128
1804   0B29               ; 572 panelA.cursorY -= ROWS_CNT;Арифметика 4/3
1805   0B29 D6 16         sui 22
1806   0B2B 32 1E 28      sta (panelA)+(259)
1807   0B2E               ; 573 if(panelA.cursorX == 1) { 
1808   0B2E 3A 1D 28      lda (panelA)+(258)
1809   0B31 FE 01         cpi 1
1810   0B33 C2 46 0B      jnz l129
1811   0B36               ; 574 panelA.offset += ROWS_CNT;Сложение
1812   0B36 11 16 00      lxi d, 22
1813   0B39 2A 1F 28      lhld (panelA)+(260)
1814   0B3C 19            dad d
1815   0B3D 22 1F 28      shld (panelA)+(260)
1816   0B40               ; 575 drawFiles();
1817   0B40 CD 03 00      call drawFiles
1818   0B43 C3 4A 0B      jmp l130
1819   0B46             l129:
1820   0B46               ; 577 panelA.cursorX++; 
1821   0B46 21 1D 28      lxi h, (panelA)+(258)
1822   0B49 34            inr m
1823   0B4A             l130:
1824   0B4A             l128:
1825   0B4A C3 69 0B      jmp l131
1826   0B4D             l124:
1827   0B4D               ; 581 if(panelA.cursorX == 1) { 
1828   0B4D 3A 1D 28      lda (panelA)+(258)
1829   0B50 FE 01         cpi 1
1830   0B52 C2 65 0B      jnz l132
1831   0B55               ; 582 panelA.offset += ROWS_CNT;Сложение
1832   0B55 11 16 00      lxi d, 22
1833   0B58 2A 1F 28      lhld (panelA)+(260)
1834   0B5B 19            dad d
1835   0B5C 22 1F 28      shld (panelA)+(260)
1836   0B5F               ; 583 drawFiles();
1837   0B5F CD 03 00      call drawFiles
1838   0B62 C3 69 0B      jmp l133
1839   0B65             l132:
1840   0B65               ; 585 panelA.cursorX++;
1841   0B65 21 1D 28      lxi h, (panelA)+(258)
1842   0B68 34            inr m
1843   0B69             l133:
1844   0B69             l131:
1845   0B69               ; 588 showFileCursorAndDrawFileInfo();
1846   0B69 C3 C7 01      jmp showFileCursorAndDrawFileInfo
1847   0B6C             cursor_up:
1848   0B6C 3A 1E 28      lda (panelA)+(259)
1849   0B6F B7            ora a
1850   0B70 CA 7A 0B      jz l134
1851   0B73               ; 596 --panelA.cursorY;
1852   0B73 21 1E 28      lxi h, (panelA)+(259)
1853   0B76 35            dcr m
1854   0B77 C3 9C 0B      jmp l135
1855   0B7A             l134:
1856   0B7A               ; 598 if(panelA.cursorX) { convertToConfition
1857   0B7A 3A 1D 28      lda (panelA)+(258)
1858   0B7D B7            ora a
1859   0B7E CA 8D 0B      jz l136
1860   0B81               ; 599 --panelA.cursorX;
1861   0B81 21 1D 28      lxi h, (panelA)+(258)
1862   0B84 35            dcr m
1863   0B85               ; 600 panelA.cursorY = ROWS_CNT-1; 
1864   0B85 3E 15         mvi a, 21
1865   0B87 32 1E 28      sta (panelA)+(259)
1866   0B8A C3 9C 0B      jmp l137
1867   0B8D             l136:
1868   0B8D               ; 602 if(panelA.offset) {convertToConfition
1869   0B8D 2A 1F 28      lhld (panelA)+(260)
1870   0B90 7D            mov a, l
1871   0B91 B4            ora h
1872   0B92 CA 9C 0B      jz l138
1873   0B95               ; 603 --panelA.offset; 
1874   0B95 2B            dcx h
1875   0B96 22 1F 28      shld (panelA)+(260)
1876   0B99               ; 604 drawFiles();
1877   0B99 CD 03 00      call drawFiles
1878   0B9C             l138:
1879   0B9C             l137:
1880   0B9C             l135:
1881   0B9C               ; 607 showFileCursorAndDrawFileInfo();
1882   0B9C C3 C7 01      jmp showFileCursorAndDrawFileInfo
1883   0B9F             cursor_down:
1884   0B9F 16 16         mvi d, 22
1885   0BA1 3A 1D 28      lda (panelA)+(258)
1886   0BA4 CD EC 20      call op_mul
1887   0BA7               ; Сложение
1888   0BA7 EB            xchg
1889   0BA8 2A 1F 28      lhld (panelA)+(260)
1890   0BAB 19            dad d
1891   0BAC               ; Сложение
1892   0BAC EB            xchg
1893   0BAD 2A 1E 28      lhld (panelA)+(259)
1894   0BB0 26 00         mvi h, 0
1895   0BB2 19            dad d
1896   0BB3               ; Сложение с константой 1
1897   0BB3 23            inx h
1898   0BB4 EB            xchg
1899   0BB5 2A 21 28      lhld (panelA)+(262)
1900   0BB8 CD 00 21      call op_cmp16
1901   0BBB CA C1 0B      jz l140
1902   0BBE D2 C2 0B      jnc l139
1903   0BC1             l140:
1904   0BC1               ; 614 return;
1905   0BC1 C9            ret
1906   0BC2             l139:
1907   0BC2               ; 616 if(panelA.cursorY < ROWS_CNT-1) {
1908   0BC2 3A 1E 28      lda (panelA)+(259)
1909   0BC5 FE 15         cpi 21
1910   0BC7 D2 D1 0B      jnc l141
1911   0BCA               ; 617 ++panelA.cursorY;
1912   0BCA 21 1E 28      lxi h, (panelA)+(259)
1913   0BCD 34            inr m
1914   0BCE C3 ED 0B      jmp l142
1915   0BD1             l141:
1916   0BD1               ; 619 if(panelA.cursorX == 0) {
1917   0BD1 3A 1D 28      lda (panelA)+(258)
1918   0BD4 B7            ora a
1919   0BD5 C2 E3 0B      jnz l143
1920   0BD8               ; 620 panelA.cursorY = 0;
1921   0BD8 AF            xra a
1922   0BD9 32 1E 28      sta (panelA)+(259)
1923   0BDC               ; 621 ++panelA.cursorX; 
1924   0BDC 21 1D 28      lxi h, (panelA)+(258)
1925   0BDF 34            inr m
1926   0BE0 C3 ED 0B      jmp l144
1927   0BE3             l143:
1928   0BE3               ; 623 ++panelA.offset; 
1929   0BE3 2A 1F 28      lhld (panelA)+(260)
1930   0BE6 23            inx h
1931   0BE7 22 1F 28      shld (panelA)+(260)
1932   0BEA               ; 624 drawFiles();
1933   0BEA CD 03 00      call drawFiles
1934   0BED             l144:
1935   0BED             l142:
1936   0BED               ; 627 showFileCursorAndDrawFileInfo();
1937   0BED C3 C7 01      jmp showFileCursorAndDrawFileInfo
1938   0BF0             cmd_tab:
1939   0BF0 CD 4C 1A      call hideFileCursor
1940   0BF3               ; 635 drawPanelTitle(0);
1941   0BF3 AF            xra a
1942   0BF4 CD 9E 1C      call drawPanelTitle
1943   0BF7               ; 636 swapPanels();
1944   0BF7 CD 0F 00      call swapPanels
1945   0BFA               ; 637 showFileCursor();
1946   0BFA CD 64 1A      call showFileCursor
1947   0BFD               ; 638 drawPanelTitle(1);
1948   0BFD 3E 01         mvi a, 1
1949   0BFF CD 9E 1C      call drawPanelTitle
1950   0C02               ; 639 drawCmdLineWithPath();
1951   0C02 C3 A1 1E      jmp drawCmdLineWithPath
1952   0C05             runCmdLine:
1953   0C05 C5            push b
1954   0C06               ; 649 if(!absolutePath(cmdline)) return;
1955   0C06 21 2F 29      lxi h, cmdline
1956   0C09 CD 8B 09      call absolutePath
1957   0C0C               ; convertToConfition
1958   0C0C B7            ora a
1959   0C0D C2 12 0C      jnz l145
1960   0C10               ; 649 return;
1961   0C10 C1            pop b
1962   0C11 C9            ret
1963   0C12             l145:
1964   0C12               ; 652 cmdLine2 = strchr(cmdLine, ' ');
1965   0C12 21 2F 29      lxi h, cmdline
1966   0C15 22 BB 2D      shld strchr_1
1967   0C18 3E 20         mvi a, 32
1968   0C1A CD 19 23      call strchr
1969   0C1D 44            mov b, h
1970   0C1E 4D            mov c, l
1971   0C1F               ; 653 if(cmdLine2) {convertToConfition
1972   0C1F 7D            mov a, l
1973   0C20 B4            ora h
1974   0C21 CA 2A 0C      jz l146
1975   0C24               ; 654 *cmdLine2 = 0;
1976   0C24 AF            xra a
1977   0C25 02            stax b
1978   0C26               ; 655 ++cmdLine2;
1979   0C26 03            inx b
1980   0C27 C3 2D 0C      jmp l147
1981   0C2A             l146:
1982   0C2A               ; 657 cmdLine2 = "";
1983   0C2A 01 31 2E      lxi b, string13
1984   0C2D             l147:
1985   0C2D               ; 661 run(cmdLine, cmdLine2);
1986   0C2D 21 2F 29      lxi h, cmdline
1987   0C30 22 73 2B      shld run_1
1988   0C33 60            mov h, b
1989   0C34 69            mov l, c
1990   0C35 CD 48 0D      call run
1991   0C38 C1            pop b
1992   0C39 C9            ret
1993   0C3A               ; --- dupFiles -----------------------------------------------------------------
1994   0C3A             dupFiles:
1995   0C3A 32 70 2B      sta dupFiles_1
1996   0C3D               ; 667 swapPanels();
1997   0C3D CD 0F 00      call swapPanels
1998   0C40               ; 669 if(0==strcmp(panelA.path1, panelB.path1)) {
1999   0C40 21 1D 27      lxi h, (panelA)+(2)
2000   0C43 22 BE 2D      shld strcmp_1
2001   0C46 21 27 28      lxi h, (panelB)+(2)
2002   0C49 CD 2B 23      call strcmp
2003   0C4C B7            ora a
2004   0C4D C2 71 0C      jnz l148
2005   0C50               ; 670 memcpy(panelA.files1, panelB.files1, maxFiles*sizeof(FileInfo));
2006   0C50 2A 1B 27      lhld panelA
2007   0C53 22 A5 2D      shld memcpy_1
2008   0C56 2A 25 28      lhld panelB
2009   0C59 22 A7 2D      shld memcpy_2
2010   0C5C 2A 2F 2A      lhld maxFiles
2011   0C5F 11 14 00      lxi d, 20
2012   0C62 CD 6F 23      call op_mul16
2013   0C65 CD 90 22      call memcpy
2014   0C68               ; 671 panelA.cnt = panelB.cnt;    
2015   0C68 2A 2B 29      lhld (panelB)+(262)
2016   0C6B 22 21 28      shld (panelA)+(262)
2017   0C6E C3 78 0C      jmp l149
2018   0C71             l148:
2019   0C71               ; 674 if(reload) getFiles();convertToConfition
2020   0C71 3A 70 2B      lda dupFiles_1
2021   0C74 B7            ora a
2022   0C75 C4 BA 07      cnz getFiles
2023   0C78             l149:
2024   0C78               ; 677 getSel();
2025   0C78 CD 24 00      call getSel
2026   0C7B               ; 678 swapPanels();
2027   0C7B C3 0F 00      jmp swapPanels
2028   0C7E             loadState:
2029   0C7E 2A D7 2D      lhld fs_selfName
2030   0C81 CD 07 22      call strlen
2031   0C84 22 71 2B      shld loadState_i
2032   0C87               ; 686 if(i < 4) return;Сложение
2033   0C87 11 FB FF      lxi d, 65531
2034   0C8A 19            dad d
2035   0C8B DA 8F 0C      jc l151
2036   0C8E               ; 686 return;
2037   0C8E C9            ret
2038   0C8F             l151:
2039   0C8F               ; 687 i -= 3;16 битная арифметическая операция с константой
2040   0C8F 2A 71 2B      lhld loadState_i
2041   0C92 7D            mov a, l
2042   0C93 D6 03         sui 3
2043   0C95 6F            mov l, a
2044   0C96 7C            mov a, h
2045   0C97 DE 00         sbi 0
2046   0C99 67            mov h, a
2047   0C9A 22 71 2B      shld loadState_i
2048   0C9D               ; 688 if(0 != strcmp(fs_selfName + i, ".RK")) return;Сложение
2049   0C9D 2A D7 2D      lhld fs_selfName
2050   0CA0 EB            xchg
2051   0CA1 2A 71 2B      lhld loadState_i
2052   0CA4 19            dad d
2053   0CA5 22 BE 2D      shld strcmp_1
2054   0CA8 21 FA 2E      lxi h, string14
2055   0CAB CD 2B 23      call strcmp
2056   0CAE B7            ora a
2057   0CAF CA B3 0C      jz l152
2058   0CB2               ; 688 return;
2059   0CB2 C9            ret
2060   0CB3             l152:
2061   0CB3               ; 689 strcpy(fs_selfName + i, ".IN");Сложение
2062   0CB3 2A D7 2D      lhld fs_selfName
2063   0CB6 EB            xchg
2064   0CB7 2A 71 2B      lhld loadState_i
2065   0CBA 19            dad d
2066   0CBB 22 B1 2D      shld strcpy_1
2067   0CBE 21 F6 2E      lxi h, string15
2068   0CC1 CD E2 22      call strcpy
2069   0CC4               ; 691 if(fs_open(fs_selfName)) return;
2070   0CC4 2A D7 2D      lhld fs_selfName
2071   0CC7 CD 93 23      call fs_open
2072   0CCA               ; convertToConfition
2073   0CCA B7            ora a
2074   0CCB CA CF 0C      jz l153
2075   0CCE               ; 691 return;
2076   0CCE C9            ret
2077   0CCF             l153:
2078   0CCF               ; 692 fs_read(cmdline, 12);
2079   0CCF 21 2F 29      lxi h, cmdline
2080   0CD2 22 C6 2D      shld fs_read_1
2081   0CD5 21 0C 00      lxi h, 12
2082   0CD8 CD 9E 23      call fs_read
2083   0CDB               ; 693 if(cmdline[11]) swapPanels();convertToConfition
2084   0CDB 3A 3A 29      lda (cmdline)+(11)
2085   0CDE B7            ora a
2086   0CDF C4 0F 00      cnz swapPanels
2087   0CE2 21 1D 27      lxi h, (panelA)+(2)
2088   0CE5 22 C6 2D      shld fs_read_1
2089   0CE8 21 00 01      lxi h, 256
2090   0CEB CD 9E 23      call fs_read
2091   0CEE               ; 694 panelA.path1[255] = 0;
2092   0CEE AF            xra a
2093   0CEF 32 1C 28      sta ((panelA)+(2))+(255)
2094   0CF2               ; 695 fs_read(panelB.path1, 256); panelB.path1[255] = 0;
2095   0CF2 21 27 28      lxi h, (panelB)+(2)
2096   0CF5 22 C6 2D      shld fs_read_1
2097   0CF8 21 00 01      lxi h, 256
2098   0CFB CD 9E 23      call fs_read
2099   0CFE               ; 695 panelB.path1[255] = 0;
2100   0CFE AF            xra a
2101   0CFF 32 26 29      sta ((panelB)+(2))+(255)
2102   0D02 C9            ret
2103   0D03               ; --- saveState -----------------------------------------------------------------
2104   0D03             saveState:
2105   0D03 2A D7 2D      lhld fs_selfName
2106   0D06 CD B1 23      call fs_create
2107   0D09               ; convertToConfition
2108   0D09 B7            ora a
2109   0D0A CA 18 0D      jz l155
2110   0D0D 2A D7 2D      lhld fs_selfName
2111   0D10 CD 93 23      call fs_open
2112   0D13               ; convertToConfition
2113   0D13 B7            ora a
2114   0D14 CA 18 0D      jz l155
2115   0D17               ; 701 return;
2116   0D17 C9            ret
2117   0D18             l155:
2118   0D18               ; 702 fs_write(getSel()->fname, 11);
2119   0D18 CD 24 00      call getSel
2120   0D1B 22 CC 2D      shld fs_write_1
2121   0D1E 21 0B 00      lxi h, 11
2122   0D21 CD BD 23      call fs_write
2123   0D24               ; 703 fs_write(&activePanel, 1);
2124   0D24 21 29 2D      lxi h, activePanel
2125   0D27 22 CC 2D      shld fs_write_1
2126   0D2A 21 01 00      lxi h, 1
2127   0D2D CD BD 23      call fs_write
2128   0D30               ; 704 fs_write(panelA.path1, 256);
2129   0D30 21 1D 27      lxi h, (panelA)+(2)
2130   0D33 22 CC 2D      shld fs_write_1
2131   0D36 21 00 01      lxi h, 256
2132   0D39 CD BD 23      call fs_write
2133   0D3C               ; 705 fs_write(panelB.path1, 256);
2134   0D3C 21 27 28      lxi h, (panelB)+(2)
2135   0D3F 22 CC 2D      shld fs_write_1
2136   0D42 21 00 01      lxi h, 256
2137   0D45 C3 BD 23      jmp fs_write
2138   0D48             run:
2139   0D48 22 75 2B      shld run_2
2140   0D4B               ; 713 saveState();
2141   0D4B CD 03 0D      call saveState
2142   0D4E               ; 714 drawError(prog, fs_exec(prog, cmdLine)); 
2143   0D4E 2A 73 2B      lhld run_1
2144   0D51 22 68 2A      shld drawError_1
2145   0D54 2A 73 2B      lhld run_1
2146   0D57 22 D0 2D      shld fs_exec_1
2147   0D5A 2A 75 2B      lhld run_2
2148   0D5D CD D0 23      call fs_exec
2149   0D60 CD 9B 02      call drawError
2150   0D63               ; 715 drawScreen(); // Там происходит очистка ком строки
2151   0D63 C3 46 02      jmp drawScreen
2152   0D66             cmd_editview:
2153   0D66 22 77 2B      shld cmd_editview_1
2154   0D69               ; 721 getSel();<f>
2155   0D69 CD 24 00      call getSel
2156   0D6C 22 79 2B      shld cmd_editview_f
2157   0D6F               ; 722 if(f->fattrib & 0x10) return;Сложение
2158   0D6F 11 0B 00      lxi d, 11
2159   0D72 19            dad d
2160   0D73 7E            mov a, m
2161   0D74 E6 10         ani 16
2162   0D76               ; convertToConfition
2163   0D76 CA 7A 0D      jz l156
2164   0D79               ; 722 return;
2165   0D79 C9            ret
2166   0D7A             l156:
2167   0D7A               ; 723 unpackName(cmdLine, f->fname);
2168   0D7A 21 2F 29      lxi h, cmdline
2169   0D7D 22 75 2A      shld unpackName_1
2170   0D80 2A 79 2B      lhld cmd_editview_f
2171   0D83 CD 34 04      call unpackName
2172   0D86               ; 724 if(!absolutePath(cmdLine)) {
2173   0D86 21 2F 29      lxi h, cmdline
2174   0D89 CD 8B 09      call absolutePath
2175   0D8C               ; convertToConfition
2176   0D8C B7            ora a
2177   0D8D C2 93 0D      jnz l157
2178   0D90               ; 725 drawScreen();
2179   0D90 C3 46 02      jmp drawScreen
2180   0D93               ; 726 return;
2181   0D93             l157:
2182   0D93               ; 728 run(app, cmdLine);
2183   0D93 2A 77 2B      lhld cmd_editview_1
2184   0D96 22 73 2B      shld run_1
2185   0D99 21 2F 29      lxi h, cmdline
2186   0D9C C3 48 0D      jmp run
2187   0D9F             cmd_enter:
2188   0D9F 3A 2F 29      lda (cmdline)+(0)
2189   0DA2 B7            ora a
2190   0DA3 CA A9 0D      jz l158
2191   0DA6               ; 740 runCmdLine(); // Функция восстановит экран
2192   0DA6 C3 05 0C      jmp runCmdLine
2193   0DA9               ; 741 return;
2194   0DA9             l158:
2195   0DA9               ; 745 f = getSelNoBack();
2196   0DA9 CD 76 00      call getSelNoBack
2197   0DAC 22 7E 2B      shld cmd_enter_f
2198   0DAF               ; 748 if(f == 0) { Сложение с константой 0
2199   0DAF 7D            mov a, l
2200   0DB0 B4            ora h
2201   0DB1 C2 B7 0D      jnz l159
2202   0DB4               ; 749 dropPath(); 
2203   0DB4 C3 6A 0A      jmp dropPath
2204   0DB7               ; 750 return; 
2205   0DB7             l159:
2206   0DB7               ; 754 unpackName(cmdLine, f->fname);
2207   0DB7 21 2F 29      lxi h, cmdline
2208   0DBA 22 75 2A      shld unpackName_1
2209   0DBD 2A 7E 2B      lhld cmd_enter_f
2210   0DC0 CD 34 04      call unpackName
2211   0DC3               ; 755 if(!absolutePath(cmdLine)) { drawScreen(); return; }
2212   0DC3 21 2F 29      lxi h, cmdline
2213   0DC6 CD 8B 09      call absolutePath
2214   0DC9               ; convertToConfition
2215   0DC9 B7            ora a
2216   0DCA C2 D0 0D      jnz l160
2217   0DCD               ; 755 drawScreen(); return; }
2218   0DCD C3 46 02      jmp drawScreen
2219   0DD0               ; 755 return; }
2220   0DD0             l160:
2221   0DD0               ; 758 if((f->fattrib & 0x10) != 0) { Сложение
2222   0DD0 2A 7E 2B      lhld cmd_enter_f
2223   0DD3 11 0B 00      lxi d, 11
2224   0DD6 19            dad d
2225   0DD7 7E            mov a, m
2226   0DD8 E6 10         ani 16
2227   0DDA CA F3 0D      jz l161
2228   0DDD               ; 759 strcpy(panelA.path1, cmdline);
2229   0DDD 21 1D 27      lxi h, (panelA)+(2)
2230   0DE0 22 B1 2D      shld strcpy_1
2231   0DE3 21 2F 29      lxi h, cmdline
2232   0DE6 CD E2 22      call strcpy
2233   0DE9               ; 760 cmdline[0] = 0;
2234   0DE9 AF            xra a
2235   0DEA 32 2F 29      sta (cmdline)+(0)
2236   0DED               ; 761 reloadFiles(0);
2237   0DED 21 00 00      lxi h, 0
2238   0DF0 C3 5E 09      jmp reloadFiles
2239   0DF3               ; 762 return;
2240   0DF3             l161:
2241   0DF3               ; 766 run(cmdline, "");
2242   0DF3 21 2F 29      lxi h, cmdline
2243   0DF6 22 73 2B      shld run_1
2244   0DF9 21 31 2E      lxi h, string13
2245   0DFC C3 48 0D      jmp run
2246   0DFF             cmd_esc:
2247   0DFF 3A 2F 29      lda (cmdline)+(0)
2248   0E02 B7            ora a
2249   0E03 CA 0D 0E      jz l162
2250   0E06               ; 773 cmdline[0] = 0;
2251   0E06 AF            xra a
2252   0E07 32 2F 29      sta (cmdline)+(0)
2253   0E0A               ; 774 drawCmdLine();
2254   0E0A C3 D5 1F      jmp drawCmdLine
2255   0E0D               ; 775 return;
2256   0E0D             l162:
2257   0E0D               ; 777 dropPath();
2258   0E0D C3 6A 0A      jmp dropPath
2259   0E10             cmd_inverseOne:
2260   0E10 CD 76 00      call getSelNoBack
2261   0E13 22 84 2B      shld cmd_inverseOne_f
2262   0E16               ; 784 if(!f) return;convertToConfition
2263   0E16 7D            mov a, l
2264   0E17 B4            ora h
2265   0E18 C2 1C 0E      jnz l163
2266   0E1B               ; 784 return;
2267   0E1B C9            ret
2268   0E1C             l163:
2269   0E1C               ; 785 f->fattrib ^= 0x80;Сложение
2270   0E1C 11 0B 00      lxi d, 11
2271   0E1F 19            dad d
2272   0E20 7E            mov a, m
2273   0E21 EE 80         xri 128
2274   0E23 77            mov m, a
2275   0E24               ; 786 drawFile(panelA.cursorX, panelA.cursorY, f);
2276   0E24 3A 1D 28      lda (panelA)+(258)
2277   0E27 32 56 2D      sta drawFile_1
2278   0E2A 3A 1E 28      lda (panelA)+(259)
2279   0E2D 32 57 2D      sta drawFile_2
2280   0E30 2A 84 2B      lhld cmd_inverseOne_f
2281   0E33 CD 41 1E      call drawFile
2282   0E36               ; 787 cursor_down();
2283   0E36 C3 9F 0B      jmp cursor_down
2284   0E39             cmd_inverseAll:
2285   0E39 2A 1B 27      lhld panelA
2286   0E3C 22 86 2B      shld cmd_inverseAll_f
2287   0E3F 2A 21 28      lhld (panelA)+(262)
2288   0E42 22 88 2B      shld cmd_inverseAll_i
2289   0E45             l164:
2290   0E45               ; convertToConfition
2291   0E45 2A 88 2B      lhld cmd_inverseAll_i
2292   0E48 7D            mov a, l
2293   0E49 B4            ora h
2294   0E4A CA 87 0E      jz l165
2295   0E4D               ; 796 if(f->fattrib & 0x10) {Сложение
2296   0E4D 2A 86 2B      lhld cmd_inverseAll_f
2297   0E50 11 0B 00      lxi d, 11
2298   0E53 19            dad d
2299   0E54 7E            mov a, m
2300   0E55 E6 10         ani 16
2301   0E57               ; convertToConfition
2302   0E57 CA 68 0E      jz l167
2303   0E5A               ; 797 f->fattrib &= 0x7F;Сложение
2304   0E5A 2A 86 2B      lhld cmd_inverseAll_f
2305   0E5D 11 0B 00      lxi d, 11
2306   0E60 19            dad d
2307   0E61 7E            mov a, m
2308   0E62 E6 7F         ani 127
2309   0E64 77            mov m, a
2310   0E65 C3 73 0E      jmp l168
2311   0E68             l167:
2312   0E68               ; 799 f->fattrib ^= 0x80;Сложение
2313   0E68 2A 86 2B      lhld cmd_inverseAll_f
2314   0E6B 11 0B 00      lxi d, 11
2315   0E6E 19            dad d
2316   0E6F 7E            mov a, m
2317   0E70 EE 80         xri 128
2318   0E72 77            mov m, a
2319   0E73             l168:
2320   0E73             l166:
2321   0E73 2A 88 2B      lhld cmd_inverseAll_i
2322   0E76 2B            dcx h
2323   0E77 22 88 2B      shld cmd_inverseAll_i
2324   0E7A 2A 86 2B      lhld cmd_inverseAll_f
2325   0E7D 11 14 00      lxi d, 20
2326   0E80 19            dad d
2327   0E81 22 86 2B      shld cmd_inverseAll_f
2328   0E84 C3 45 0E      jmp l164
2329   0E87             l165:
2330   0E87               ; 802 drawFiles();
2331   0E87 CD 03 00      call drawFiles
2332   0E8A               ; 803 showFileCursor();
2333   0E8A C3 64 1A      jmp showFileCursor
2334   0E8D             main:
2335   0E8D C5            push b
2336   0E8E               ; 813 fs_init();
2337   0E8E CD DE 23      call fs_init
2338   0E91               ; 816 drawInit();  
2339   0E91 CD FA 19      call drawInit
2340   0E94               ; 819 panelA.files1 = ((FileInfo*)START_FILE_BUFFER);
2341   0E94 21 00 34      lxi h, 13312
2342   0E97 22 1B 27      shld panelA
2343   0E9A               ; 820 panelB.files1 = ((FileInfo*)START_FILE_BUFFER)+maxFiles;
2344   0E9A 2A 2F 2A      lhld maxFiles
2345   0E9D               ; Умножение HL на 20
2346   0E9D 54            mov d, h
2347   0E9E 5D            mov e, l
2348   0E9F 29            dad h
2349   0EA0 29            dad h
2350   0EA1 19            dad d
2351   0EA2 29            dad h
2352   0EA3 29            dad h
2353   0EA4               ; Сложение
2354   0EA4 11 00 34      lxi d, 13312
2355   0EA7 19            dad d
2356   0EA8 22 25 28      shld panelB
2357   0EAB               ; 823 panelA.path1[0] = 0;
2358   0EAB AF            xra a
2359   0EAC 32 1D 27      sta ((panelA)+(2))+(0)
2360   0EAF               ; 824 panelB.path1[0] = 0;
2361   0EAF 32 27 28      sta ((panelB)+(2))+(0)
2362   0EB2               ; 827 cmdline[0] = 0;
2363   0EB2 32 2F 29      sta (cmdline)+(0)
2364   0EB5               ; 830 drawScreenInt();
2365   0EB5 CD 52 1C      call drawScreenInt
2366   0EB8               ; 831 drawCmdLineWithPath();
2367   0EB8 CD A1 1E      call drawCmdLineWithPath
2368   0EBB               ; 834 loadState();
2369   0EBB CD 7E 0C      call loadState
2370   0EBE               ; 837 getFiles();
2371   0EBE CD BA 07      call getFiles
2372   0EC1               ; 840 dupFiles(1);
2373   0EC1 3E 01         mvi a, 1
2374   0EC3 CD 3A 0C      call dupFiles
2375   0EC6               ; 843 selectFile(cmdline);
2376   0EC6 21 2F 29      lxi h, cmdline
2377   0EC9 CD E3 08      call selectFile
2378   0ECC               ; 844 cmdline[0] = 0;
2379   0ECC AF            xra a
2380   0ECD 32 2F 29      sta (cmdline)+(0)
2381   0ED0               ; 847 drawPanelTitle(1);
2382   0ED0 3C            inr a
2383   0ED1 CD 9E 1C      call drawPanelTitle
2384   0ED4               ; 848 swapPanels();
2385   0ED4 CD 0F 00      call swapPanels
2386   0ED7               ; 849 drawPanelTitle(0);
2387   0ED7 AF            xra a
2388   0ED8 CD 9E 1C      call drawPanelTitle
2389   0EDB               ; 850 swapPanels();
2390   0EDB CD 0F 00      call swapPanels
2391   0EDE               ; 851 drawFiles2();
2392   0EDE CD 2E 02      call drawFiles2
2393   0EE1               ; 852 drawCmdLineWithPath();
2394   0EE1 CD A1 1E      call drawCmdLineWithPath
2395   0EE4               ; 855 while(1) {
2396   0EE4             l169:
2397   0EE4               ; 856 c = getch1();
2398   0EE4 CD C2 20      call getch1
2399   0EE7 47            mov b, a
2400   0EE8               ; 858 switch(c) {
2401   0EE8 78            mov a, b
2402   0EE9 B7            ora a
2403   0EEA CA 22 0F      jz l172
2404   0EED FE 01         cpi 1
2405   0EEF CA 28 0F      jz l173
2406   0EF2 FE 02         cpi 2
2407   0EF4 CA 2F 0F      jz l174
2408   0EF7 FE 03         cpi 3
2409   0EF9 CA 38 0F      jz l175
2410   0EFC FE 0D         cpi 13
2411   0EFE CA 41 0F      jz l176
2412   0F01 FE 1B         cpi 27
2413   0F03 CA 47 0F      jz l177
2414   0F06 FE 4F         cpi 79
2415   0F08 CA 4D 0F      jz l178
2416   0F0B FE 50         cpi 80
2417   0F0D CA 53 0F      jz l179
2418   0F10 FE 41         cpi 65
2419   0F12 CA 59 0F      jz l180
2420   0F15 FE 51         cpi 81
2421   0F17 CA 5F 0F      jz l181
2422   0F1A FE 09         cpi 9
2423   0F1C CA 65 0F      jz l182
2424   0F1F C3 6B 0F      jmp l171
2425   0F22             l172:
2426   0F22               ; 859 cmd_freespace();         continue;
2427   0F22 CD 25 17      call cmd_freespace
2428   0F25               ; 859 continue;
2429   0F25 C3 E4 0E      jmp l169
2430   0F28             l173:
2431   0F28               ; 860 cmd_new(0);              continue;
2432   0F28 AF            xra a
2433   0F29 CD 86 16      call cmd_new
2434   0F2C               ; 860 continue;
2435   0F2C C3 E4 0E      jmp l169
2436   0F2F             l174:
2437   0F2F               ; 861 cmd_editview(viewerApp); continue;
2438   0F2F 21 0E 27      lxi h, viewerApp
2439   0F32 CD 66 0D      call cmd_editview
2440   0F35               ; 861 continue;
2441   0F35 C3 E4 0E      jmp l169
2442   0F38             l175:
2443   0F38               ; 862 cmd_editview(editorApp); continue;
2444   0F38 21 01 27      lxi h, editorApp
2445   0F3B CD 66 0D      call cmd_editview
2446   0F3E               ; 862 continue;
2447   0F3E C3 E4 0E      jmp l169
2448   0F41             l176:
2449   0F41               ; 863 cmd_enter();             continue;
2450   0F41 CD 9F 0D      call cmd_enter
2451   0F44               ; 863 continue;
2452   0F44 C3 E4 0E      jmp l169
2453   0F47             l177:
2454   0F47               ; 864 cmd_esc();               continue;
2455   0F47 CD FF 0D      call cmd_esc
2456   0F4A               ; 864 continue;
2457   0F4A C3 E4 0E      jmp l169
2458   0F4D             l178:
2459   0F4D               ; 865 cursor_left();           continue;
2460   0F4D CD 7C 0A      call cursor_left
2461   0F50               ; 865 continue;
2462   0F50 C3 E4 0E      jmp l169
2463   0F53             l179:
2464   0F53               ; 866 cursor_right();          continue; 
2465   0F53 CD CA 0A      call cursor_right
2466   0F56               ; 866 continue; 
2467   0F56 C3 E4 0E      jmp l169
2468   0F59             l180:
2469   0F59               ; 867 cursor_down();           continue;
2470   0F59 CD 9F 0B      call cursor_down
2471   0F5C               ; 867 continue;
2472   0F5C C3 E4 0E      jmp l169
2473   0F5F             l181:
2474   0F5F               ; 868 cursor_up();             continue; 
2475   0F5F CD 6C 0B      call cursor_up
2476   0F62               ; 868 continue; 
2477   0F62 C3 E4 0E      jmp l169
2478   0F65             l182:
2479   0F65               ; 869 cmd_tab();               continue; 
2480   0F65 CD F0 0B      call cmd_tab
2481   0F68               ; 869 continue; 
2482   0F68 C3 E4 0E      jmp l169
2483   0F6B             l171:
2484   0F6B               ; 873 if(!cmdLine[0]) {convertToConfition
2485   0F6B 3A 2F 29      lda (cmdline)+(0)
2486   0F6E B7            ora a
2487   0F6F C2 30 10      jnz l183
2488   0F72               ; 874 switch(c) {
2489   0F72 78            mov a, b
2490   0F73 FE 31         cpi 49
2491   0F75 CA BC 0F      jz l185
2492   0F78 FE 32         cpi 50
2493   0F7A CA C2 0F      jz l186
2494   0F7D FE 33         cpi 51
2495   0F7F CA C9 0F      jz l187
2496   0F82 FE 34         cpi 52
2497   0F84 CA D2 0F      jz l188
2498   0F87 FE 25         cpi 37
2499   0F89 CA DB 0F      jz l189
2500   0F8C FE 35         cpi 53
2501   0F8E CA E6 0F      jz l190
2502   0F91 FE 26         cpi 38
2503   0F93 CA F2 0F      jz l191
2504   0F96 FE 36         cpi 54
2505   0F98 CA FD 0F      jz l192
2506   0F9B FE 37         cpi 55
2507   0F9D CA 07 10      jz l193
2508   0FA0 FE 38         cpi 56
2509   0FA2 CA 0F 10      jz l194
2510   0FA5 FE 1F         cpi 31
2511   0FA7 CA 15 10      jz l195
2512   0FAA FE 3A         cpi 58
2513   0FAC CA 1B 10      jz l196
2514   0FAF FE 3B         cpi 59
2515   0FB1 CA 21 10      jz l197
2516   0FB4 FE 2D         cpi 45
2517   0FB6 CA 29 10      jz l198
2518   0FB9 C3 30 10      jmp l184
2519   0FBC             l185:
2520   0FBC               ; 875 cmd_freespace();         continue;
2521   0FBC CD 25 17      call cmd_freespace
2522   0FBF               ; 875 continue;
2523   0FBF C3 E4 0E      jmp l169
2524   0FC2             l186:
2525   0FC2               ; 876 cmd_new(0);              continue;
2526   0FC2 AF            xra a
2527   0FC3 CD 86 16      call cmd_new
2528   0FC6               ; 876 continue;
2529   0FC6 C3 E4 0E      jmp l169
2530   0FC9             l187:
2531   0FC9               ; 877 cmd_editview(viewerApp); continue;
2532   0FC9 21 0E 27      lxi h, viewerApp
2533   0FCC CD 66 0D      call cmd_editview
2534   0FCF               ; 877 continue;
2535   0FCF C3 E4 0E      jmp l169
2536   0FD2             l188:
2537   0FD2               ; 878 cmd_editview(editorApp); continue;
2538   0FD2 21 01 27      lxi h, editorApp
2539   0FD5 CD 66 0D      call cmd_editview
2540   0FD8               ; 878 continue;
2541   0FD8 C3 E4 0E      jmp l169
2542   0FDB             l189:
2543   0FDB               ; 879 cmd_copymove(1, 1);      continue;
2544   0FDB 3E 01         mvi a, 1
2545   0FDD 32 EF 2C      sta cmd_copymove_1
2546   0FE0 CD D6 15      call cmd_copymove
2547   0FE3               ; 879 continue;
2548   0FE3 C3 E4 0E      jmp l169
2549   0FE6             l190:
2550   0FE6               ; 880 cmd_copymove(1, 0);      continue;
2551   0FE6 3E 01         mvi a, 1
2552   0FE8 32 EF 2C      sta cmd_copymove_1
2553   0FEB AF            xra a
2554   0FEC CD D6 15      call cmd_copymove
2555   0FEF               ; 880 continue;
2556   0FEF C3 E4 0E      jmp l169
2557   0FF2             l191:
2558   0FF2               ; 881 cmd_copymove(0, 1);      continue;
2559   0FF2 AF            xra a
2560   0FF3 32 EF 2C      sta cmd_copymove_1
2561   0FF6 3C            inr a
2562   0FF7 CD D6 15      call cmd_copymove
2563   0FFA               ; 881 continue;
2564   0FFA C3 E4 0E      jmp l169
2565   0FFD             l192:
2566   0FFD               ; 882 cmd_copymove(0, 0);      continue;
2567   0FFD AF            xra a
2568   0FFE 32 EF 2C      sta cmd_copymove_1
2569   1001 CD D6 15      call cmd_copymove
2570   1004               ; 882 continue;
2571   1004 C3 E4 0E      jmp l169
2572   1007             l193:
2573   1007               ; 883 cmd_new(1);              continue;
2574   1007 3E 01         mvi a, 1
2575   1009 CD 86 16      call cmd_new
2576   100C               ; 883 continue;
2577   100C C3 E4 0E      jmp l169
2578   100F             l194:
2579   100F               ; 884 cmd_delete();            continue;
2580   100F CD 77 18      call cmd_delete
2581   1012               ; 884 continue;
2582   1012 C3 E4 0E      jmp l169
2583   1015             l195:
2584   1015               ; 885 cmd_inverseOne();        continue;
2585   1015 CD 10 0E      call cmd_inverseOne
2586   1018               ; 885 continue;
2587   1018 C3 E4 0E      jmp l169
2588   101B             l196:
2589   101B               ; 886 cmd_inverseAll();        continue; // *
2590   101B CD 39 0E      call cmd_inverseAll
2591   101E               ; 886 continue; // *
2592   101E C3 E4 0E      jmp l169
2593   1021             l197:
2594   1021               ; 887 cmd_sel(1);              continue; // +
2595   1021 3E 01         mvi a, 1
2596   1023 CD 5F 19      call cmd_sel
2597   1026               ; 887 continue; // +
2598   1026 C3 E4 0E      jmp l169
2599   1029             l198:
2600   1029               ; 888 cmd_sel(0);              continue;
2601   1029 AF            xra a
2602   102A CD 5F 19      call cmd_sel
2603   102D               ; 888 continue;
2604   102D C3 E4 0E      jmp l169
2605   1030             l184:
2606   1030             l183:
2607   1030               ; 893 processInput(c);
2608   1030 78            mov a, b
2609   1031 CD 53 02      call processInput
2610   1034               ; 894 drawCmdLine();
2611   1034 CD D5 1F      call drawCmdLine
2612   1037 C3 E4 0E      jmp l169
2613   103A             l170:
2614   103A C1            pop b
2615   103B C9            ret
2616   103C               ; --- cmd_copyFile -----------------------------------------------------------------
2617   103C             cmd_copyFile:
2618   103C 22 8C 2B      shld cmd_copyFile_2
2619   103F               ; 10 0;<progress_i>
2620   103F AF            xra a
2621   1040 32 9F 2B      sta cmd_copyFile_progress_i
2622   1043               ; 15 if(e = fs_open(from)) return e;
2623   1043 2A 8A 2B      lhld cmd_copyFile_1
2624   1046 CD 93 23      call fs_open
2625   1049 32 9E 2B      sta cmd_copyFile_e
2626   104C               ; convertToConfition
2627   104C B7            ora a
2628   104D CA 54 10      jz l199
2629   1050               ; 15 return e;
2630   1050 3A 9E 2B      lda cmd_copyFile_e
2631   1053 C9            ret
2632   1054             l199:
2633   1054               ; 16 if(e = fs_getsize()) return e;
2634   1054 CD EF 23      call fs_getsize
2635   1057 32 9E 2B      sta cmd_copyFile_e
2636   105A               ; convertToConfition
2637   105A B7            ora a
2638   105B CA 62 10      jz l200
2639   105E               ; 16 return e;
2640   105E 3A 9E 2B      lda cmd_copyFile_e
2641   1061 C9            ret
2642   1062             l200:
2643   1062               ; 19 set32(&progress_step, &fs_result);
2644   1062 21 A8 2B      lxi h, cmd_copyFile_progress_step
2645   1065 22 DF 2D      shld set32_1
2646   1068 21 DA 2D      lxi h, fs_low
2647   106B CD FE 23      call set32
2648   106E               ; 20 div32_16(&progress_step, 40);
2649   106E 21 A8 2B      lxi h, cmd_copyFile_progress_step
2650   1071 22 E3 2D      shld div32_16_1
2651   1074 21 28 00      lxi h, 40
2652   1077 CD 14 24      call div32_16
2653   107A               ; 23 drawWindow(" kopirowanie ");
2654   107A 21 3F 2E      lxi h, string16
2655   107D CD 10 1F      call drawWindow
2656   1080               ; 24 drawWindowText(0, 0, "iz:");
2657   1080 AF            xra a
2658   1081 32 64 2D      sta drawWindowText_1
2659   1084 32 65 2D      sta drawWindowText_2
2660   1087 21 E0 2F      lxi h, string17
2661   108A CD 8C 1F      call drawWindowText
2662   108D               ; 25 drawWindowText(4, 0, from);
2663   108D 3E 04         mvi a, 4
2664   108F 32 64 2D      sta drawWindowText_1
2665   1092 AF            xra a
2666   1093 32 65 2D      sta drawWindowText_2
2667   1096 2A 8A 2B      lhld cmd_copyFile_1
2668   1099 CD 8C 1F      call drawWindowText
2669   109C               ; 26 drawWindowText(0, 1, "w:");
2670   109C AF            xra a
2671   109D 32 64 2D      sta drawWindowText_1
2672   10A0 3C            inr a
2673   10A1 32 65 2D      sta drawWindowText_2
2674   10A4 21 09 31      lxi h, string18
2675   10A7 CD 8C 1F      call drawWindowText
2676   10AA               ; 27 drawWindowText(4, 1, to);
2677   10AA 3E 04         mvi a, 4
2678   10AC 32 64 2D      sta drawWindowText_1
2679   10AF 3E 01         mvi a, 1
2680   10B1 32 65 2D      sta drawWindowText_2
2681   10B4 2A 8C 2B      lhld cmd_copyFile_2
2682   10B7 CD 8C 1F      call drawWindowText
2683   10BA               ; 28 drawWindowText(0, 2, "skopirowano           /           bajt");
2684   10BA AF            xra a
2685   10BB 32 64 2D      sta drawWindowText_1
2686   10BE 3E 02         mvi a, 2
2687   10C0 32 65 2D      sta drawWindowText_2
2688   10C3 21 D7 30      lxi h, string19
2689   10C6 CD 8C 1F      call drawWindowText
2690   10C9               ; 29 drawWindowProgress(0, 3, 40, '#');
2691   10C9 AF            xra a
2692   10CA 32 68 2D      sta drawWindowProgress_1
2693   10CD 3E 03         mvi a, 3
2694   10CF 32 69 2D      sta drawWindowProgress_2
2695   10D2 3E 28         mvi a, 40
2696   10D4 32 6A 2D      sta drawWindowProgress_3
2697   10D7 3E 23         mvi a, 35
2698   10D9 CD AE 1F      call drawWindowProgress
2699   10DC               ; 30 i2s32(buf, &fs_result, 10, ' ');
2700   10DC 21 8E 2B      lxi h, cmd_copyFile_buf
2701   10DF 22 80 2D      shld i2s32_1
2702   10E2 21 DA 2D      lxi h, fs_low
2703   10E5 22 82 2D      shld i2s32_2
2704   10E8 21 0A 00      lxi h, 10
2705   10EB 22 84 2D      shld i2s32_3
2706   10EE 3E 20         mvi a, 32
2707   10F0 CD 06 21      call i2s32
2708   10F3               ; 31 drawWindowText(23, 2, buf);
2709   10F3 3E 17         mvi a, 23
2710   10F5 32 64 2D      sta drawWindowText_1
2711   10F8 3E 02         mvi a, 2
2712   10FA 32 65 2D      sta drawWindowText_2
2713   10FD 21 8E 2B      lxi h, cmd_copyFile_buf
2714   1100 CD 8C 1F      call drawWindowText
2715   1103               ; 32 drawEscButton();
2716   1103 CD 7C 1F      call drawEscButton
2717   1106               ; 35 if(e = fs_swap()) return e;
2718   1106 CD 72 24      call fs_swap
2719   1109 32 9E 2B      sta cmd_copyFile_e
2720   110C               ; convertToConfition
2721   110C B7            ora a
2722   110D CA 14 11      jz l201
2723   1110               ; 35 return e;
2724   1110 3A 9E 2B      lda cmd_copyFile_e
2725   1113 C9            ret
2726   1114             l201:
2727   1114               ; 36 if(e = fs_create(to)) return e;
2728   1114 2A 8C 2B      lhld cmd_copyFile_2
2729   1117 CD B1 23      call fs_create
2730   111A 32 9E 2B      sta cmd_copyFile_e
2731   111D               ; convertToConfition
2732   111D B7            ora a
2733   111E CA 25 11      jz l202
2734   1121               ; 36 return e;
2735   1121 3A 9E 2B      lda cmd_copyFile_e
2736   1124 C9            ret
2737   1125             l202:
2738   1125               ; 1 ((ushort*)a)[0] = (b&0xFFFF); ((ushort*)a)[1] = (b>>16); }
2739   1125 21 00 00      lxi h, 0
2740   1128 22 A0 2B      shld (cmd_copyFile_progress)+(0)
2741   112B               ; 1 ((ushort*)a)[1] = (b>>16); }
2742   112B 22 A2 2B      shld (cmd_copyFile_progress)+(2)
2743   112E               ; 1 ((ushort*)a)[0] = (b&0xFFFF); ((ushort*)a)[1] = (b>>16); }
2744   112E 22 A4 2B      shld (cmd_copyFile_progress_x)+(0)
2745   1131               ; 1 ((ushort*)a)[1] = (b>>16); }
2746   1131 22 A6 2B      shld (cmd_copyFile_progress_x)+(2)
2747   1134               ; 41 for(;;) {
2748   1134             l203:
2749   1134               ; 43 i2s32(buf, &progress, 10, ' ');
2750   1134 21 8E 2B      lxi h, cmd_copyFile_buf
2751   1137 22 80 2D      shld i2s32_1
2752   113A 21 A0 2B      lxi h, cmd_copyFile_progress
2753   113D 22 82 2D      shld i2s32_2
2754   1140 21 0A 00      lxi h, 10
2755   1143 22 84 2D      shld i2s32_3
2756   1146 3E 20         mvi a, 32
2757   1148 CD 06 21      call i2s32
2758   114B               ; 44 drawWindowText(12, 2, buf); 
2759   114B 3E 0C         mvi a, 12
2760   114D 32 64 2D      sta drawWindowText_1
2761   1150 3E 02         mvi a, 2
2762   1152 32 65 2D      sta drawWindowText_2
2763   1155 21 8E 2B      lxi h, cmd_copyFile_buf
2764   1158 CD 8C 1F      call drawWindowText
2765   115B               ; 47 if(e = fs_swap()) return e;
2766   115B CD 72 24      call fs_swap
2767   115E 32 9E 2B      sta cmd_copyFile_e
2768   1161               ; convertToConfition
2769   1161 B7            ora a
2770   1162 CA 69 11      jz l206
2771   1165               ; 47 return e;
2772   1165 3A 9E 2B      lda cmd_copyFile_e
2773   1168 C9            ret
2774   1169             l206:
2775   1169               ; 48 if(e = fs_read(panelB.files1, 1024) ) return e;
2776   1169 2A 25 28      lhld panelB
2777   116C 22 C6 2D      shld fs_read_1
2778   116F 21 00 04      lxi h, 1024
2779   1172 CD 9E 23      call fs_read
2780   1175 32 9E 2B      sta cmd_copyFile_e
2781   1178               ; convertToConfition
2782   1178 B7            ora a
2783   1179 CA 80 11      jz l207
2784   117C               ; 48 return e;
2785   117C 3A 9E 2B      lda cmd_copyFile_e
2786   117F C9            ret
2787   1180             l207:
2788   1180               ; 49 if(fs_low == 0) return 0; // ‘ ЇҐаҐ§ Јаг§Є®© д ©«®ўСложение с константой 0
2789   1180 2A DA 2D      lhld fs_low
2790   1183 7D            mov a, l
2791   1184 B4            ora h
2792   1185 C2 8A 11      jnz l208
2793   1188               ; 49 return 0; // ‘ ЇҐаҐ§ Јаг§Є®© д ©«®ў
2794   1188 AF            xra a
2795   1189 C9            ret
2796   118A             l208:
2797   118A               ; 50 if(e = fs_swap()) return e;
2798   118A CD 72 24      call fs_swap
2799   118D 32 9E 2B      sta cmd_copyFile_e
2800   1190               ; convertToConfition
2801   1190 B7            ora a
2802   1191 CA 98 11      jz l209
2803   1194               ; 50 return e;
2804   1194 3A 9E 2B      lda cmd_copyFile_e
2805   1197 C9            ret
2806   1198             l209:
2807   1198               ; 51 if(e = fs_write(panelB.files1, fs_low)) return e;
2808   1198 2A 25 28      lhld panelB
2809   119B 22 CC 2D      shld fs_write_1
2810   119E 2A DA 2D      lhld fs_low
2811   11A1 CD BD 23      call fs_write
2812   11A4 32 9E 2B      sta cmd_copyFile_e
2813   11A7               ; convertToConfition
2814   11A7 B7            ora a
2815   11A8 CA AF 11      jz l210
2816   11AB               ; 51 return e;
2817   11AB 3A 9E 2B      lda cmd_copyFile_e
2818   11AE C9            ret
2819   11AF             l210:
2820   11AF               ; 54 add32_16(&progress, fs_low);
2821   11AF 21 A0 2B      lxi h, cmd_copyFile_progress
2822   11B2 22 E9 2D      shld add32_16_1
2823   11B5 2A DA 2D      lhld fs_low
2824   11B8 CD 7E 24      call add32_16
2825   11BB               ; 57 add32_16(&progress_x, fs_low);
2826   11BB 21 A4 2B      lxi h, cmd_copyFile_progress_x
2827   11BE 22 E9 2D      shld add32_16_1
2828   11C1 2A DA 2D      lhld fs_low
2829   11C4 CD 7E 24      call add32_16
2830   11C7               ; 58 while(progress_i < 40 && cmp32_32(&progress_x, &progress_step) != 1) {
2831   11C7             l211:
2832   11C7 3A 9F 2B      lda cmd_copyFile_progress_i
2833   11CA FE 28         cpi 40
2834   11CC D2 04 12      jnc l212
2835   11CF 21 A4 2B      lxi h, cmd_copyFile_progress_x
2836   11D2 22 ED 2D      shld cmp32_32_1
2837   11D5 21 A8 2B      lxi h, cmd_copyFile_progress_step
2838   11D8 CD 99 24      call cmp32_32
2839   11DB FE 01         cpi 1
2840   11DD CA 04 12      jz l212
2841   11E0               ; 59 sub32_32(&progress_x, &progress_step);
2842   11E0 21 A4 2B      lxi h, cmd_copyFile_progress_x
2843   11E3 22 F1 2D      shld sub32_32_1
2844   11E6 21 A8 2B      lxi h, cmd_copyFile_progress_step
2845   11E9 CD C7 24      call sub32_32
2846   11EC               ; 60 drawWindowText(progress_i, 3, "\x17");
2847   11EC 3A 9F 2B      lda cmd_copyFile_progress_i
2848   11EF 32 64 2D      sta drawWindowText_1
2849   11F2 3E 03         mvi a, 3
2850   11F4 32 65 2D      sta drawWindowText_2
2851   11F7 21 32 2E      lxi h, string20
2852   11FA CD 8C 1F      call drawWindowText
2853   11FD               ; 61 ++progress_i;
2854   11FD 21 9F 2B      lxi h, cmd_copyFile_progress_i
2855   1200 34            inr m
2856   1201 C3 C7 11      jmp l211
2857   1204             l212:
2858   1204               ; 65 if(bioskey1() == KEY_ESC) { e = ERR_USER; break; }
2859   1204 CD C6 20      call bioskey1
2860   1207 FE 1B         cpi 27
2861   1209 C2 14 12      jnz l213
2862   120C               ; 65 e = ERR_USER; break; }
2863   120C 3E 80         mvi a, 128
2864   120E 32 9E 2B      sta cmd_copyFile_e
2865   1211               ; 65 break; }
2866   1211 C3 17 12      jmp l204
2867   1214             l213:
2868   1214             l205:
2869   1214 C3 34 11      jmp l203
2870   1217             l204:
2871   1217               ; 69 fs_delete(to);
2872   1217 2A 8C 2B      lhld cmd_copyFile_2
2873   121A CD E4 24      call fs_delete
2874   121D               ; 70 return e;
2875   121D 3A 9E 2B      lda cmd_copyFile_e
2876   1220 C9            ret
2877   1221               ; --- applyMask1 -----------------------------------------------------------------
2878   1221             applyMask1:
2879   1221 C5            push b
2880   1222 32 B0 2B      sta applyMask1_3
2881   1225               ; 77 for(;;) {
2882   1225             l214:
2883   1225               ; 78 m = *mask;
2884   1225 2A AE 2B      lhld applyMask1_2
2885   1228 46            mov b, m
2886   1229               ; 79 if(m == '*') return;
2887   1229 3E 2A         mvi a, 42
2888   122B B8            cmp b
2889   122C C2 31 12      jnz l217
2890   122F               ; 79 return;
2891   122F C1            pop b
2892   1230 C9            ret
2893   1231             l217:
2894   1231               ; 80 if(m != '?') *dest = m;
2895   1231 3E 3F         mvi a, 63
2896   1233 B8            cmp b
2897   1234 CA 3B 12      jz l218
2898   1237               ; 80 *dest = m;
2899   1237 2A AC 2B      lhld applyMask1_1
2900   123A 70            mov m, b
2901   123B             l218:
2902   123B               ; 81 --i;
2903   123B 21 B0 2B      lxi h, applyMask1_3
2904   123E 35            dcr m
2905   123F               ; 82 if(i==0) return;
2906   123F 3A B0 2B      lda applyMask1_3
2907   1242 B7            ora a
2908   1243 C2 48 12      jnz l219
2909   1246               ; 82 return;
2910   1246 C1            pop b
2911   1247 C9            ret
2912   1248             l219:
2913   1248               ; 83 ++mask, ++dest;
2914   1248 2A AE 2B      lhld applyMask1_2
2915   124B 23            inx h
2916   124C 22 AE 2B      shld applyMask1_2
2917   124F 2A AC 2B      lhld applyMask1_1
2918   1252 23            inx h
2919   1253 22 AC 2B      shld applyMask1_1
2920   1256             l216:
2921   1256 C3 25 12      jmp l214
2922   1259             l215:
2923   1259 C1            pop b
2924   125A C9            ret
2925   125B               ; --- cmd_copyFolder -----------------------------------------------------------------
2926   125B             cmd_copyFolder:
2927   125B 22 B3 2B      shld cmd_copyFolder_2
2928   125E               ; 94 0;<level>
2929   125E AF            xra a
2930   125F 32 B8 2B      sta cmd_copyFolder_level
2931   1262               ; 99 e = fs_mkdir(to); 
2932   1262 CD F0 24      call fs_mkdir
2933   1265 32 B5 2B      sta cmd_copyFolder_e
2934   1268               ; 100 if(e) return e;convertToConfition
2935   1268 B7            ora a
2936   1269 CA 70 12      jz l220
2937   126C               ; 100 return e;
2938   126C 3A B5 2B      lda cmd_copyFolder_e
2939   126F C9            ret
2940   1270             l220:
2941   1270               ; 102 for(i=0;;++i) {
2942   1270 21 00 00      lxi h, 0
2943   1273 22 B6 2B      shld cmd_copyFolder_i
2944   1276             l221:
2945   1276               ; 104 if(i == maxFiles) return ERR_MAX_FILES;
2946   1276 EB            xchg
2947   1277 2A 2F 2A      lhld maxFiles
2948   127A CD 00 21      call op_cmp16
2949   127D C2 83 12      jnz l224
2950   1280               ; 104 return ERR_MAX_FILES;
2951   1280 3E 0A         mvi a, 10
2952   1282 C9            ret
2953   1283             l224:
2954   1283               ; 108 e = fs_findfirst(from, panelB.files1, i+1);
2955   1283 2A B1 2B      lhld cmd_copyFolder_1
2956   1286 22 AB 2D      shld fs_findfirst_1
2957   1289 2A 25 28      lhld panelB
2958   128C 22 AD 2D      shld fs_findfirst_2
2959   128F               ; Сложение с константой 1
2960   128F 2A B6 2B      lhld cmd_copyFolder_i
2961   1292 23            inx h
2962   1293 CD B4 22      call fs_findfirst
2963   1296 32 B5 2B      sta cmd_copyFolder_e
2964   1299               ; 109 if(e != 0 && e != ERR_MAX_FILES) return e; // Њл ўбҐЈ¤  Ўг¤Ґ¬ Ї®«гзЁвм ERR_MAX_FILES
2965   1299 B7            ora a
2966   129A CA A6 12      jz l225
2967   129D 3A B5 2B      lda cmd_copyFolder_e
2968   12A0 FE 0A         cpi 10
2969   12A2 CA A6 12      jz l225
2970   12A5               ; 109 return e; // Њл ўбҐЈ¤  Ўг¤Ґ¬ Ї®«гзЁвм ERR_MAX_FILES
2971   12A5 C9            ret
2972   12A6             l225:
2973   12A6               ; 112 if(i >= fs_low) {
2974   12A6 2A B6 2B      lhld cmd_copyFolder_i
2975   12A9 EB            xchg
2976   12AA 2A DA 2D      lhld fs_low
2977   12AD CD 00 21      call op_cmp16
2978   12B0 CA B6 12      jz l227
2979   12B3 D2 EF 12      jnc l226
2980   12B6             l227:
2981   12B6               ; 114 if(level==0) return 0;
2982   12B6 3A B8 2B      lda cmd_copyFolder_level
2983   12B9 B7            ora a
2984   12BA C2 BF 12      jnz l228
2985   12BD               ; 114 return 0;
2986   12BD AF            xra a
2987   12BE C9            ret
2988   12BF             l228:
2989   12BF               ; 116 dropPathInt(from, 0);
2990   12BF 2A B1 2B      lhld cmd_copyFolder_1
2991   12C2 22 5D 2B      shld dropPathInt_1
2992   12C5 21 00 00      lxi h, 0
2993   12C8 CD 33 0A      call dropPathInt
2994   12CB               ; 117 dropPathInt(to, 0);
2995   12CB 2A B3 2B      lhld cmd_copyFolder_2
2996   12CE 22 5D 2B      shld dropPathInt_1
2997   12D1 21 00 00      lxi h, 0
2998   12D4 CD 33 0A      call dropPathInt
2999   12D7               ; 118 --level;
3000   12D7 21 B8 2B      lxi h, cmd_copyFolder_level
3001   12DA 35            dcr m
3002   12DB               ; 119 i = stack[level];
3003   12DB 2A B8 2B      lhld cmd_copyFolder_level
3004   12DE 26 00         mvi h, 0
3005   12E0               ; Умножение HL на 2
3006   12E0 29            dad h
3007   12E1               ; Сложение
3008   12E1 11 B9 2B      lxi d, cmd_copyFolder_stack
3009   12E4 19            dad d
3010   12E5 5E            mov e, m
3011   12E6 23            inx h
3012   12E7 56            mov d, m
3013   12E8 EB            xchg
3014   12E9 22 B6 2B      shld cmd_copyFolder_i
3015   12EC               ; 120 continue;
3016   12EC C3 A1 13      jmp l223
3017   12EF             l226:
3018   12EF               ; 122 f = panelB.files1 + i;
3019   12EF 2A B6 2B      lhld cmd_copyFolder_i
3020   12F2               ; Умножение HL на 20
3021   12F2 54            mov d, h
3022   12F3 5D            mov e, l
3023   12F4 29            dad h
3024   12F5 29            dad h
3025   12F6 19            dad d
3026   12F7 29            dad h
3027   12F8 29            dad h
3028   12F9               ; Сложение
3029   12F9 EB            xchg
3030   12FA 2A 25 28      lhld panelB
3031   12FD 19            dad d
3032   12FE 22 C9 2B      shld cmd_copyFolder_f
3033   1301               ; 125 if(catPathAndUnpack(from, f->fname)) return ERR_RECV_STRING;
3034   1301 2A B1 2B      lhld cmd_copyFolder_1
3035   1304 22 79 2A      shld catPathAndUnpack_1
3036   1307 2A C9 2B      lhld cmd_copyFolder_f
3037   130A CD 87 04      call catPathAndUnpack
3038   130D               ; convertToConfition
3039   130D B7            ora a
3040   130E CA 14 13      jz l229
3041   1311               ; 125 return ERR_RECV_STRING;
3042   1311 3E 0B         mvi a, 11
3043   1313 C9            ret
3044   1314             l229:
3045   1314               ; 126 if(catPathAndUnpack(to,   f->fname)) return ERR_RECV_STRING;
3046   1314 2A B3 2B      lhld cmd_copyFolder_2
3047   1317 22 79 2A      shld catPathAndUnpack_1
3048   131A 2A C9 2B      lhld cmd_copyFolder_f
3049   131D CD 87 04      call catPathAndUnpack
3050   1320               ; convertToConfition
3051   1320 B7            ora a
3052   1321 CA 27 13      jz l230
3053   1324               ; 126 return ERR_RECV_STRING;
3054   1324 3E 0B         mvi a, 11
3055   1326 C9            ret
3056   1327             l230:
3057   1327               ; 129 if(f->fattrib & 0x10) {Сложение
3058   1327 2A C9 2B      lhld cmd_copyFolder_f
3059   132A 11 0B 00      lxi d, 11
3060   132D 19            dad d
3061   132E 7E            mov a, m
3062   132F E6 10         ani 16
3063   1331               ; convertToConfition
3064   1331 CA 6F 13      jz l231
3065   1334               ; 131 if(level == COPY_STACK-1) return ERR_RECV_STRING;
3066   1334 3A B8 2B      lda cmd_copyFolder_level
3067   1337 FE 07         cpi 7
3068   1339 C2 3E 13      jnz l232
3069   133C               ; 131 return ERR_RECV_STRING;
3070   133C 7B            mov a, e
3071   133D C9            ret
3072   133E             l232:
3073   133E               ; 132 stack[level] = i;
3074   133E 2A B8 2B      lhld cmd_copyFolder_level
3075   1341 62            mov h, d
3076   1342               ; Умножение HL на 2
3077   1342 29            dad h
3078   1343               ; Сложение
3079   1343 11 B9 2B      lxi d, cmd_copyFolder_stack
3080   1346 19            dad d
3081   1347 E5            push h
3082   1348 2A B6 2B      lhld cmd_copyFolder_i
3083   134B D1            pop d
3084   134C EB            xchg
3085   134D 73            mov m, e
3086   134E 23            inx h
3087   134F 72            mov m, d
3088   1350 2B            dcx h
3089   1351               ; 133 level++;
3090   1351 21 B8 2B      lxi h, cmd_copyFolder_level
3091   1354 34            inr m
3092   1355               ; 135 e = fs_mkdir(to); 
3093   1355 2A B3 2B      lhld cmd_copyFolder_2
3094   1358 CD F0 24      call fs_mkdir
3095   135B 32 B5 2B      sta cmd_copyFolder_e
3096   135E               ; 136 if(e) return e;convertToConfition
3097   135E B7            ora a
3098   135F CA 66 13      jz l233
3099   1362               ; 136 return e;
3100   1362 3A B5 2B      lda cmd_copyFolder_e
3101   1365 C9            ret
3102   1366             l233:
3103   1366               ; 138 i = -1;
3104   1366 21 FF FF      lxi h, 65535
3105   1369 22 B6 2B      shld cmd_copyFolder_i
3106   136C               ; 139 continue;
3107   136C C3 A1 13      jmp l223
3108   136F             l231:
3109   136F               ; 143 e = cmd_copyFile(from, to);
3110   136F 2A B1 2B      lhld cmd_copyFolder_1
3111   1372 22 8A 2B      shld cmd_copyFile_1
3112   1375 2A B3 2B      lhld cmd_copyFolder_2
3113   1378 CD 3C 10      call cmd_copyFile
3114   137B 32 B5 2B      sta cmd_copyFolder_e
3115   137E               ; 146 dropPathInt(from, 0);
3116   137E 2A B1 2B      lhld cmd_copyFolder_1
3117   1381 22 5D 2B      shld dropPathInt_1
3118   1384 21 00 00      lxi h, 0
3119   1387 CD 33 0A      call dropPathInt
3120   138A               ; 147 dropPathInt(to, 0);
3121   138A 2A B3 2B      lhld cmd_copyFolder_2
3122   138D 22 5D 2B      shld dropPathInt_1
3123   1390 21 00 00      lxi h, 0
3124   1393 CD 33 0A      call dropPathInt
3125   1396               ; 150 if(e) return e;convertToConfition
3126   1396 3A B5 2B      lda cmd_copyFolder_e
3127   1399 B7            ora a
3128   139A CA A1 13      jz l234
3129   139D               ; 150 return e;
3130   139D 3A B5 2B      lda cmd_copyFolder_e
3131   13A0 C9            ret
3132   13A1             l234:
3133   13A1             l223:
3134   13A1 2A B6 2B      lhld cmd_copyFolder_i
3135   13A4 23            inx h
3136   13A5 22 B6 2B      shld cmd_copyFolder_i
3137   13A8 C3 76 12      jmp l221
3138   13AB             l222:
3139   13AB C9            ret
3140   13AC               ; --- applyMask -----------------------------------------------------------------
3141   13AC             applyMask:
3142   13AC 22 CD 2B      shld applyMask_2
3143   13AF               ; 157 applyMask1(dest, mask, 8);
3144   13AF 2A CB 2B      lhld applyMask_1
3145   13B2 22 AC 2B      shld applyMask1_1
3146   13B5 2A CD 2B      lhld applyMask_2
3147   13B8 22 AE 2B      shld applyMask1_2
3148   13BB 3E 08         mvi a, 8
3149   13BD CD 21 12      call applyMask1
3150   13C0               ; 158 applyMask1(dest+8, mask+8, 3);Сложение
3151   13C0 2A CB 2B      lhld applyMask_1
3152   13C3 11 08 00      lxi d, 8
3153   13C6 19            dad d
3154   13C7 22 AC 2B      shld applyMask1_1
3155   13CA               ; Сложение
3156   13CA 2A CD 2B      lhld applyMask_2
3157   13CD 11 08 00      lxi d, 8
3158   13D0 19            dad d
3159   13D1 22 AE 2B      shld applyMask1_2
3160   13D4 3E 03         mvi a, 3
3161   13D6 C3 21 12      jmp applyMask1
3162   13D9             cmd_copymove1:
3163   13D9 32 D0 2B      sta cmd_copymove1_2
3164   13DC               ; 173 if(shiftPressed) {convertToConfition
3165   13DC B7            ora a
3166   13DD CA FC 13      jz l235
3167   13E0               ; 175 f = getSelNoBack();
3168   13E0 CD 76 00      call getSelNoBack
3169   13E3 22 D4 2B      shld cmd_copymove1_f
3170   13E6               ; 176 if(!f) return 0; // ” ©« ­Ґ ўлЎа ­, ўле®¤Ё¬ ЎҐ§ ®иЁЎЄЁconvertToConfition
3171   13E6 7D            mov a, l
3172   13E7 B4            ora h
3173   13E8 C2 ED 13      jnz l236
3174   13EB               ; 176 return 0; // ” ©« ­Ґ ўлЎа ­, ўле®¤Ё¬ ЎҐ§ ®иЁЎЄЁ
3175   13EB AF            xra a
3176   13EC C9            ret
3177   13ED             l236:
3178   13ED               ; 177 unpackName(cmdLine, f->fname);
3179   13ED 21 2F 29      lxi h, cmdline
3180   13F0 22 75 2A      shld unpackName_1
3181   13F3 2A D4 2B      lhld cmd_copymove1_f
3182   13F6 CD 34 04      call unpackName
3183   13F9 C3 36 14      jmp l237
3184   13FC             l235:
3185   13FC               ; 180 i = strlen(panelB.path1);
3186   13FC 21 27 28      lxi h, (panelB)+(2)
3187   13FF CD 07 22      call strlen
3188   1402 22 ED 2C      shld cmd_copymove1_i
3189   1405               ; 181 if(i >= 254) return ERR_RECV_STRING; // ’ Є Є Є ЇаЁЎ ўЁ¬ 2 бЁ¬ў®« Сложение
3190   1405 11 02 FF      lxi d, 65282
3191   1408 19            dad d
3192   1409 D2 0F 14      jnc l238
3193   140C               ; 181 return ERR_RECV_STRING; // ’ Є Є Є ЇаЁЎ ўЁ¬ 2 бЁ¬ў®« 
3194   140C 3E 0B         mvi a, 11
3195   140E C9            ret
3196   140F             l238:
3197   140F               ; 182 cmdLine[0] = '/';
3198   140F 3E 2F         mvi a, 47
3199   1411 32 2F 29      sta (cmdline)+(0)
3200   1414               ; 183 strcpy(cmdline+1, panelB.path1);
3201   1414 21 30 29      lxi h, (cmdline)+(1)
3202   1417 22 B1 2D      shld strcpy_1
3203   141A 21 27 28      lxi h, (panelB)+(2)
3204   141D CD E2 22      call strcpy
3205   1420               ; 184 if(i != 0) strcpy(cmdline+i+1, "/");Сложение с константой 0
3206   1420 2A ED 2C      lhld cmd_copymove1_i
3207   1423 7D            mov a, l
3208   1424 B4            ora h
3209   1425 CA 36 14      jz l239
3210   1428               ; 184 strcpy(cmdline+i+1, "/");Сложение
3211   1428 11 2F 29      lxi d, cmdline
3212   142B 19            dad d
3213   142C               ; Сложение с константой 1
3214   142C 23            inx h
3215   142D 22 B1 2D      shld strcpy_1
3216   1430 21 FE 2E      lxi h, string21
3217   1433 CD E2 22      call strcpy
3218   1436             l239:
3219   1436             l237:
3220   1436               ; 188 if(!inputBox(copymode ? " kopirowatx " : " pereimenowatx/peremestitx ") && cmdline[0]!=0) return 0;
3221   1436 3A CF 2B      lda cmd_copymove1_1
3222   1439 B7            ora a
3223   143A CA 43 14      jz l241
3224   143D 21 4D 2E      lxi h, string22
3225   1440 C3 46 14      jmp l242
3226   1443             l241:
3227   1443 21 91 2E      lxi h, string23
3228   1446             l242:
3229   1446 CD 7B 03      call inputBox
3230   1449               ; convertToConfition
3231   1449 B7            ora a
3232   144A C2 56 14      jnz l240
3233   144D 3A 2F 29      lda (cmdline)+(0)
3234   1450 B7            ora a
3235   1451 CA 56 14      jz l240
3236   1454               ; 188 return 0;
3237   1454 AF            xra a
3238   1455 C9            ret
3239   1456             l240:
3240   1456               ; 191 if(!absolutePath(cmdline)) return ERR_RECV_STRING;
3241   1456 21 2F 29      lxi h, cmdline
3242   1459 CD 8B 09      call absolutePath
3243   145C               ; convertToConfition
3244   145C B7            ora a
3245   145D C2 63 14      jnz l243
3246   1460               ; 191 return ERR_RECV_STRING;
3247   1460 3E 0B         mvi a, 11
3248   1462 C9            ret
3249   1463             l243:
3250   1463               ; 194 mask[0] = 0;  
3251   1463 AF            xra a
3252   1464 32 D6 2C      sta (cmd_copymove1_mask)+(0)
3253   1467               ; 195 name = getname(cmdline);
3254   1467 21 2F 29      lxi h, cmdline
3255   146A CD 0A 0A      call getName
3256   146D 22 D1 2B      shld cmd_copymove1_name
3257   1470               ; 196 if(name[0] != 0) {Сложение с константой 0
3258   1470 7E            mov a, m
3259   1471 B7            ora a
3260   1472 CA 90 14      jz l244
3261   1475               ; 198 packName(mask, name);
3262   1475 21 D6 2C      lxi h, cmd_copymove1_mask
3263   1478 22 2D 2B      shld packName_1
3264   147B 2A D1 2B      lhld cmd_copymove1_name
3265   147E CD 59 07      call packName
3266   1481               ; 200 dropPathInt(cmdLine, 0);
3267   1481 21 2F 29      lxi h, cmdline
3268   1484 22 5D 2B      shld dropPathInt_1
3269   1487 21 00 00      lxi h, 0
3270   148A CD 33 0A      call dropPathInt
3271   148D C3 A2 14      jmp l245
3272   1490             l244:
3273   1490               ; 204 if(cmdline[0] != 0 && name[0] == 0) name[-1] = 0;
3274   1490 3A 2F 29      lda (cmdline)+(0)
3275   1493 B7            ora a
3276   1494 CA A2 14      jz l246
3277   1497               ; Сложение с константой 0
3278   1497 2A D1 2B      lhld cmd_copymove1_name
3279   149A 7E            mov a, m
3280   149B B7            ora a
3281   149C C2 A2 14      jnz l246
3282   149F               ; 204 name[-1] = 0;Сложение с константой -1
3283   149F 2B            dcx h
3284   14A0 36 00         mvi m, 0
3285   14A2             l246:
3286   14A2             l245:
3287   14A2               ; 208 type = getFirstSelected(sourceFile);
3288   14A2 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3289   14A5 CD C6 04      call getFirstSelected
3290   14A8 32 EC 2C      sta cmd_copymove1_type
3291   14AB               ; 209 if(type == 0) return 0; // ЌҐв ўлЎа ­­ле д ©«®ў
3292   14AB B7            ora a
3293   14AC C2 B1 14      jnz l247
3294   14AF               ; 209 return 0; // ЌҐв ўлЎа ­­ле д ©«®ў
3295   14AF AF            xra a
3296   14B0 C9            ret
3297   14B1             l247:
3298   14B1               ; 211 for(;;) {
3299   14B1             l248:
3300   14B1               ; 213 if(!absolutePath(sourceFile)) { e = ERR_RECV_STRING; break; }
3301   14B1 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3302   14B4 CD 8B 09      call absolutePath
3303   14B7               ; convertToConfition
3304   14B7 B7            ora a
3305   14B8 C2 C3 14      jnz l251
3306   14BB               ; 213 e = ERR_RECV_STRING; break; }
3307   14BB 3E 0B         mvi a, 11
3308   14BD 32 D3 2B      sta cmd_copymove1_e
3309   14C0               ; 213 break; }
3310   14C0 C3 CA 15      jmp l249
3311   14C3             l251:
3312   14C3               ; 216 packName(forMask, getname(sourceFile));
3313   14C3 21 E1 2C      lxi h, cmd_copymove1_forMask
3314   14C6 22 2D 2B      shld packName_1
3315   14C9 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3316   14CC CD 0A 0A      call getName
3317   14CF CD 59 07      call packName
3318   14D2               ; 217 if(mask[0]) applyMask(forMask, mask);convertToConfition
3319   14D2 3A D6 2C      lda (cmd_copymove1_mask)+(0)
3320   14D5 B7            ora a
3321   14D6 CA E5 14      jz l252
3322   14D9               ; 217 applyMask(forMask, mask);
3323   14D9 21 E1 2C      lxi h, cmd_copymove1_forMask
3324   14DC 22 CB 2B      shld applyMask_1
3325   14DF 21 D6 2C      lxi h, cmd_copymove1_mask
3326   14E2 CD AC 13      call applyMask
3327   14E5             l252:
3328   14E5               ; 218 if(catPathAndUnpack(cmdline, forMask)) return ERR_RECV_STRING;
3329   14E5 21 2F 29      lxi h, cmdline
3330   14E8 22 79 2A      shld catPathAndUnpack_1
3331   14EB 21 E1 2C      lxi h, cmd_copymove1_forMask
3332   14EE CD 87 04      call catPathAndUnpack
3333   14F1               ; convertToConfition
3334   14F1 B7            ora a
3335   14F2 CA F8 14      jz l253
3336   14F5               ; 218 return ERR_RECV_STRING;
3337   14F5 3E 0B         mvi a, 11
3338   14F7 C9            ret
3339   14F8             l253:
3340   14F8               ; 221 if(0!=strcmp(sourceFile, cmdline)) {
3341   14F8 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3342   14FB 22 BE 2D      shld strcmp_1
3343   14FE 21 2F 29      lxi h, cmdline
3344   1501 CD 2B 23      call strcmp
3345   1504 B7            ora a
3346   1505 CA A7 15      jz l254
3347   1508               ; 223 if(copymode) {convertToConfition
3348   1508 3A CF 2B      lda cmd_copymove1_1
3349   150B B7            ora a
3350   150C CA 3B 15      jz l255
3351   150F               ; 224 if(type==2) {
3352   150F 3A EC 2C      lda cmd_copymove1_type
3353   1512 FE 02         cpi 2
3354   1514 C2 29 15      jnz l256
3355   1517               ; 225 e = cmd_copyFolder(sourceFile, cmdline);
3356   1517 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3357   151A 22 B1 2B      shld cmd_copyFolder_1
3358   151D 21 2F 29      lxi h, cmdline
3359   1520 CD 5B 12      call cmd_copyFolder
3360   1523 32 D3 2B      sta cmd_copymove1_e
3361   1526 C3 38 15      jmp l257
3362   1529             l256:
3363   1529               ; 227 e = cmd_copyFile(sourceFile, cmdline);
3364   1529 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3365   152C 22 8A 2B      shld cmd_copyFile_1
3366   152F 21 2F 29      lxi h, cmdline
3367   1532 CD 3C 10      call cmd_copyFile
3368   1535 32 D3 2B      sta cmd_copymove1_e
3369   1538             l257:
3370   1538 C3 A0 15      jmp l258
3371   153B             l255:
3372   153B               ; 231 drawWindow(" pereimenowanie/pereme}enie ");
3373   153B 21 74 2E      lxi h, string24
3374   153E CD 10 1F      call drawWindow
3375   1541               ; 232 drawWindowText(0, 1, "iz:");
3376   1541 AF            xra a
3377   1542 32 64 2D      sta drawWindowText_1
3378   1545 3C            inr a
3379   1546 32 65 2D      sta drawWindowText_2
3380   1549 21 E0 2F      lxi h, string17
3381   154C CD 8C 1F      call drawWindowText
3382   154F               ; 233 drawWindowText(4, 1, sourceFile);
3383   154F 3E 04         mvi a, 4
3384   1551 32 64 2D      sta drawWindowText_1
3385   1554 3E 01         mvi a, 1
3386   1556 32 65 2D      sta drawWindowText_2
3387   1559 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3388   155C CD 8C 1F      call drawWindowText
3389   155F               ; 234 drawWindowText(0, 2, "w:");
3390   155F AF            xra a
3391   1560 32 64 2D      sta drawWindowText_1
3392   1563 3E 02         mvi a, 2
3393   1565 32 65 2D      sta drawWindowText_2
3394   1568 21 09 31      lxi h, string18
3395   156B CD 8C 1F      call drawWindowText
3396   156E               ; 235 drawWindowText(4, 2, cmdline);
3397   156E 3E 04         mvi a, 4
3398   1570 32 64 2D      sta drawWindowText_1
3399   1573 3E 02         mvi a, 2
3400   1575 32 65 2D      sta drawWindowText_2
3401   1578 21 2F 29      lxi h, cmdline
3402   157B CD 8C 1F      call drawWindowText
3403   157E               ; 236 drawAnyKeyButton();
3404   157E CD 6C 1F      call drawAnyKeyButton
3405   1581               ; 239 if(bioskey1() == KEY_ESC) { e = ERR_USER; break; }
3406   1581 CD C6 20      call bioskey1
3407   1584 FE 1B         cpi 27
3408   1586 C2 91 15      jnz l259
3409   1589               ; 239 e = ERR_USER; break; }
3410   1589 3E 80         mvi a, 128
3411   158B 32 D3 2B      sta cmd_copymove1_e
3412   158E               ; 239 break; }
3413   158E C3 CA 15      jmp l249
3414   1591             l259:
3415   1591               ; 241 e = fs_move(sourceFile, cmdline);    
3416   1591 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3417   1594 22 F9 2D      shld fs_move_1
3418   1597 21 2F 29      lxi h, cmdline
3419   159A CD FC 24      call fs_move
3420   159D 32 D3 2B      sta cmd_copymove1_e
3421   15A0             l258:
3422   15A0               ; 244 if(e) break;convertToConfition
3423   15A0 3A D3 2B      lda cmd_copymove1_e
3424   15A3 B7            ora a
3425   15A4 C2 CA 15      jnz l249
3426   15A7             l254:
3427   15A7               ; 248 dropPathInt(cmdLine, 0);
3428   15A7 21 2F 29      lxi h, cmdline
3429   15AA 22 5D 2B      shld dropPathInt_1
3430   15AD 21 00 00      lxi h, 0
3431   15B0 CD 33 0A      call dropPathInt
3432   15B3               ; 251 type = getNextSelected(sourceFile);
3433   15B3 21 D6 2B      lxi h, cmd_copymove1_sourceFile
3434   15B6 CD 12 05      call getNextSelected
3435   15B9 32 EC 2C      sta cmd_copymove1_type
3436   15BC               ; 252 if(type == 0) { e=0; break; }
3437   15BC B7            ora a
3438   15BD C2 C7 15      jnz l261
3439   15C0               ; 252 e=0; break; }
3440   15C0 AF            xra a
3441   15C1 32 D3 2B      sta cmd_copymove1_e
3442   15C4               ; 252 break; }
3443   15C4 C3 CA 15      jmp l249
3444   15C7             l261:
3445   15C7             l250:
3446   15C7 C3 B1 14      jmp l248
3447   15CA             l249:
3448   15CA               ; 257 getFiles();
3449   15CA CD BA 07      call getFiles
3450   15CD               ; 258 dupFiles(1);
3451   15CD 3E 01         mvi a, 1
3452   15CF CD 3A 0C      call dupFiles
3453   15D2               ; 260 return e;
3454   15D2 3A D3 2B      lda cmd_copymove1_e
3455   15D5 C9            ret
3456   15D6               ; --- cmd_copymove -----------------------------------------------------------------
3457   15D6             cmd_copymove:
3458   15D6 32 F0 2C      sta cmd_copymove_2
3459   15D9               ; 266 drawError(copymode ? "o{ibka kopirowaniq" : "o{ibka pereme}eniq", cmd_copymove1(copymode, shiftPressed));
3460   15D9 3A EF 2C      lda cmd_copymove_1
3461   15DC B7            ora a
3462   15DD CA E6 15      jz l262
3463   15E0 21 11 30      lxi h, string25
3464   15E3 C3 E9 15      jmp l263
3465   15E6             l262:
3466   15E6 21 36 30      lxi h, string26
3467   15E9             l263:
3468   15E9 22 68 2A      shld drawError_1
3469   15EC 3A EF 2C      lda cmd_copymove_1
3470   15EF 32 CF 2B      sta cmd_copymove1_1
3471   15F2 3A F0 2C      lda cmd_copymove_2
3472   15F5 CD D9 13      call cmd_copymove1
3473   15F8 CD 9B 02      call drawError
3474   15FB               ; 267 drawScreen();
3475   15FB C3 46 02      jmp drawScreen
3476   15FE             cmd_new1:
3477   15FE 32 F1 2C      sta cmd_new1_1
3478   1601               ; 8 cmdLine[0] = 0;
3479   1601 AF            xra a
3480   1602 32 2F 29      sta (cmdline)+(0)
3481   1605               ; 11 if(!inputBox(dir ? " sozdatx papku " : " sozdatx fajl ") && cmdline[0]!=0) return 0;
3482   1605 3A F1 2C      lda cmd_new1_1
3483   1608 B7            ora a
3484   1609 CA 12 16      jz l265
3485   160C 21 CD 2E      lxi h, string27
3486   160F C3 15 16      jmp l266
3487   1612             l265:
3488   1612 21 BE 2E      lxi h, string28
3489   1615             l266:
3490   1615 CD 7B 03      call inputBox
3491   1618               ; convertToConfition
3492   1618 B7            ora a
3493   1619 C2 25 16      jnz l264
3494   161C 3A 2F 29      lda (cmdline)+(0)
3495   161F B7            ora a
3496   1620 CA 25 16      jz l264
3497   1623               ; 11 return 0;
3498   1623 AF            xra a
3499   1624 C9            ret
3500   1625             l264:
3501   1625               ; 13 if(!absolutePath(cmdline)) return ERR_RECV_STRING;
3502   1625 21 2F 29      lxi h, cmdline
3503   1628 CD 8B 09      call absolutePath
3504   162B               ; convertToConfition
3505   162B B7            ora a
3506   162C C2 32 16      jnz l267
3507   162F               ; 13 return ERR_RECV_STRING;
3508   162F 3E 0B         mvi a, 11
3509   1631 C9            ret
3510   1632             l267:
3511   1632               ; 16 if(!dir) {convertToConfition
3512   1632 3A F1 2C      lda cmd_new1_1
3513   1635 B7            ora a
3514   1636 C2 6E 16      jnz l268
3515   1639               ; 17 if(strlen(cmdline) >= 255) return ERR_RECV_STRING;
3516   1639 21 2F 29      lxi h, cmdline
3517   163C CD 07 22      call strlen
3518   163F               ; Сложение
3519   163F 11 01 FF      lxi d, 65281
3520   1642 19            dad d
3521   1643 D2 49 16      jnc l269
3522   1646               ; 17 return ERR_RECV_STRING;
3523   1646 3E 0B         mvi a, 11
3524   1648 C9            ret
3525   1649             l269:
3526   1649               ; 20 memcpy_back(cmdline+1, cmdline, 255);
3527   1649 21 30 29      lxi h, (cmdline)+(1)
3528   164C 22 B5 2D      shld memcpy_back_1
3529   164F 21 2F 29      lxi h, cmdline
3530   1652 22 B7 2D      shld memcpy_back_2
3531   1655 21 FF 00      lxi h, 255
3532   1658 CD F3 22      call memcpy_back
3533   165B               ; 21 cmdline[0] = '*';
3534   165B 3E 2A         mvi a, 42
3535   165D 32 2F 29      sta (cmdline)+(0)
3536   1660               ; 24 run(editorApp, cmdLine);
3537   1660 21 01 27      lxi h, editorApp
3538   1663 22 73 2B      shld run_1
3539   1666 21 2F 29      lxi h, cmdline
3540   1669 CD 48 0D      call run
3541   166C               ; 25 return 0;
3542   166C AF            xra a
3543   166D C9            ret
3544   166E             l268:
3545   166E               ; 29 dir = fs_mkdir(cmdline);
3546   166E 21 2F 29      lxi h, cmdline
3547   1671 CD F0 24      call fs_mkdir
3548   1674 32 F1 2C      sta cmd_new1_1
3549   1677               ; 32 if(!dir) {convertToConfition
3550   1677 B7            ora a
3551   1678 C2 82 16      jnz l270
3552   167B               ; 33 getFiles();
3553   167B CD BA 07      call getFiles
3554   167E               ; 34 dupFiles(0);
3555   167E AF            xra a
3556   167F CD 3A 0C      call dupFiles
3557   1682             l270:
3558   1682               ; 37 return dir;
3559   1682 3A F1 2C      lda cmd_new1_1
3560   1685 C9            ret
3561   1686               ; --- cmd_new -----------------------------------------------------------------
3562   1686             cmd_new:
3563   1686 32 F2 2C      sta cmd_new_1
3564   1689               ; 41 drawError("o{ibka sozdaniq papki", cmd_new1(dir));
3565   1689 21 49 30      lxi h, string29
3566   168C 22 68 2A      shld drawError_1
3567   168F CD FE 15      call cmd_new1
3568   1692 CD 9B 02      call drawError
3569   1695               ; 43 drawScreen();
3570   1695 C3 46 02      jmp drawScreen
3571   1698             cmd_freespace_1:
3572   1698 22 F4 2C      shld cmd_freespace_1_2
3573   169B               ; 10 i2s32(buf, (ulong*)&fs_low, 10, ' ');
3574   169B 21 F6 2C      lxi h, cmd_freespace_1_buf
3575   169E 22 80 2D      shld i2s32_1
3576   16A1 21 DA 2D      lxi h, fs_low
3577   16A4 22 82 2D      shld i2s32_2
3578   16A7 21 0A 00      lxi h, 10
3579   16AA 22 84 2D      shld i2s32_3
3580   16AD 3E 20         mvi a, 32
3581   16AF CD 06 21      call i2s32
3582   16B2               ; 13 memcpy_back(buf+10, buf+7, 3); buf[9]  = ' ';
3583   16B2 21 00 2D      lxi h, (cmd_freespace_1_buf)+(10)
3584   16B5 22 B5 2D      shld memcpy_back_1
3585   16B8 21 FD 2C      lxi h, (cmd_freespace_1_buf)+(7)
3586   16BB 22 B7 2D      shld memcpy_back_2
3587   16BE 21 03 00      lxi h, 3
3588   16C1 CD F3 22      call memcpy_back
3589   16C4               ; 13 buf[9]  = ' ';
3590   16C4 3E 20         mvi a, 32
3591   16C6 32 FF 2C      sta (cmd_freespace_1_buf)+(9)
3592   16C9               ; 14 memcpy_back(buf+6,  buf+4, 3); buf[5]  = ' ';
3593   16C9 21 FC 2C      lxi h, (cmd_freespace_1_buf)+(6)
3594   16CC 22 B5 2D      shld memcpy_back_1
3595   16CF 21 FA 2C      lxi h, (cmd_freespace_1_buf)+(4)
3596   16D2 22 B7 2D      shld memcpy_back_2
3597   16D5 21 03 00      lxi h, 3
3598   16D8 CD F3 22      call memcpy_back
3599   16DB               ; 14 buf[5]  = ' ';
3600   16DB 3E 20         mvi a, 32
3601   16DD 32 FB 2C      sta (cmd_freespace_1_buf)+(5)
3602   16E0               ; 15 memcpy_back(buf+2,  buf+1, 3); buf[1]  = ' ';
3603   16E0 21 F8 2C      lxi h, (cmd_freespace_1_buf)+(2)
3604   16E3 22 B5 2D      shld memcpy_back_1
3605   16E6 21 F7 2C      lxi h, (cmd_freespace_1_buf)+(1)
3606   16E9 22 B7 2D      shld memcpy_back_2
3607   16EC 21 03 00      lxi h, 3
3608   16EF CD F3 22      call memcpy_back
3609   16F2               ; 15 buf[1]  = ' ';
3610   16F2 3E 20         mvi a, 32
3611   16F4 32 F7 2C      sta (cmd_freespace_1_buf)+(1)
3612   16F7               ; 16 strcpy(buf+13, " mb");
3613   16F7 21 03 2D      lxi h, (cmd_freespace_1_buf)+(13)
3614   16FA 22 B1 2D      shld strcpy_1
3615   16FD 21 5A 2E      lxi h, string30
3616   1700 CD E2 22      call strcpy
3617   1703               ; 19 drawWindowText(6, y, text);
3618   1703 3E 06         mvi a, 6
3619   1705 32 64 2D      sta drawWindowText_1
3620   1708 3A F3 2C      lda cmd_freespace_1_1
3621   170B 32 65 2D      sta drawWindowText_2
3622   170E 2A F4 2C      lhld cmd_freespace_1_2
3623   1711 CD 8C 1F      call drawWindowText
3624   1714               ; 20 drawWindowText(16, y, buf);
3625   1714 3E 10         mvi a, 16
3626   1716 32 64 2D      sta drawWindowText_1
3627   1719 3A F3 2C      lda cmd_freespace_1_1
3628   171C 32 65 2D      sta drawWindowText_2
3629   171F 21 F6 2C      lxi h, cmd_freespace_1_buf
3630   1722 C3 8C 1F      jmp drawWindowText
3631   1725             cmd_freespace:
3632   1725 21 5E 2E      lxi h, string31
3633   1728 CD 10 1F      call drawWindow
3634   172B               ; 30 drawWindowText(6, 2, "prowerka...");  
3635   172B 3E 06         mvi a, 6
3636   172D 32 64 2D      sta drawWindowText_1
3637   1730 3E 02         mvi a, 2
3638   1732 32 65 2D      sta drawWindowText_2
3639   1735 21 A3 30      lxi h, string32
3640   1738 CD 8C 1F      call drawWindowText
3641   173B               ; 33 if(e = fs_getfree()) { 
3642   173B CD 0B 25      call fs_getfree
3643   173E 32 07 2D      sta cmd_freespace_e
3644   1741               ; convertToConfition
3645   1741 B7            ora a
3646   1742 CA 54 17      jz l271
3647   1745               ; 34 drawError("o{ibka ~teniq", e);
3648   1745 21 6F 30      lxi h, string33
3649   1748 22 68 2A      shld drawError_1
3650   174B 3A 07 2D      lda cmd_freespace_e
3651   174E CD 9B 02      call drawError
3652   1751 C3 77 17      jmp l272
3653   1754             l271:
3654   1754               ; 37 cmd_freespace_1(2, "swobodno: ");
3655   1754 3E 02         mvi a, 2
3656   1756 32 F3 2C      sta cmd_freespace_1_1
3657   1759 21 FE 30      lxi h, string34
3658   175C CD 98 16      call cmd_freespace_1
3659   175F               ; 40 if(!fs_gettotal()) cmd_freespace_1(1, "wsego:");
3660   175F CD 1A 25      call fs_gettotal
3661   1762               ; convertToConfition
3662   1762 B7            ora a
3663   1763 C2 71 17      jnz l273
3664   1766               ; 40 cmd_freespace_1(1, "wsego:");
3665   1766 3E 01         mvi a, 1
3666   1768 32 F3 2C      sta cmd_freespace_1_1
3667   176B 21 0C 31      lxi h, string35
3668   176E CD 98 16      call cmd_freespace_1
3669   1771             l273:
3670   1771               ; 43 drawAnyKeyButton();
3671   1771 CD 6C 1F      call drawAnyKeyButton
3672   1774               ; 44 getch1();
3673   1774 CD C2 20      call getch1
3674   1777             l272:
3675   1777               ; 47 drawScreen();
3676   1777 C3 46 02      jmp drawScreen
3677   177A             cmd_deleteFile:
3678   177A 21 DD 2E      lxi h, string36
3679   177D CD 10 1F      call drawWindow
3680   1780               ; 9 drawWindowText(0, 1, cmdline);
3681   1780 AF            xra a
3682   1781 32 64 2D      sta drawWindowText_1
3683   1784 3C            inr a
3684   1785 32 65 2D      sta drawWindowText_2
3685   1788 21 2F 29      lxi h, cmdline
3686   178B CD 8C 1F      call drawWindowText
3687   178E               ; 10 drawEscButton();
3688   178E CD 7C 1F      call drawEscButton
3689   1791               ; 13 if(bioskey1() == KEY_ESC) return ERR_USER;
3690   1791 CD C6 20      call bioskey1
3691   1794 FE 1B         cpi 27
3692   1796 C2 9C 17      jnz l274
3693   1799               ; 13 return ERR_USER;
3694   1799 3E 80         mvi a, 128
3695   179B C9            ret
3696   179C             l274:
3697   179C               ; 16 return fs_delete(cmdline);
3698   179C 21 2F 29      lxi h, cmdline
3699   179F C3 E4 24      jmp fs_delete
3700   17A2 C9            ret
3701   17A3               ; --- cmd_deleteFolder -----------------------------------------------------------------
3702   17A3             cmd_deleteFolder:
3703   17A3 AF            xra a
3704   17A4 32 08 2D      sta cmd_deleteFolder_level
3705   17A7               ; 29 while(1) {
3706   17A7             l275:
3707   17A7               ; 31 e = fs_findfirst(cmdline, panelB.files1, maxFiles);  
3708   17A7 21 2F 29      lxi h, cmdline
3709   17AA 22 AB 2D      shld fs_findfirst_1
3710   17AD 2A 25 28      lhld panelB
3711   17B0 22 AD 2D      shld fs_findfirst_2
3712   17B3 2A 2F 2A      lhld maxFiles
3713   17B6 CD B4 22      call fs_findfirst
3714   17B9 32 09 2D      sta cmd_deleteFolder_e
3715   17BC               ; 32 if(e != 0 && e != ERR_MAX_FILES) return e;
3716   17BC B7            ora a
3717   17BD CA C9 17      jz l277
3718   17C0 3A 09 2D      lda cmd_deleteFolder_e
3719   17C3 FE 0A         cpi 10
3720   17C5 CA C9 17      jz l277
3721   17C8               ; 32 return e;
3722   17C8 C9            ret
3723   17C9             l277:
3724   17C9               ; 33 panelB.cnt = fs_low;
3725   17C9 2A DA 2D      lhld fs_low
3726   17CC 22 2B 29      shld (panelB)+(262)
3727   17CF               ; 36 e = 0;
3728   17CF AF            xra a
3729   17D0 32 09 2D      sta cmd_deleteFolder_e
3730   17D3               ; 37 for(p=panelB.files1, i=panelB.cnt; i; --i, ++p) {
3731   17D3 2A 25 28      lhld panelB
3732   17D6 22 0A 2D      shld cmd_deleteFolder_p
3733   17D9 2A 2B 29      lhld (panelB)+(262)
3734   17DC 22 0C 2D      shld cmd_deleteFolder_i
3735   17DF             l278:
3736   17DF               ; convertToConfition
3737   17DF 2A 0C 2D      lhld cmd_deleteFolder_i
3738   17E2 7D            mov a, l
3739   17E3 B4            ora h
3740   17E4 CA 30 18      jz l279
3741   17E7               ; 38 if(catPathAndUnpack(cmdLine, p->fname)) return ERR_RECV_STRING;
3742   17E7 21 2F 29      lxi h, cmdline
3743   17EA 22 79 2A      shld catPathAndUnpack_1
3744   17ED 2A 0A 2D      lhld cmd_deleteFolder_p
3745   17F0 CD 87 04      call catPathAndUnpack
3746   17F3               ; convertToConfition
3747   17F3 B7            ora a
3748   17F4 CA FA 17      jz l281
3749   17F7               ; 38 return ERR_RECV_STRING;
3750   17F7 3E 0B         mvi a, 11
3751   17F9 C9            ret
3752   17FA             l281:
3753   17FA               ; 39 e = cmd_deleteFile();
3754   17FA CD 7A 17      call cmd_deleteFile
3755   17FD 32 09 2D      sta cmd_deleteFolder_e
3756   1800               ; 40 if(e == ERR_DIR_NOT_EMPTY) break;
3757   1800 FE 07         cpi 7
3758   1802 CA 30 18      jz l279
3759   1805 21 2F 29      lxi h, cmdline
3760   1808 22 5D 2B      shld dropPathInt_1
3761   180B 21 00 00      lxi h, 0
3762   180E CD 33 0A      call dropPathInt
3763   1811               ; 43 if(e) return e;convertToConfition
3764   1811 3A 09 2D      lda cmd_deleteFolder_e
3765   1814 B7            ora a
3766   1815 CA 1C 18      jz l283
3767   1818               ; 43 return e;
3768   1818 3A 09 2D      lda cmd_deleteFolder_e
3769   181B C9            ret
3770   181C             l283:
3771   181C             l280:
3772   181C 2A 0C 2D      lhld cmd_deleteFolder_i
3773   181F 2B            dcx h
3774   1820 22 0C 2D      shld cmd_deleteFolder_i
3775   1823 2A 0A 2D      lhld cmd_deleteFolder_p
3776   1826 11 14 00      lxi d, 20
3777   1829 19            dad d
3778   182A 22 0A 2D      shld cmd_deleteFolder_p
3779   182D C3 DF 17      jmp l278
3780   1830             l279:
3781   1830               ; 47 if(e == ERR_DIR_NOT_EMPTY) { 
3782   1830 3A 09 2D      lda cmd_deleteFolder_e
3783   1833 FE 07         cpi 7
3784   1835 C2 3F 18      jnz l284
3785   1838               ; 48 ++level;
3786   1838 21 08 2D      lxi h, cmd_deleteFolder_level
3787   183B 34            inr m
3788   183C               ; 49 continue;
3789   183C C3 A7 17      jmp l275
3790   183F             l284:
3791   183F               ; 53 if(panelB.cnt == maxFiles) continue;
3792   183F 2A 2B 29      lhld (panelB)+(262)
3793   1842 EB            xchg
3794   1843 2A 2F 2A      lhld maxFiles
3795   1846 CD 00 21      call op_cmp16
3796   1849 CA A7 17      jz l275
3797   184C CD 7A 17      call cmd_deleteFile
3798   184F 32 09 2D      sta cmd_deleteFolder_e
3799   1852               ; 57 if(e) return e;convertToConfition
3800   1852 B7            ora a
3801   1853 CA 5A 18      jz l286
3802   1856               ; 57 return e;
3803   1856 3A 09 2D      lda cmd_deleteFolder_e
3804   1859 C9            ret
3805   185A             l286:
3806   185A               ; 60 if(level == 0) return 0;
3807   185A 3A 08 2D      lda cmd_deleteFolder_level
3808   185D B7            ora a
3809   185E C2 63 18      jnz l287
3810   1861               ; 60 return 0;
3811   1861 AF            xra a
3812   1862 C9            ret
3813   1863             l287:
3814   1863               ; 61 --level;
3815   1863 21 08 2D      lxi h, cmd_deleteFolder_level
3816   1866 35            dcr m
3817   1867               ; 62 dropPathInt(cmdLine, 0);
3818   1867 21 2F 29      lxi h, cmdline
3819   186A 22 5D 2B      shld dropPathInt_1
3820   186D 21 00 00      lxi h, 0
3821   1870 CD 33 0A      call dropPathInt
3822   1873 C3 A7 17      jmp l275
3823   1876             l276:
3824   1876 C9            ret
3825   1877               ; --- cmd_delete -----------------------------------------------------------------
3826   1877             cmd_delete:
3827   1877 21 E8 2E      lxi h, string37
3828   187A 22 71 2A      shld confirm_1
3829   187D 21 13 31      lxi h, string38
3830   1880 CD F2 03      call confirm
3831   1883               ; convertToConfition
3832   1883 B7            ora a
3833   1884 CA E3 18      jz l288
3834   1887               ; 73 needRefresh2 = 0;
3835   1887 AF            xra a
3836   1888 32 0F 2D      sta cmd_delete_needRefresh2
3837   188B               ; 76 if(getFirstSelected(cmdLine)) {
3838   188B 21 2F 29      lxi h, cmdline
3839   188E CD C6 04      call getFirstSelected
3840   1891               ; convertToConfition
3841   1891 B7            ora a
3842   1892 CA E3 18      jz l289
3843   1895               ; 77 for(;;) {
3844   1895             l290:
3845   1895               ; 78 if(!absolutePath(cmdline)) { e = ERR_RECV_STRING; break; }
3846   1895 21 2F 29      lxi h, cmdline
3847   1898 CD 8B 09      call absolutePath
3848   189B               ; convertToConfition
3849   189B B7            ora a
3850   189C C2 A7 18      jnz l293
3851   189F               ; 78 e = ERR_RECV_STRING; break; }
3852   189F 3E 0B         mvi a, 11
3853   18A1 32 0E 2D      sta cmd_delete_e
3854   18A4               ; 78 break; }
3855   18A4 C3 CE 18      jmp l291
3856   18A7             l293:
3857   18A7               ; 81 e = cmd_deleteFile();
3858   18A7 CD 7A 17      call cmd_deleteFile
3859   18AA 32 0E 2D      sta cmd_delete_e
3860   18AD               ; 84 if(e == ERR_DIR_NOT_EMPTY) {
3861   18AD FE 07         cpi 7
3862   18AF C2 BD 18      jnz l294
3863   18B2               ; 85 needRefresh2 = 1; // Џа ў п Ї ­Ґ«м Ўг¤Ґв ЁбЇ®азҐ­ 
3864   18B2 3E 01         mvi a, 1
3865   18B4 32 0F 2D      sta cmd_delete_needRefresh2
3866   18B7               ; 86 e = cmd_deleteFolder();
3867   18B7 CD A3 17      call cmd_deleteFolder
3868   18BA 32 0E 2D      sta cmd_delete_e
3869   18BD             l294:
3870   18BD               ; 88 if(e) break;convertToConfition
3871   18BD B7            ora a
3872   18BE C2 CE 18      jnz l291
3873   18C1 21 2F 29      lxi h, cmdline
3874   18C4 CD 12 05      call getNextSelected
3875   18C7               ; convertToConfition
3876   18C7 B7            ora a
3877   18C8 CA CE 18      jz l291
3878   18CB             l292:
3879   18CB C3 95 18      jmp l290
3880   18CE             l291:
3881   18CE               ; 95 drawError("o{ibka udaleniq", e);
3882   18CE 21 5F 30      lxi h, string39
3883   18D1 22 68 2A      shld drawError_1
3884   18D4 3A 0E 2D      lda cmd_delete_e
3885   18D7 CD 9B 02      call drawError
3886   18DA               ; 98 getFiles();
3887   18DA CD BA 07      call getFiles
3888   18DD               ; 99 dupFiles(needRefresh2);
3889   18DD 3A 0F 2D      lda cmd_delete_needRefresh2
3890   18E0 CD 3A 0C      call dupFiles
3891   18E3             l289:
3892   18E3             l288:
3893   18E3               ; 103 drawScreen();
3894   18E3 C3 46 02      jmp drawScreen
3895   18E6             compareMask1:
3896   18E6 C5            push b
3897   18E7 32 14 2D      sta compareMask1_3
3898   18EA               ; 8 for(;;) {
3899   18EA             l297:
3900   18EA               ; 9 m = *mask;
3901   18EA 2A 12 2D      lhld compareMask1_2
3902   18ED 46            mov b, m
3903   18EE               ; 10 if(m == '*') return 1;
3904   18EE 3E 2A         mvi a, 42
3905   18F0 B8            cmp b
3906   18F1 C2 F8 18      jnz l300
3907   18F4               ; 10 return 1;
3908   18F4 3E 01         mvi a, 1
3909   18F6 C1            pop b
3910   18F7 C9            ret
3911   18F8             l300:
3912   18F8               ; 11 if(m != '?' && m != *fileName) return 0;  
3913   18F8 3E 3F         mvi a, 63
3914   18FA B8            cmp b
3915   18FB CA 09 19      jz l301
3916   18FE 2A 10 2D      lhld compareMask1_1
3917   1901 7E            mov a, m
3918   1902 B8            cmp b
3919   1903 CA 09 19      jz l301
3920   1906               ; 11 return 0;  
3921   1906 AF            xra a
3922   1907 C1            pop b
3923   1908 C9            ret
3924   1909             l301:
3925   1909               ; 12 --i;
3926   1909 21 14 2D      lxi h, compareMask1_3
3927   190C 35            dcr m
3928   190D               ; 13 if(i==0) return 1;
3929   190D 3A 14 2D      lda compareMask1_3
3930   1910 B7            ora a
3931   1911 C2 18 19      jnz l302
3932   1914               ; 13 return 1;
3933   1914 3E 01         mvi a, 1
3934   1916 C1            pop b
3935   1917 C9            ret
3936   1918             l302:
3937   1918               ; 14 ++mask, ++fileName;
3938   1918 2A 12 2D      lhld compareMask1_2
3939   191B 23            inx h
3940   191C 22 12 2D      shld compareMask1_2
3941   191F 2A 10 2D      lhld compareMask1_1
3942   1922 23            inx h
3943   1923 22 10 2D      shld compareMask1_1
3944   1926             l299:
3945   1926 C3 EA 18      jmp l297
3946   1929             l298:
3947   1929 C1            pop b
3948   192A C9            ret
3949   192B               ; --- compareMask -----------------------------------------------------------------
3950   192B             compareMask:
3951   192B 22 17 2D      shld compareMask_2
3952   192E               ; 21 if(!compareMask1(fileName, mask, 8)) return 0;
3953   192E 2A 15 2D      lhld compareMask_1
3954   1931 22 10 2D      shld compareMask1_1
3955   1934 2A 17 2D      lhld compareMask_2
3956   1937 22 12 2D      shld compareMask1_2
3957   193A 3E 08         mvi a, 8
3958   193C CD E6 18      call compareMask1
3959   193F               ; convertToConfition
3960   193F B7            ora a
3961   1940 C2 45 19      jnz l303
3962   1943               ; 21 return 0;
3963   1943 AF            xra a
3964   1944 C9            ret
3965   1945             l303:
3966   1945               ; 22 return compareMask1(fileName+8, mask+8, 3);Сложение
3967   1945 2A 15 2D      lhld compareMask_1
3968   1948 11 08 00      lxi d, 8
3969   194B 19            dad d
3970   194C 22 10 2D      shld compareMask1_1
3971   194F               ; Сложение
3972   194F 2A 17 2D      lhld compareMask_2
3973   1952 11 08 00      lxi d, 8
3974   1955 19            dad d
3975   1956 22 12 2D      shld compareMask1_2
3976   1959 3E 03         mvi a, 3
3977   195B C3 E6 18      jmp compareMask1
3978   195E C9            ret
3979   195F               ; --- cmd_sel -----------------------------------------------------------------
3980   195F             cmd_sel:
3981   195F 32 19 2D      sta cmd_sel_1
3982   1962               ; 33 strcpy(cmdLine, "*.*");
3983   1962 21 2F 29      lxi h, cmdline
3984   1965 22 B1 2D      shld strcpy_1
3985   1968 21 F2 2E      lxi h, string40
3986   196B CD E2 22      call strcpy
3987   196E               ; 34 if(inputBox(" pometitx fajly ")) {
3988   196E 21 AD 2E      lxi h, string41
3989   1971 CD 7B 03      call inputBox
3990   1974               ; convertToConfition
3991   1974 B7            ora a
3992   1975 CA F7 19      jz l304
3993   1978               ; 35 packName(buf, cmdLine);
3994   1978 21 1E 2D      lxi h, cmd_sel_buf
3995   197B 22 2D 2B      shld packName_1
3996   197E 21 2F 29      lxi h, cmdline
3997   1981 CD 59 07      call packName
3998   1984               ; 37 for(i=panelA.cnt, f=panelA.files1; i; --i, ++f) {
3999   1984 2A 21 28      lhld (panelA)+(262)
4000   1987 22 1C 2D      shld cmd_sel_i
4001   198A 2A 1B 27      lhld panelA
4002   198D 22 1A 2D      shld cmd_sel_f
4003   1990             l305:
4004   1990               ; convertToConfition
4005   1990 2A 1C 2D      lhld cmd_sel_i
4006   1993 7D            mov a, l
4007   1994 B4            ora h
4008   1995 CA F7 19      jz l306
4009   1998               ; 38 if(f->fattrib & 0x10) {Сложение
4010   1998 2A 1A 2D      lhld cmd_sel_f
4011   199B 11 0B 00      lxi d, 11
4012   199E 19            dad d
4013   199F 7E            mov a, m
4014   19A0 E6 10         ani 16
4015   19A2               ; convertToConfition
4016   19A2 CA B3 19      jz l308
4017   19A5               ; 39 f->fattrib &= 0x7F;Сложение
4018   19A5 2A 1A 2D      lhld cmd_sel_f
4019   19A8 11 0B 00      lxi d, 11
4020   19AB 19            dad d
4021   19AC 7E            mov a, m
4022   19AD E6 7F         ani 127
4023   19AF 77            mov m, a
4024   19B0 C3 E3 19      jmp l309
4025   19B3             l308:
4026   19B3               ; 41 if(compareMask(f->fname, buf)) {
4027   19B3 2A 1A 2D      lhld cmd_sel_f
4028   19B6 22 15 2D      shld compareMask_1
4029   19B9 21 1E 2D      lxi h, cmd_sel_buf
4030   19BC CD 2B 19      call compareMask
4031   19BF               ; convertToConfition
4032   19BF B7            ora a
4033   19C0 CA E3 19      jz l310
4034   19C3               ; 42 if(add) {convertToConfition
4035   19C3 3A 19 2D      lda cmd_sel_1
4036   19C6 B7            ora a
4037   19C7 CA D8 19      jz l311
4038   19CA               ; 43 f->fattrib |= 0x80;Сложение
4039   19CA 2A 1A 2D      lhld cmd_sel_f
4040   19CD 11 0B 00      lxi d, 11
4041   19D0 19            dad d
4042   19D1 7E            mov a, m
4043   19D2 F6 80         ori 128
4044   19D4 77            mov m, a
4045   19D5 C3 E3 19      jmp l312
4046   19D8             l311:
4047   19D8               ; 45 f->fattrib &= 0x7F;Сложение
4048   19D8 2A 1A 2D      lhld cmd_sel_f
4049   19DB 11 0B 00      lxi d, 11
4050   19DE 19            dad d
4051   19DF 7E            mov a, m
4052   19E0 E6 7F         ani 127
4053   19E2 77            mov m, a
4054   19E3             l312:
4055   19E3             l310:
4056   19E3             l309:
4057   19E3             l307:
4058   19E3 2A 1C 2D      lhld cmd_sel_i
4059   19E6 2B            dcx h
4060   19E7 22 1C 2D      shld cmd_sel_i
4061   19EA 2A 1A 2D      lhld cmd_sel_f
4062   19ED 11 14 00      lxi d, 20
4063   19F0 19            dad d
4064   19F1 22 1A 2D      shld cmd_sel_f
4065   19F4 C3 90 19      jmp l305
4066   19F7             l306:
4067   19F7             l304:
4068   19F7               ; 52 drawScreen();
4069   19F7 C3 46 02      jmp drawScreen
4070   19FA             drawInit:
4071   19FA CD 29 25      call radio86rkScreen2a
4072   19FD               ; 16 maxFiles = getMemTop() - START_FILE_BUFFER;
4073   19FD CD 30 F8      call 63536
4074   1A00               ; Сложение
4075   1A00 11 00 CC      lxi d, 52224
4076   1A03 19            dad d
4077   1A04 22 2F 2A      shld maxFiles
4078   1A07               ; 17 maxFiles /= sizeof(FileInfo)*2;
4079   1A07 11 28 00      lxi d, 40
4080   1A0A CD 3B 22      call op_div16
4081   1A0D 22 2F 2A      shld maxFiles
4082   1A10               ; 18 activePanel = 0;
4083   1A10 AF            xra a
4084   1A11 32 29 2D      sta activePanel
4085   1A14               ; 19 fileCursorAddr = 0;  
4086   1A14 21 00 00      lxi h, 0
4087   1A17 22 2A 2D      shld fileCursorAddr
4088   1A1A C9            ret
4089   1A1B               ; --- showTextCursor -----------------------------------------------------------------
4090   1A1B             showTextCursor:
4091   1A1B 32 2E 2D      sta showTextCursor_2
4092   1A1E               ; 1 directCursor(x+1 ? 8+x : 255, 3+y);
4093   1A1E 3A 2D 2D      lda showTextCursor_1
4094   1A21 3C            inr a
4095   1A22 CA 2D 1A      jz l313
4096   1A25 3A 2D 2D      lda showTextCursor_1
4097   1A28 C6 08         adi 8
4098   1A2A C3 2F 1A      jmp l314
4099   1A2D             l313:
4100   1A2D 3E FF         mvi a, 255
4101   1A2F             l314:
4102   1A2F 32 FE 2D      sta directCursor_1
4103   1A32 3A 2E 2D      lda showTextCursor_2
4104   1A35 C6 03         adi 3
4105   1A37 C3 BF 25      jmp directCursor
4106   1A3A             hideTextCursor:
4107   1A3A 3E FF         mvi a, 255
4108   1A3C 32 2D 2D      sta showTextCursor_1
4109   1A3F C3 1B 1A      jmp showTextCursor
4110   1A42             drawSwapPanels:
4111   1A42 21 29 2D      lxi h, activePanel
4112   1A45 3E 20         mvi a, 32
4113   1A47 96            sub m
4114   1A48 32 29 2D      sta activePanel
4115   1A4B C9            ret
4116   1A4C               ; --- hideFileCursor -----------------------------------------------------------------
4117   1A4C             hideFileCursor:
4118   1A4C 2A 2A 2D      lhld fileCursorAddr
4119   1A4F 7D            mov a, l
4120   1A50 B4            ora h
4121   1A51 C2 55 1A      jnz l315
4122   1A54               ; 44 return;
4123   1A54 C9            ret
4124   1A55             l315:
4125   1A55               ; 45 fileCursorAddr[0] = ' ';Сложение с константой 0
4126   1A55 36 20         mvi m, 32
4127   1A57               ; 46 fileCursorAddr[13] = ' ';Сложение
4128   1A57 11 0D 00      lxi d, 13
4129   1A5A 19            dad d
4130   1A5B 36 20         mvi m, 32
4131   1A5D               ; 47 fileCursorAddr = 0;
4132   1A5D 21 00 00      lxi h, 0
4133   1A60 22 2A 2D      shld fileCursorAddr
4134   1A63 C9            ret
4135   1A64               ; --- showFileCursor -----------------------------------------------------------------
4136   1A64             showFileCursor:
4137   1A64 CD 4C 1A      call hideFileCursor
4138   1A67               ; 57 fileCursorAddr = charAddr(panelA.cursorX*15 + 2 + activePanel, 2 + panelA.cursorY);
4139   1A67 16 0F         mvi d, 15
4140   1A69 3A 1D 28      lda (panelA)+(258)
4141   1A6C CD EC 20      call op_mul
4142   1A6F               ; Сложение с константой 2
4143   1A6F 23            inx h
4144   1A70 23            inx h
4145   1A71               ; Сложение
4146   1A71 EB            xchg
4147   1A72 2A 29 2D      lhld activePanel
4148   1A75 26 00         mvi h, 0
4149   1A77 19            dad d
4150   1A78 7D            mov a, l
4151   1A79 32 00 2E      sta charAddr_1
4152   1A7C 3A 1E 28      lda (panelA)+(259)
4153   1A7F C6 02         adi 2
4154   1A81 CD D4 25      call charAddr
4155   1A84 22 2A 2D      shld fileCursorAddr
4156   1A87               ; 58 fileCursorAddr[0]  = '[';Сложение с константой 0
4157   1A87 36 5B         mvi m, 91
4158   1A89               ; 59 fileCursorAddr[13] = ']';Сложение
4159   1A89 11 0D 00      lxi d, 13
4160   1A8C 19            dad d
4161   1A8D 36 5D         mvi m, 93
4162   1A8F C9            ret
4163   1A90               ; --- vLine -----------------------------------------------------------------
4164   1A90             vLine:
4165   1A90 32 32 2D      sta vLine_3
4166   1A93               ; 65 asm {
4167   1A93 C5              push b
4168   1A94 57              mov d, a
4169   1A95 3A 08 2E        lda radio86rkVideoBpl
4170   1A98 4F              mov c, a
4171   1A99 06 00           mvi b, 0
4172   1A9B 3A 31 2D        lda vLine_2
4173   1A9E 5F              mov e, a
4174   1A9F 2A 2F 2D        lhld vLine_1
4175   1AA2             vLine_l0:
4176   1AA2 72              mov m, d
4177   1AA3 09              dad b
4178   1AA4 1D              dcr e 
4179   1AA5 C2 A2 1A        jnz vLine_l0
4180   1AA8 C1              pop b
4181   1AA9               
4182   1AA9 C9            ret
4183   1AAA               ; --- drawRect -----------------------------------------------------------------
4184   1AAA             drawRect:
4185   1AAA 32 36 2D      sta drawRect_3
4186   1AAD               ; 87 a[0] = 0x04; memset(a+1, 0x1C, w); a[w] = 0x10; a += VIDEO_BPL;Сложение с константой 0
4187   1AAD 2A 33 2D      lhld drawRect_1
4188   1AB0 36 04         mvi m, 4
4189   1AB2               ; 87 memset(a+1, 0x1C, w); a[w] = 0x10; a += VIDEO_BPL;Сложение с константой 1
4190   1AB2 23            inx h
4191   1AB3 22 A0 2D      shld memset_1
4192   1AB6 3E 1C         mvi a, 28
4193   1AB8 32 A2 2D      sta memset_2
4194   1ABB 2A 35 2D      lhld drawRect_2
4195   1ABE 26 00         mvi h, 0
4196   1AC0 CD 76 22      call memset
4197   1AC3               ; 87 a[w] = 0x10; a += VIDEO_BPL;Сложение
4198   1AC3 2A 33 2D      lhld drawRect_1
4199   1AC6 EB            xchg
4200   1AC7 2A 35 2D      lhld drawRect_2
4201   1ACA 26 00         mvi h, 0
4202   1ACC 19            dad d
4203   1ACD 36 10         mvi m, 16
4204   1ACF               ; 87 a += VIDEO_BPL;Сложение
4205   1ACF 11 4B 00      lxi d, 75
4206   1AD2 2A 33 2D      lhld drawRect_1
4207   1AD5 19            dad d
4208   1AD6 22 33 2D      shld drawRect_1
4209   1AD9               ; 88 for(i=h; i; --i) {
4210   1AD9 3A 36 2D      lda drawRect_3
4211   1ADC 32 37 2D      sta drawRect_i
4212   1ADF             l316:
4213   1ADF               ; convertToConfition
4214   1ADF 3A 37 2D      lda drawRect_i
4215   1AE2 B7            ora a
4216   1AE3 CA 05 1B      jz l317
4217   1AE6               ; 89 a[0] = 0x06; a[w] = 0x11; a += VIDEO_BPL;Сложение с константой 0
4218   1AE6 2A 33 2D      lhld drawRect_1
4219   1AE9 36 06         mvi m, 6
4220   1AEB               ; 89 a[w] = 0x11; a += VIDEO_BPL;Сложение
4221   1AEB EB            xchg
4222   1AEC 2A 35 2D      lhld drawRect_2
4223   1AEF 26 00         mvi h, 0
4224   1AF1 19            dad d
4225   1AF2 36 11         mvi m, 17
4226   1AF4               ; 89 a += VIDEO_BPL;Сложение
4227   1AF4 11 4B 00      lxi d, 75
4228   1AF7 2A 33 2D      lhld drawRect_1
4229   1AFA 19            dad d
4230   1AFB 22 33 2D      shld drawRect_1
4231   1AFE             l318:
4232   1AFE 21 37 2D      lxi h, drawRect_i
4233   1B01 35            dcr m
4234   1B02 C3 DF 1A      jmp l316
4235   1B05             l317:
4236   1B05               ; 91 a[0] = 0x02; memset(a+1, 0x1C, w); a[w] = 0x01;Сложение с константой 0
4237   1B05 2A 33 2D      lhld drawRect_1
4238   1B08 36 02         mvi m, 2
4239   1B0A               ; 91 memset(a+1, 0x1C, w); a[w] = 0x01;Сложение с константой 1
4240   1B0A 23            inx h
4241   1B0B 22 A0 2D      shld memset_1
4242   1B0E 3E 1C         mvi a, 28
4243   1B10 32 A2 2D      sta memset_2
4244   1B13 2A 35 2D      lhld drawRect_2
4245   1B16 26 00         mvi h, 0
4246   1B18 CD 76 22      call memset
4247   1B1B               ; 91 a[w] = 0x01;Сложение
4248   1B1B 2A 33 2D      lhld drawRect_1
4249   1B1E EB            xchg
4250   1B1F 2A 35 2D      lhld drawRect_2
4251   1B22 26 00         mvi h, 0
4252   1B24 19            dad d
4253   1B25 36 01         mvi m, 1
4254   1B27 C9            ret
4255   1B28               ; --- fillRect -----------------------------------------------------------------
4256   1B28             fillRect:
4257   1B28 32 3C 2D      sta fillRect_4
4258   1B2B               ; 97 asm {
4259   1B2B C5              push b
4260   1B2C 3A 08 2E        lda radio86rkVideoBpl
4261   1B2F 4F              mov c, a
4262   1B30 06 00           mvi b, 0
4263   1B32 2A 38 2D        lhld fillRect_1
4264   1B35 3A 3B 2D        lda fillRect_3
4265   1B38 57              mov d, a
4266   1B39 3A 3C 2D        lda fillRect_4
4267   1B3C 5F              mov e, a
4268   1B3D             fillRect_l1:  
4269   1B3D 3A 3A 2D        lda fillRect_2
4270   1B40 E5              push h
4271   1B41             fillRect_l0:
4272   1B41 73              mov m, e
4273   1B42 23              inx h
4274   1B43 3D              dcr a
4275   1B44 C2 41 1B        jnz fillRect_l0
4276   1B47 E1              pop h
4277   1B48 09              dad b    
4278   1B49 15              dcr d
4279   1B4A C2 3D 1B        jnz fillRect_l1
4280   1B4D C1              pop b
4281   1B4E               
4282   1B4E C9            ret
4283   1B4F               ; --- drawFilesCountInt -----------------------------------------------------------------
4284   1B4F             drawFilesCountInt:
4285   1B4F 22 3F 2D      shld drawFilesCountInt_2
4286   1B52               ; 128 a = charAddr(2+activePanel, 4+ROWS_CNT);
4287   1B52 3A 29 2D      lda activePanel
4288   1B55 C6 02         adi 2
4289   1B57 32 00 2E      sta charAddr_1
4290   1B5A 3E 1A         mvi a, 26
4291   1B5C CD D4 25      call charAddr
4292   1B5F 22 42 2D      shld drawFilesCountInt_a
4293   1B62               ; 129 i2s32((char*)a, total, 10, ' ');
4294   1B62 22 80 2D      shld i2s32_1
4295   1B65 2A 3D 2D      lhld drawFilesCountInt_1
4296   1B68 22 82 2D      shld i2s32_2
4297   1B6B 21 0A 00      lxi h, 10
4298   1B6E 22 84 2D      shld i2s32_3
4299   1B71 3E 20         mvi a, 32
4300   1B73 CD 06 21      call i2s32
4301   1B76               ; 130 print2(a+11, "bajt w    ");Сложение
4302   1B76 2A 42 2D      lhld drawFilesCountInt_a
4303   1B79 11 0B 00      lxi d, 11
4304   1B7C 19            dad d
4305   1B7D 22 02 2E      shld print2_1
4306   1B80 21 90 2F      lxi h, string42
4307   1B83 CD EB 25      call print2
4308   1B86               ; 131 if(filesCnt < 1000) i2s((char*)a+18, filesCnt, 3, ' ');Сложение
4309   1B86 2A 3F 2D      lhld drawFilesCountInt_2
4310   1B89 11 17 FC      lxi d, 64535
4311   1B8C 19            dad d
4312   1B8D DA AB 1B      jc l319
4313   1B90               ; 131 i2s((char*)a+18, filesCnt, 3, ' ');Сложение
4314   1B90 2A 42 2D      lhld drawFilesCountInt_a
4315   1B93 11 12 00      lxi d, 18
4316   1B96 19            dad d
4317   1B97 22 8B 2D      shld i2s_1
4318   1B9A 2A 3F 2D      lhld drawFilesCountInt_2
4319   1B9D 22 8D 2D      shld i2s_2
4320   1BA0 21 03 00      lxi h, 3
4321   1BA3 22 8F 2D      shld i2s_3
4322   1BA6 3E 20         mvi a, 32
4323   1BA8 CD 7C 21      call i2s
4324   1BAB             l319:
4325   1BAB               ; 132 v = filesCnt % 100;
4326   1BAB 11 64 00      lxi d, 100
4327   1BAE 2A 3F 2D      lhld drawFilesCountInt_2
4328   1BB1 CD DB 22      call op_mod16
4329   1BB4 7D            mov a, l
4330   1BB5 32 41 2D      sta drawFilesCountInt_v
4331   1BB8               ; 133 print2(a+22, (!(v >= 10 && v < 20) && v % 10 == 1) ? "fajle " : "fajlah ");Сложение
4332   1BB8 2A 42 2D      lhld drawFilesCountInt_a
4333   1BBB 11 16 00      lxi d, 22
4334   1BBE 19            dad d
4335   1BBF 22 02 2E      shld print2_1
4336   1BC2 FE 0A         cpi 10
4337   1BC4 DA D1 1B      jc l320
4338   1BC7 FE 14         cpi 20
4339   1BC9 D2 D1 1B      jnc l320
4340   1BCC 3E 01         mvi a, 1
4341   1BCE C3 D2 1B      jmp l321
4342   1BD1             l320:
4343   1BD1 AF            xra a
4344   1BD2             l321:
4345   1BD2               ; convertToConfition
4346   1BD2 B7            ora a
4347   1BD3 C2 E8 1B      jnz l322
4348   1BD6 16 0A         mvi d, 10
4349   1BD8 3A 41 2D      lda drawFilesCountInt_v
4350   1BDB CD FE 25      call op_mod
4351   1BDE FE 01         cpi 1
4352   1BE0 C2 E8 1B      jnz l322
4353   1BE3 3E 01         mvi a, 1
4354   1BE5 C3 E9 1B      jmp l323
4355   1BE8             l322:
4356   1BE8 AF            xra a
4357   1BE9             l323:
4358   1BE9 B7            ora a
4359   1BEA CA F3 1B      jz l324
4360   1BED 21 D0 2F      lxi h, string43
4361   1BF0 C3 F6 1B      jmp l325
4362   1BF3             l324:
4363   1BF3 21 C8 2F      lxi h, string44
4364   1BF6             l325:
4365   1BF6 C3 EB 25      jmp print2
4366   1BF9             drawPanel:
4367   1BF9 22 44 2D      shld drawPanel_1
4368   1BFC               ; 139 drawRect(a, 30, ROWS_CNT + 4);
4369   1BFC 22 33 2D      shld drawRect_1
4370   1BFF 3E 1E         mvi a, 30
4371   1C01 32 35 2D      sta drawRect_2
4372   1C04 3E 1A         mvi a, 26
4373   1C06 CD AA 1A      call drawRect
4374   1C09               ; 140 memset(a + (VIDEO_BPL * (2 + ROWS_CNT) + 1), 0x1C, 29); // hLineСложение
4375   1C09 2A 44 2D      lhld drawPanel_1
4376   1C0C 11 09 07      lxi d, 1801
4377   1C0F 19            dad d
4378   1C10 22 A0 2D      shld memset_1
4379   1C13 3E 1C         mvi a, 28
4380   1C15 32 A2 2D      sta memset_2
4381   1C18 21 1D 00      lxi h, 29
4382   1C1B CD 76 22      call memset
4383   1C1E               ; 141 vLine(a + (VIDEO_BPL + 15), ROWS_CNT+1, 0x1B);Сложение
4384   1C1E 2A 44 2D      lhld drawPanel_1
4385   1C21 11 5A 00      lxi d, 90
4386   1C24 19            dad d
4387   1C25 22 2F 2D      shld vLine_1
4388   1C28 3E 17         mvi a, 23
4389   1C2A 32 31 2D      sta vLine_2
4390   1C2D 3E 1B         mvi a, 27
4391   1C2F CD 90 1A      call vLine
4392   1C32               ; 142 print2(a + (VIDEO_BPL + 6 ), "imq");Сложение
4393   1C32 2A 44 2D      lhld drawPanel_1
4394   1C35 11 51 00      lxi d, 81
4395   1C38 19            dad d
4396   1C39 22 02 2E      shld print2_1
4397   1C3C 21 D7 2F      lxi h, string45
4398   1C3F CD EB 25      call print2
4399   1C42               ; 143 print2(a + (VIDEO_BPL + 21), "imq");  Сложение
4400   1C42 2A 44 2D      lhld drawPanel_1
4401   1C45 11 60 00      lxi d, 96
4402   1C48 19            dad d
4403   1C49 22 02 2E      shld print2_1
4404   1C4C 21 D7 2F      lxi h, string45
4405   1C4F C3 EB 25      jmp print2
4406   1C52             drawScreenInt:
4407   1C52 2A 06 2E      lhld radio86rkVideoMem
4408   1C55 22 38 2D      shld fillRect_1
4409   1C58 3E 40         mvi a, 64
4410   1C5A 32 3A 2D      sta fillRect_2
4411   1C5D 3E 1E         mvi a, 30
4412   1C5F 32 3B 2D      sta fillRect_3
4413   1C62 3E 20         mvi a, 32
4414   1C64 CD 28 1B      call fillRect
4415   1C67               ; 154 print(1, ROWS_CNT+7, "F1 FREE F2 NEW  F3 VIEW  F4 EDIT F5 COPY F6 REN  F7 DIR  F8 DEL"); 
4416   1C67 3E 01         mvi a, 1
4417   1C69 32 09 2E      sta print_1
4418   1C6C 3E 1D         mvi a, 29
4419   1C6E 32 0A 2E      sta print_2
4420   1C71 21 13 2F      lxi h, string46
4421   1C74 CD 1B 26      call print
4422   1C77               ; 157 drawPanel(radio86rkVideoMem + 1);Сложение с константой 1
4423   1C77 2A 06 2E      lhld radio86rkVideoMem
4424   1C7A 23            inx h
4425   1C7B CD F9 1B      call drawPanel
4426   1C7E               ; 158 drawPanel(radio86rkVideoMem + 33);Сложение
4427   1C7E 2A 06 2E      lhld radio86rkVideoMem
4428   1C81 11 21 00      lxi d, 33
4429   1C84 19            dad d
4430   1C85 CD F9 1B      call drawPanel
4431   1C88               ; 161 drawPanelTitle(1);
4432   1C88 3E 01         mvi a, 1
4433   1C8A CD 9E 1C      call drawPanelTitle
4434   1C8D               ; 162 swapPanels();
4435   1C8D CD 0F 00      call swapPanels
4436   1C90               ; 163 drawPanelTitle(0);
4437   1C90 AF            xra a
4438   1C91 CD 9E 1C      call drawPanelTitle
4439   1C94               ; 164 swapPanels();
4440   1C94 CD 0F 00      call swapPanels
4441   1C97               ; 167 fileCursorAddr = 0;
4442   1C97 21 00 00      lxi h, 0
4443   1C9A 22 2A 2D      shld fileCursorAddr
4444   1C9D C9            ret
4445   1C9E               ; --- drawPanelTitle -----------------------------------------------------------------
4446   1C9E             drawPanelTitle:
4447   1C9E 32 46 2D      sta drawPanelTitle_1
4448   1CA1               ; 179 memset((char*)charAddr(activePanel + 2, 0), 0x1C, 29);
4449   1CA1 3A 29 2D      lda activePanel
4450   1CA4 C6 02         adi 2
4451   1CA6 32 00 2E      sta charAddr_1
4452   1CA9 AF            xra a
4453   1CAA CD D4 25      call charAddr
4454   1CAD 22 A0 2D      shld memset_1
4455   1CB0 3E 1C         mvi a, 28
4456   1CB2 32 A2 2D      sta memset_2
4457   1CB5 21 1D 00      lxi h, 29
4458   1CB8 CD 76 22      call memset
4459   1CBB               ; 182 p = panelA.path1;
4460   1CBB 21 1D 27      lxi h, (panelA)+(2)
4461   1CBE 22 47 2D      shld drawPanelTitle_p
4462   1CC1               ; 183 if(p[0]==0) p = "/";Сложение с константой 0
4463   1CC1 7E            mov a, m
4464   1CC2 B7            ora a
4465   1CC3 C2 CC 1C      jnz l326
4466   1CC6               ; 183 p = "/";
4467   1CC6 21 FE 2E      lxi h, string21
4468   1CC9 22 47 2D      shld drawPanelTitle_p
4469   1CCC             l326:
4470   1CCC               ; 184 l = strlen(p);
4471   1CCC CD 07 22      call strlen
4472   1CCF 22 49 2D      shld drawPanelTitle_l
4473   1CD2               ; 185 if(l>=27) p=p+(l-27), l=27;Сложение
4474   1CD2 11 E5 FF      lxi d, 65509
4475   1CD5 19            dad d
4476   1CD6 D2 EE 1C      jnc l327
4477   1CD9               ; 185 p=p+(l-27), l=27;Сложение
4478   1CD9 2A 49 2D      lhld drawPanelTitle_l
4479   1CDC 11 E5 FF      lxi d, 65509
4480   1CDF 19            dad d
4481   1CE0               ; Сложение
4482   1CE0 EB            xchg
4483   1CE1 2A 47 2D      lhld drawPanelTitle_p
4484   1CE4 19            dad d
4485   1CE5 22 47 2D      shld drawPanelTitle_p
4486   1CE8 21 1B 00      lxi h, 27
4487   1CEB 22 49 2D      shld drawPanelTitle_l
4488   1CEE             l327:
4489   1CEE               ; 186 x = 2 + (30 - l) / 2 + activePanel;16 битная арифметическая операция с константой
4490   1CEE 2A 49 2D      lhld drawPanelTitle_l
4491   1CF1 3E 1E         mvi a, 30
4492   1CF3 95            sub l
4493   1CF4 6F            mov l, a
4494   1CF5 3E 00         mvi a, 0
4495   1CF7 9C            sbb h
4496   1CF8 67            mov h, a
4497   1CF9 11 02 00      lxi d, 2
4498   1CFC CD 3B 22      call op_div16
4499   1CFF               ; Сложение с константой 2
4500   1CFF 23            inx h
4501   1D00 23            inx h
4502   1D01               ; Сложение
4503   1D01 EB            xchg
4504   1D02 2A 29 2D      lhld activePanel
4505   1D05 26 00         mvi h, 0
4506   1D07 19            dad d
4507   1D08 7D            mov a, l
4508   1D09 32 4B 2D      sta drawPanelTitle_x
4509   1D0C               ; 187 printn(x, 0, l, p);
4510   1D0C 32 0D 2E      sta printn_1
4511   1D0F AF            xra a
4512   1D10 32 0E 2E      sta printn_2
4513   1D13 3A 49 2D      lda drawPanelTitle_l
4514   1D16 32 0F 2E      sta printn_3
4515   1D19 2A 47 2D      lhld drawPanelTitle_p
4516   1D1C CD 33 26      call printn
4517   1D1F               ; 188 if(!active) return;convertToConfition
4518   1D1F 3A 46 2D      lda drawPanelTitle_1
4519   1D22 B7            ora a
4520   1D23 C2 27 1D      jnz l328
4521   1D26               ; 188 return;
4522   1D26 C9            ret
4523   1D27             l328:
4524   1D27               ; 189 print(x-1, 0, "[");
4525   1D27 3A 4B 2D      lda drawPanelTitle_x
4526   1D2A 3D            dcr a
4527   1D2B 32 09 2E      sta print_1
4528   1D2E AF            xra a
4529   1D2F 32 0A 2E      sta print_2
4530   1D32 21 53 2F      lxi h, string47
4531   1D35 CD 1B 26      call print
4532   1D38               ; 190 print(x+l, 0, "]");Сложение
4533   1D38 2A 4B 2D      lhld drawPanelTitle_x
4534   1D3B 26 00         mvi h, 0
4535   1D3D EB            xchg
4536   1D3E 2A 49 2D      lhld drawPanelTitle_l
4537   1D41 19            dad d
4538   1D42 7D            mov a, l
4539   1D43 32 09 2E      sta print_1
4540   1D46 AF            xra a
4541   1D47 32 0A 2E      sta print_2
4542   1D4A 21 8E 2F      lxi h, string48
4543   1D4D C3 1B 26      jmp print
4544   1D50             drawFile2:
4545   1D50 22 4E 2D      shld drawFile2_2
4546   1D53               ; 196 print2n(a, 8, f->fname); 
4547   1D53 2A 4C 2D      lhld drawFile2_1
4548   1D56 22 12 2E      shld print2n_1
4549   1D59 3E 08         mvi a, 8
4550   1D5B 32 14 2E      sta print2n_2
4551   1D5E 2A 4E 2D      lhld drawFile2_2
4552   1D61 CD 51 26      call print2n
4553   1D64               ; 197 a[8] = (f->fattrib&0x80) ? '*' : ((f->fattrib & 0x06) ? 0x7F : ' ');Сложение
4554   1D64 2A 4C 2D      lhld drawFile2_1
4555   1D67 11 08 00      lxi d, 8
4556   1D6A 19            dad d
4557   1D6B               ; Сложение
4558   1D6B E5            push h
4559   1D6C 2A 4E 2D      lhld drawFile2_2
4560   1D6F 11 0B 00      lxi d, 11
4561   1D72 19            dad d
4562   1D73 7E            mov a, m
4563   1D74 E6 80         ani 128
4564   1D76 CA 7E 1D      jz l329
4565   1D79 3E 2A         mvi a, 42
4566   1D7B C3 92 1D      jmp l330
4567   1D7E             l329:
4568   1D7E               ; Сложение
4569   1D7E 2A 4E 2D      lhld drawFile2_2
4570   1D81 11 0B 00      lxi d, 11
4571   1D84 19            dad d
4572   1D85 7E            mov a, m
4573   1D86 E6 06         ani 6
4574   1D88 CA 90 1D      jz l331
4575   1D8B 3E 7F         mvi a, 127
4576   1D8D C3 92 1D      jmp l332
4577   1D90             l331:
4578   1D90 3E 20         mvi a, 32
4579   1D92             l332:
4580   1D92             l330:
4581   1D92 E1            pop h
4582   1D93 77            mov m, a
4583   1D94               ; 198 print2n(a + 9, 3, f->fname + 8); Сложение
4584   1D94 2A 4C 2D      lhld drawFile2_1
4585   1D97 11 09 00      lxi d, 9
4586   1D9A 19            dad d
4587   1D9B 22 12 2E      shld print2n_1
4588   1D9E 3E 03         mvi a, 3
4589   1DA0 32 14 2E      sta print2n_2
4590   1DA3               ; Сложение
4591   1DA3 2A 4E 2D      lhld drawFile2_2
4592   1DA6 11 08 00      lxi d, 8
4593   1DA9 19            dad d
4594   1DAA C3 51 26      jmp print2n
4595   1DAD             drawColumn:
4596   1DAD C5            push b
4597   1DAE 32 50 2D      sta drawColumn_1
4598   1DB1               ; 206 panelA.offset+i*ROWS_CNT;<n>
4599   1DB1 16 16         mvi d, 22
4600   1DB3 CD EC 20      call op_mul
4601   1DB6               ; Сложение
4602   1DB6 EB            xchg
4603   1DB7 2A 1F 28      lhld (panelA)+(260)
4604   1DBA 19            dad d
4605   1DBB 44            mov b, h
4606   1DBC 4D            mov c, l
4607   1DBD               ; 207 panelA.files1 + n;  <f>
4608   1DBD 54            mov d, h
4609   1DBE 5D            mov e, l
4610   1DBF 29            dad h
4611   1DC0 29            dad h
4612   1DC1 19            dad d
4613   1DC2 29            dad h
4614   1DC3 29            dad h
4615   1DC4               ; Сложение
4616   1DC4 EB            xchg
4617   1DC5 2A 1B 27      lhld panelA
4618   1DC8 19            dad d
4619   1DC9 22 54 2D      shld drawColumn_f
4620   1DCC               ; 209 a = charAddr(i*15+3+activePanel,2);
4621   1DCC 16 0F         mvi d, 15
4622   1DCE 3A 50 2D      lda drawColumn_1
4623   1DD1 CD EC 20      call op_mul
4624   1DD4               ; Сложение с константой 3
4625   1DD4 23            inx h
4626   1DD5 23            inx h
4627   1DD6 23            inx h
4628   1DD7               ; Сложение
4629   1DD7 EB            xchg
4630   1DD8 2A 29 2D      lhld activePanel
4631   1DDB 26 00         mvi h, 0
4632   1DDD 19            dad d
4633   1DDE 7D            mov a, l
4634   1DDF 32 00 2E      sta charAddr_1
4635   1DE2 3E 02         mvi a, 2
4636   1DE4 CD D4 25      call charAddr
4637   1DE7 22 51 2D      shld drawColumn_a
4638   1DEA               ; 210 for(y=ROWS_CNT; y; --y, a+=VIDEO_BPL) {
4639   1DEA 3E 16         mvi a, 22
4640   1DEC 32 53 2D      sta drawColumn_y
4641   1DEF             l333:
4642   1DEF               ; convertToConfition
4643   1DEF 3A 53 2D      lda drawColumn_y
4644   1DF2 B7            ora a
4645   1DF3 CA 3F 1E      jz l334
4646   1DF6               ; 211 if(n>=panelA.cnt) {
4647   1DF6 2A 21 28      lhld (panelA)+(262)
4648   1DF9 50            mov d, b
4649   1DFA 59            mov e, c
4650   1DFB CD 00 21      call op_cmp16
4651   1DFE CA 04 1E      jz l337
4652   1E01 D2 17 1E      jnc l336
4653   1E04             l337:
4654   1E04               ; 212 print2cn(a, 12, ' ');
4655   1E04 2A 51 2D      lhld drawColumn_a
4656   1E07 22 17 2E      shld print2cn_1
4657   1E0A 3E 0C         mvi a, 12
4658   1E0C 32 19 2E      sta print2cn_2
4659   1E0F 3E 20         mvi a, 32
4660   1E11 CD 6D 26      call print2cn
4661   1E14               ; 213 continue;
4662   1E14 C3 2E 1E      jmp l335
4663   1E17             l336:
4664   1E17               ; 215 drawFile2(a, f);
4665   1E17 2A 51 2D      lhld drawColumn_a
4666   1E1A 22 4C 2D      shld drawFile2_1
4667   1E1D 2A 54 2D      lhld drawColumn_f
4668   1E20 CD 50 1D      call drawFile2
4669   1E23               ; 216 ++f; ++n; 
4670   1E23 2A 54 2D      lhld drawColumn_f
4671   1E26 11 14 00      lxi d, 20
4672   1E29 19            dad d
4673   1E2A 22 54 2D      shld drawColumn_f
4674   1E2D               ; 216 ++n; 
4675   1E2D 03            inx b
4676   1E2E             l335:
4677   1E2E 21 53 2D      lxi h, drawColumn_y
4678   1E31 35            dcr m
4679   1E32               ; Сложение
4680   1E32 11 4B 00      lxi d, 75
4681   1E35 2A 51 2D      lhld drawColumn_a
4682   1E38 19            dad d
4683   1E39 22 51 2D      shld drawColumn_a
4684   1E3C C3 EF 1D      jmp l333
4685   1E3F             l334:
4686   1E3F C1            pop b
4687   1E40 C9            ret
4688   1E41               ; --- drawFile -----------------------------------------------------------------
4689   1E41             drawFile:
4690   1E41 22 58 2D      shld drawFile_3
4691   1E44               ; 223 drawFile2(charAddr(x*15+3+activePanel, 2+y), f);
4692   1E44 16 0F         mvi d, 15
4693   1E46 3A 56 2D      lda drawFile_1
4694   1E49 CD EC 20      call op_mul
4695   1E4C               ; Сложение с константой 3
4696   1E4C 23            inx h
4697   1E4D 23            inx h
4698   1E4E 23            inx h
4699   1E4F               ; Сложение
4700   1E4F EB            xchg
4701   1E50 2A 29 2D      lhld activePanel
4702   1E53 26 00         mvi h, 0
4703   1E55 19            dad d
4704   1E56 7D            mov a, l
4705   1E57 32 00 2E      sta charAddr_1
4706   1E5A 3A 57 2D      lda drawFile_2
4707   1E5D C6 02         adi 2
4708   1E5F CD D4 25      call charAddr
4709   1E62 22 4C 2D      shld drawFile2_1
4710   1E65 2A 58 2D      lhld drawFile_3
4711   1E68 C3 50 1D      jmp drawFile2
4712   1E6B             drawFileInfo1:
4713   1E6B 22 5A 2D      shld drawFileInfo1_1
4714   1E6E               ; 230 printm(3+activePanel, ROWS_CNT+3, 10, buf);
4715   1E6E 3A 29 2D      lda activePanel
4716   1E71 C6 03         adi 3
4717   1E73 32 1B 2E      sta printm_1
4718   1E76 3E 19         mvi a, 25
4719   1E78 32 1C 2E      sta printm_2
4720   1E7B 3E 0A         mvi a, 10
4721   1E7D 32 1D 2E      sta printm_3
4722   1E80 C3 80 26      jmp printm
4723   1E83             drawFileInfoDir:
4724   1E83 21 34 2E      lxi h, string49
4725   1E86 C3 6B 1E      jmp drawFileInfo1
4726   1E89             drawFileInfo2:
4727   1E89 22 5C 2D      shld drawFileInfo2_1
4728   1E8C               ; 243 printm(14+activePanel, ROWS_CNT+3, 16, buf);
4729   1E8C 3A 29 2D      lda activePanel
4730   1E8F C6 0E         adi 14
4731   1E91 32 1B 2E      sta printm_1
4732   1E94 3E 19         mvi a, 25
4733   1E96 32 1C 2E      sta printm_2
4734   1E99 3E 10         mvi a, 16
4735   1E9B 32 1D 2E      sta printm_3
4736   1E9E C3 80 26      jmp printm
4737   1EA1             drawCmdLineWithPath:
4738   1EA1 C5            push b
4739   1EA2               ; 253 print(1, ROWS_CNT+6, "/");
4740   1EA2 3E 01         mvi a, 1
4741   1EA4 32 09 2E      sta print_1
4742   1EA7 3E 1C         mvi a, 28
4743   1EA9 32 0A 2E      sta print_2
4744   1EAC 21 FE 2E      lxi h, string21
4745   1EAF CD 1B 26      call print
4746   1EB2               ; 254 l = strlen(panelA.path1);
4747   1EB2 21 1D 27      lxi h, (panelA)+(2)
4748   1EB5 CD 07 22      call strlen
4749   1EB8 22 5E 2D      shld drawCmdLineWithPath_l
4750   1EBB               ; 255 if(l>=30) o=l-30, l=30; else o=0;Сложение
4751   1EBB 11 E2 FF      lxi d, 65506
4752   1EBE 19            dad d
4753   1EBF D2 D4 1E      jnc l338
4754   1EC2               ; 255 o=l-30, l=30; else o=0;Сложение
4755   1EC2 2A 5E 2D      lhld drawCmdLineWithPath_l
4756   1EC5 11 E2 FF      lxi d, 65506
4757   1EC8 19            dad d
4758   1EC9 44            mov b, h
4759   1ECA 4D            mov c, l
4760   1ECB 21 1E 00      lxi h, 30
4761   1ECE 22 5E 2D      shld drawCmdLineWithPath_l
4762   1ED1 C3 D7 1E      jmp l339
4763   1ED4             l338:
4764   1ED4               ; 255 o=0;
4765   1ED4 01 00 00      lxi b, 0
4766   1ED7             l339:
4767   1ED7               ; 256 printn(2, ROWS_CNT+6, l, panelA.path1+o);
4768   1ED7 3E 02         mvi a, 2
4769   1ED9 32 0D 2E      sta printn_1
4770   1EDC 3E 1C         mvi a, 28
4771   1EDE 32 0E 2E      sta printn_2
4772   1EE1 3A 5E 2D      lda drawCmdLineWithPath_l
4773   1EE4 32 0F 2E      sta printn_3
4774   1EE7               ; Сложение с BC
4775   1EE7 21 1D 27      lxi h, (panelA)+(2)
4776   1EEA 09            dad b
4777   1EEB CD 33 26      call printn
4778   1EEE               ; 257 print(l+2, ROWS_CNT+6, ">");Сложение с константой 2
4779   1EEE 2A 5E 2D      lhld drawCmdLineWithPath_l
4780   1EF1 23            inx h
4781   1EF2 23            inx h
4782   1EF3 7D            mov a, l
4783   1EF4 32 09 2E      sta print_1
4784   1EF7 3E 1C         mvi a, 28
4785   1EF9 32 0A 2E      sta print_2
4786   1EFC 21 11 2F      lxi h, string50
4787   1EFF CD 1B 26      call print
4788   1F02               ; 260 panelA.cmdLineOff = l+3;Сложение с константой 3
4789   1F02 2A 5E 2D      lhld drawCmdLineWithPath_l
4790   1F05 23            inx h
4791   1F06 23            inx h
4792   1F07 23            inx h
4793   1F08 22 23 28      shld (panelA)+(264)
4794   1F0B               ; 263 drawCmdLine();
4795   1F0B CD D5 1F      call drawCmdLine
4796   1F0E C1            pop b
4797   1F0F C9            ret
4798   1F10               ; --- drawWindow -----------------------------------------------------------------
4799   1F10             drawWindow:
4800   1F10 C5            push b
4801   1F11 22 62 2D      shld drawWindow_1
4802   1F14               ; 272 hideTextCursor();
4803   1F14 CD 3A 1A      call hideTextCursor
4804   1F17               ; 274 fillRect(charAddr(WINDOW_X-5,WINDOW_Y-3), 49, 11, ' ');
4805   1F17 3E 08         mvi a, 8
4806   1F19 32 00 2E      sta charAddr_1
4807   1F1C CD D4 25      call charAddr
4808   1F1F 22 38 2D      shld fillRect_1
4809   1F22 3E 31         mvi a, 49
4810   1F24 32 3A 2D      sta fillRect_2
4811   1F27 3E 0B         mvi a, 11
4812   1F29 32 3B 2D      sta fillRect_3
4813   1F2C 3E 20         mvi a, 32
4814   1F2E CD 28 1B      call fillRect
4815   1F31               ; 275 drawRect(charAddr(WINDOW_X-4,WINDOW_Y-2), 46, 7);
4816   1F31 3E 09         mvi a, 9
4817   1F33 32 00 2E      sta charAddr_1
4818   1F36 CD D4 25      call charAddr
4819   1F39 22 33 2D      shld drawRect_1
4820   1F3C 3E 2E         mvi a, 46
4821   1F3E 32 35 2D      sta drawRect_2
4822   1F41 3E 07         mvi a, 7
4823   1F43 CD AA 1A      call drawRect
4824   1F46               ; 277 print((64-strlen(title)) >> 1, WINDOW_Y-2, title);
4825   1F46 2A 62 2D      lhld drawWindow_1
4826   1F49 CD 07 22      call strlen
4827   1F4C               ; 16 битная арифметическая операция с константой
4828   1F4C 3E 40         mvi a, 64
4829   1F4E 95            sub l
4830   1F4F 6F            mov l, a
4831   1F50 3E 00         mvi a, 0
4832   1F52 9C            sbb h
4833   1F53 67            mov h, a
4834   1F54               ; Сдвиг на 1 вправо
4835   1F54 7C            mov a, h
4836   1F55 BF            cmp a
4837   1F56 1F            rar
4838   1F57 67            mov h, a
4839   1F58 7D            mov a, l
4840   1F59 1F            rar
4841   1F5A 6F            mov l, a
4842   1F5B 7D            mov a, l
4843   1F5C 32 09 2E      sta print_1
4844   1F5F 3E 09         mvi a, 9
4845   1F61 32 0A 2E      sta print_2
4846   1F64 2A 62 2D      lhld drawWindow_1
4847   1F67 CD 1B 26      call print
4848   1F6A C1            pop b
4849   1F6B C9            ret
4850   1F6C               ; --- drawAnyKeyButton -----------------------------------------------------------------
4851   1F6C             drawAnyKeyButton:
4852   1F6C 3E 1B         mvi a, 27
4853   1F6E 32 09 2E      sta print_1
4854   1F71 3E 0F         mvi a, 15
4855   1F73 32 0A 2E      sta print_2
4856   1F76 21 55 2F      lxi h, string51
4857   1F79 C3 1B 26      jmp print
4858   1F7C             drawEscButton:
4859   1F7C 3E 19         mvi a, 25
4860   1F7E 32 09 2E      sta print_1
4861   1F81 3E 0F         mvi a, 15
4862   1F83 32 0A 2E      sta print_2
4863   1F86 21 61 2F      lxi h, string52
4864   1F89 C3 1B 26      jmp print
4865   1F8C             drawWindowText:
4866   1F8C 22 66 2D      shld drawWindowText_3
4867   1F8F               ; 297 printn(WINDOW_X+ox, WINDOW_Y+oy, 40-ox, text);
4868   1F8F 3A 64 2D      lda drawWindowText_1
4869   1F92 C6 0D         adi 13
4870   1F94 32 0D 2E      sta printn_1
4871   1F97 3A 65 2D      lda drawWindowText_2
4872   1F9A C6 0B         adi 11
4873   1F9C 32 0E 2E      sta printn_2
4874   1F9F               ; Арифметика 3/4
4875   1F9F 21 64 2D      lxi h, drawWindowText_1
4876   1FA2 3E 28         mvi a, 40
4877   1FA4 96            sub m
4878   1FA5 32 0F 2E      sta printn_3
4879   1FA8 2A 66 2D      lhld drawWindowText_3
4880   1FAB C3 33 26      jmp printn
4881   1FAE             drawWindowProgress:
4882   1FAE 32 6B 2D      sta drawWindowProgress_4
4883   1FB1               ; 304 if(n==0) return;
4884   1FB1 3A 6A 2D      lda drawWindowProgress_3
4885   1FB4 B7            ora a
4886   1FB5 C2 B9 1F      jnz l340
4887   1FB8               ; 304 return;
4888   1FB8 C9            ret
4889   1FB9             l340:
4890   1FB9               ; 305 printcn(WINDOW_X+ox, WINDOW_Y+oy, n, chr);
4891   1FB9 3A 68 2D      lda drawWindowProgress_1
4892   1FBC C6 0D         adi 13
4893   1FBE 32 20 2E      sta printcn_1
4894   1FC1 3A 69 2D      lda drawWindowProgress_2
4895   1FC4 C6 0B         adi 11
4896   1FC6 32 21 2E      sta printcn_2
4897   1FC9 3A 6A 2D      lda drawWindowProgress_3
4898   1FCC 32 22 2E      sta printcn_3
4899   1FCF 3A 6B 2D      lda drawWindowProgress_4
4900   1FD2 C3 9E 26      jmp printcn
4901   1FD5             drawCmdLine:
4902   1FD5 3A 23 28      lda (panelA)+(264)
4903   1FD8 32 6C 2D      sta drawInput_1
4904   1FDB 3E 1C         mvi a, 28
4905   1FDD 32 6D 2D      sta drawInput_2
4906   1FE0               ; 16 битная арифметическая операция с константой
4907   1FE0 2A 23 28      lhld (panelA)+(264)
4908   1FE3 3E 3E         mvi a, 62
4909   1FE5 95            sub l
4910   1FE6 6F            mov l, a
4911   1FE7 3E 00         mvi a, 0
4912   1FE9 9C            sbb h
4913   1FEA 67            mov h, a
4914   1FEB 7D            mov a, l
4915   1FEC C3 EF 1F      jmp drawInput
4916   1FEF             drawInput:
4917   1FEF C5            push b
4918   1FF0 32 6E 2D      sta drawInput_3
4919   1FF3               ; 322 cmdline_pos = strlen(cmdline);
4920   1FF3 21 2F 29      lxi h, cmdline
4921   1FF6 CD 07 22      call strlen
4922   1FF9 22 75 2D      shld drawInput_cmdline_pos
4923   1FFC               ; 323 --max;
4924   1FFC 21 6E 2D      lxi h, drawInput_3
4925   1FFF 35            dcr m
4926   2000               ; 324 if(cmdline_pos < max) cmdline_offset = 0; else cmdline_offset = cmdline_pos-max;
4927   2000 2A 75 2D      lhld drawInput_cmdline_pos
4928   2003 EB            xchg
4929   2004 2A 6E 2D      lhld drawInput_3
4930   2007 26 00         mvi h, 0
4931   2009 CD 00 21      call op_cmp16
4932   200C DA 1B 20      jc l341
4933   200F CA 1B 20      jz l341
4934   2012               ; 324 cmdline_offset = 0; else cmdline_offset = cmdline_pos-max;
4935   2012 21 00 00      lxi h, 0
4936   2015 22 73 2D      shld drawInput_cmdline_offset
4937   2018 C3 2D 20      jmp l342
4938   201B             l341:
4939   201B               ; 324 cmdline_offset = cmdline_pos-max;16 битная арифметическая операция с константой
4940   201B 2A 6E 2D      lhld drawInput_3
4941   201E 26 00         mvi h, 0
4942   2020 EB            xchg
4943   2021 2A 75 2D      lhld drawInput_cmdline_pos
4944   2024 7D            mov a, l
4945   2025 93            sub e
4946   2026 6F            mov l, a
4947   2027 7C            mov a, h
4948   2028 9A            sbb d
4949   2029 67            mov h, a
4950   202A 22 73 2D      shld drawInput_cmdline_offset
4951   202D             l342:
4952   202D               ; 325 c1 = cmdline_pos - cmdline_offset;16 битная арифметическая операция с константой
4953   202D 2A 73 2D      lhld drawInput_cmdline_offset
4954   2030 EB            xchg
4955   2031 2A 75 2D      lhld drawInput_cmdline_pos
4956   2034 7D            mov a, l
4957   2035 93            sub e
4958   2036 6F            mov l, a
4959   2037 7C            mov a, h
4960   2038 9A            sbb d
4961   2039 67            mov h, a
4962   203A 22 6F 2D      shld drawInput_c1
4963   203D               ; 326 cmdline[cmdline_pos] = 0;Сложение
4964   203D 2A 75 2D      lhld drawInput_cmdline_pos
4965   2040 11 2F 29      lxi d, cmdline
4966   2043 19            dad d
4967   2044 36 00         mvi m, 0
4968   2046               ; 327 ++c1;
4969   2046 2A 6F 2D      lhld drawInput_c1
4970   2049 23            inx h
4971   204A 22 6F 2D      shld drawInput_c1
4972   204D               ; 328 if(c1 > max) c1 = max;
4973   204D EB            xchg
4974   204E 2A 6E 2D      lhld drawInput_3
4975   2051 26 00         mvi h, 0
4976   2053 CD 00 21      call op_cmp16
4977   2056 D2 61 20      jnc l343
4978   2059               ; 328 c1 = max;
4979   2059 2A 6E 2D      lhld drawInput_3
4980   205C 26 00         mvi h, 0
4981   205E 22 6F 2D      shld drawInput_c1
4982   2061             l343:
4983   2061               ; 329 ++c1;
4984   2061 2A 6F 2D      lhld drawInput_c1
4985   2064 23            inx h
4986   2065 22 6F 2D      shld drawInput_c1
4987   2068               ; 330 ++max;
4988   2068 21 6E 2D      lxi h, drawInput_3
4989   206B 34            inr m
4990   206C               ; 331 printm(x, y, max, cmdline + cmdline_offset);
4991   206C 3A 6C 2D      lda drawInput_1
4992   206F 32 1B 2E      sta printm_1
4993   2072 3A 6D 2D      lda drawInput_2
4994   2075 32 1C 2E      sta printm_2
4995   2078 3A 6E 2D      lda drawInput_3
4996   207B 32 1D 2E      sta printm_3
4997   207E               ; Сложение
4998   207E 2A 73 2D      lhld drawInput_cmdline_offset
4999   2081 11 2F 29      lxi d, cmdline
5000   2084 19            dad d
5001   2085 CD 80 26      call printm
5002   2088               ; 334 showTextCursor(x+cmdline_pos-cmdline_offset, y);Сложение
5003   2088 2A 6C 2D      lhld drawInput_1
5004   208B 26 00         mvi h, 0
5005   208D EB            xchg
5006   208E 2A 75 2D      lhld drawInput_cmdline_pos
5007   2091 19            dad d
5008   2092               ; 16 битная арифметическая операция с константой
5009   2092 EB            xchg
5010   2093 2A 73 2D      lhld drawInput_cmdline_offset
5011   2096 EB            xchg
5012   2097 7D            mov a, l
5013   2098 93            sub e
5014   2099 6F            mov l, a
5015   209A 7C            mov a, h
5016   209B 9A            sbb d
5017   209C 67            mov h, a
5018   209D 7D            mov a, l
5019   209E 32 2D 2D      sta showTextCursor_1
5020   20A1 3A 6D 2D      lda drawInput_2
5021   20A4 CD 1B 1A      call showTextCursor
5022   20A7 C1            pop b
5023   20A8 C9            ret
5024   20A9               ; --- drawWindowInput -----------------------------------------------------------------
5025   20A9             drawWindowInput:
5026   20A9 32 79 2D      sta drawWindowInput_3
5027   20AC               ; 340 drawInput(WINDOW_X+x, WINDOW_Y+y, max);
5028   20AC 3A 77 2D      lda drawWindowInput_1
5029   20AF C6 0D         adi 13
5030   20B1 32 6C 2D      sta drawInput_1
5031   20B4 3A 78 2D      lda drawWindowInput_2
5032   20B7 C6 0B         adi 11
5033   20B9 32 6D 2D      sta drawInput_2
5034   20BC 3A 79 2D      lda drawWindowInput_3
5035   20BF C3 EF 1F      jmp drawInput
5036   20C2             getch1:
5037   20C2 C3 03 F8      jmp 63491
5038   20C5 C9            ret
5039   20C6               ; --- bioskey1 -----------------------------------------------------------------
5040   20C6             bioskey1:
5041   20C6 C3 1B F8      jmp 63515
5042   20C9 C9            ret
5043   20CA               ; --- memswap -----------------------------------------------------------------
5044   20CA             memswap:
5045   20CA 22 7E 2D      shld memswap_3
5046   20CD               ; 2 asm {
5047   20CD C5              push b
5048   20CE                 ; de = count
5049   20CE EB              xchg
5050   20CF                 ; bc = from
5051   20CF 2A 7C 2D        lhld memswap_2
5052   20D2 4D              mov c, l
5053   20D3 44              mov b, h
5054   20D4                 ; hl = to
5055   20D4 2A 7A 2D        lhld memswap_1
5056   20D7             memswap_l1:
5057   20D7                 ; if(cnt==0) return
5058   20D7 7A              mov a, d
5059   20D8 B3              ora e
5060   20D9 CA EA 20        jz memswap_l2
5061   20DC                 ; *dest = *src
5062   20DC 0A              ldax b
5063   20DD 32 E3 20        sta memswap_v1
5064   20E0 7E              mov a, m
5065   20E1 02              stax b
5066   20E2 36              .db 36h ; mvi m, 0
5067   20E3             memswap_v1:
5068   20E3 00              .db 0    
5069   20E4                 ; dest++, src++, cnt--
5070   20E4 23              inx h
5071   20E5 03              inx b
5072   20E6 1B              dcx d
5073   20E7                 ; loop
5074   20E7 C3 D7 20        jmp memswap_l1
5075   20EA             memswap_l2:
5076   20EA C1              pop b
5077   20EB               
5078   20EB C9            ret
5079   20EC               ; --- op_mul -----------------------------------------------------------------
5080   20EC             op_mul:
5081   20EC C5            push b
5082   20ED 21 00 00      lxi h, 0
5083   20F0 5A            mov e, d  ; de=d
5084   20F1 55            mov d, l  
5085   20F2 0E 08         mvi c, 8
5086   20F4             op_mul1:
5087   20F4 29            dad h
5088   20F5 87            add a
5089   20F6 D2 FA 20      jnc op_mul2
5090   20F9 19              dad d
5091   20FA             op_mul2:
5092   20FA 0D            dcr c
5093   20FB C2 F4 20      jnz op_mul1
5094   20FE             pop_bc_ret:
5095   20FE C1            pop b
5096   20FF             
5097   20FF C9            ret
5098   2100               ; --- op_cmp16 -----------------------------------------------------------------
5099   2100             op_cmp16:
5100   2100 7C              mov a, h
5101   2101 BA              cmp d
5102   2102 C0              rnz
5103   2103 7D              mov a, l
5104   2104 BB              cmp e
5105   2105               
5106   2105 C9            ret
5107   2106               ; --- i2s32 -----------------------------------------------------------------
5108   2106             i2s32:
5109   2106 32 86 2D      sta i2s32_4
5110   2109               ; 7 set32(&v, src);
5111   2109 21 87 2D      lxi h, i2s32_v
5112   210C 22 DF 2D      shld set32_1
5113   210F 2A 82 2D      lhld i2s32_2
5114   2112 CD FE 23      call set32
5115   2115               ; 9 buf += n;  Сложение
5116   2115 2A 84 2D      lhld i2s32_3
5117   2118 EB            xchg
5118   2119 2A 80 2D      lhld i2s32_1
5119   211C 19            dad d
5120   211D 22 80 2D      shld i2s32_1
5121   2120               ; 10 *buf = 0;
5122   2120 36 00         mvi m, 0
5123   2122               ; 12 while(1) {
5124   2122             l344:
5125   2122               ; 13 div32_16(&v, 10);
5126   2122 21 87 2D      lxi h, i2s32_v
5127   2125 22 E3 2D      shld div32_16_1
5128   2128 21 0A 00      lxi h, 10
5129   212B CD 14 24      call div32_16
5130   212E               ; 14 --buf;
5131   212E 2A 80 2D      lhld i2s32_1
5132   2131 2B            dcx h
5133   2132 22 80 2D      shld i2s32_1
5134   2135               ; 15 *buf = "0123456789ABCDEF"[op_div16_mod];Сложение
5135   2135 2A 9E 2D      lhld op_div16_mod
5136   2138 11 00 2F      lxi d, string53
5137   213B 19            dad d
5138   213C 7E            mov a, m
5139   213D 2A 80 2D      lhld i2s32_1
5140   2140 77            mov m, a
5141   2141               ; 16 if(--n == 0) return;
5142   2141 2A 84 2D      lhld i2s32_3
5143   2144 2B            dcx h
5144   2145 22 84 2D      shld i2s32_3
5145   2148               ; Сложение с константой 0
5146   2148 7D            mov a, l
5147   2149 B4            ora h
5148   214A C2 4E 21      jnz l346
5149   214D               ; 16 return;
5150   214D C9            ret
5151   214E             l346:
5152   214E               ; 17 if(((ushort*)&v)[0] == 0 && ((ushort*)&v)[1] == 0) break;Сложение с константой 0
5153   214E 2A 87 2D      lhld (i2s32_v)+(0)
5154   2151 7D            mov a, l
5155   2152 B4            ora h
5156   2153 C2 5E 21      jnz l347
5157   2156               ; Сложение с константой 0
5158   2156 2A 89 2D      lhld (i2s32_v)+(2)
5159   2159 7D            mov a, l
5160   215A B4            ora h
5161   215B CA 61 21      jz l345
5162   215E             l347:
5163   215E C3 22 21      jmp l344
5164   2161             l345:
5165   2161               ; 20 while(1) {
5166   2161             l348:
5167   2161               ; 21 --buf;
5168   2161 2A 80 2D      lhld i2s32_1
5169   2164 2B            dcx h
5170   2165 22 80 2D      shld i2s32_1
5171   2168               ; 22 *buf = spc;
5172   2168 3A 86 2D      lda i2s32_4
5173   216B 77            mov m, a
5174   216C               ; 23 if(--n == 0) break;
5175   216C 2A 84 2D      lhld i2s32_3
5176   216F 2B            dcx h
5177   2170 22 84 2D      shld i2s32_3
5178   2173               ; Сложение с константой 0
5179   2173 7D            mov a, l
5180   2174 B4            ora h
5181   2175 CA 7B 21      jz l349
5182   2178 C3 61 21      jmp l348
5183   217B             l349:
5184   217B C9            ret
5185   217C               ; --- i2s -----------------------------------------------------------------
5186   217C             i2s:
5187   217C 32 91 2D      sta i2s_4
5188   217F               ; 4 buf += n;  Сложение
5189   217F 2A 8F 2D      lhld i2s_3
5190   2182 EB            xchg
5191   2183 2A 8B 2D      lhld i2s_1
5192   2186 19            dad d
5193   2187 22 8B 2D      shld i2s_1
5194   218A               ; 5 *buf = 0;
5195   218A 36 00         mvi m, 0
5196   218C               ; 6 while(1) {
5197   218C             l351:
5198   218C               ; 7 v /= 10;
5199   218C 11 0A 00      lxi d, 10
5200   218F 2A 8D 2D      lhld i2s_2
5201   2192 CD 3B 22      call op_div16
5202   2195 22 8D 2D      shld i2s_2
5203   2198               ; 8 --buf;
5204   2198 2A 8B 2D      lhld i2s_1
5205   219B 2B            dcx h
5206   219C 22 8B 2D      shld i2s_1
5207   219F               ; 9 *buf = "0123456789ABCDEF"[op_div16_mod];Сложение
5208   219F 2A 9E 2D      lhld op_div16_mod
5209   21A2 11 00 2F      lxi d, string53
5210   21A5 19            dad d
5211   21A6 7E            mov a, m
5212   21A7 2A 8B 2D      lhld i2s_1
5213   21AA 77            mov m, a
5214   21AB               ; 10 --n;
5215   21AB 2A 8F 2D      lhld i2s_3
5216   21AE 2B            dcx h
5217   21AF 22 8F 2D      shld i2s_3
5218   21B2               ; 11 if(n == 0) return;Сложение с константой 0
5219   21B2 7D            mov a, l
5220   21B3 B4            ora h
5221   21B4 C2 B8 21      jnz l353
5222   21B7               ; 11 return;
5223   21B7 C9            ret
5224   21B8             l353:
5225   21B8               ; 12 if(v == 0) break;Сложение с константой 0
5226   21B8 2A 8D 2D      lhld i2s_2
5227   21BB 7D            mov a, l
5228   21BC B4            ora h
5229   21BD CA C3 21      jz l352
5230   21C0 C3 8C 21      jmp l351
5231   21C3             l352:
5232   21C3               ; 14 while(1) {
5233   21C3             l355:
5234   21C3               ; 15 --buf;
5235   21C3 2A 8B 2D      lhld i2s_1
5236   21C6 2B            dcx h
5237   21C7 22 8B 2D      shld i2s_1
5238   21CA               ; 16 *buf = spc;
5239   21CA 3A 91 2D      lda i2s_4
5240   21CD 77            mov m, a
5241   21CE               ; 17 if(--n == 0) break;
5242   21CE 2A 8F 2D      lhld i2s_3
5243   21D1 2B            dcx h
5244   21D2 22 8F 2D      shld i2s_3
5245   21D5               ; Сложение с константой 0
5246   21D5 7D            mov a, l
5247   21D6 B4            ora h
5248   21D7 CA DD 21      jz l356
5249   21DA C3 C3 21      jmp l355
5250   21DD             l356:
5251   21DD C9            ret
5252   21DE               ; --- op_shr16 -----------------------------------------------------------------
5253   21DE             op_shr16:
5254   21DE 1C            inr e
5255   21DF             op_shr16_l:
5256   21DF 1D            dcr e
5257   21E0 C8            rz
5258   21E1 97            sub a
5259   21E2 B4            ora h 
5260   21E3 1F            rar
5261   21E4 67            mov h, a
5262   21E5 7D            mov a, l
5263   21E6 1F            rar
5264   21E7 6F            mov l, a
5265   21E8 C3 DF 21      jmp op_shr16_l
5266   21EB             
5267   21EB C9            ret
5268   21EC               ; --- add32_32 -----------------------------------------------------------------
5269   21EC             add32_32:
5270   21EC 22 94 2D      shld add32_32_2
5271   21EF               ; 4 asm {   
5272   21EF                
5273   21EF                 ; hl = add32_32_2   
5274   21EF EB              xchg
5275   21F0 2A 92 2D        lhld add32_32_1
5276   21F3 EB              xchg
5277   21F4             
5278   21F4 1A              ldax d
5279   21F5 86              add  m
5280   21F6 12              stax d
5281   21F7 23              inx  h
5282   21F8 13              inx  d
5283   21F9 1A              ldax d
5284   21FA 8E              adc  m
5285   21FB 12              stax d
5286   21FC 23              inx  h
5287   21FD 13              inx  d
5288   21FE 1A              ldax d
5289   21FF 8E              adc  m
5290   2200 12              stax d
5291   2201 23              inx  h
5292   2202 13              inx  d
5293   2203 1A              ldax d
5294   2204 8E              adc  m
5295   2205 12              stax d
5296   2206               
5297   2206 C9            ret
5298   2207               ; --- strlen -----------------------------------------------------------------
5299   2207             strlen:
5300   2207 22 96 2D      shld strlen_1
5301   220A               ; 2 asm { 
5302   220A              
5303   220A 11 FF FF        lxi d, -1
5304   220D             strlen_l1:
5305   220D AF              xra a
5306   220E B6              ora m
5307   220F 13              inx d
5308   2210 23              inx h
5309   2211 C2 0D 22        jnz strlen_l1
5310   2214 EB              xchg
5311   2215               
5312   2215 C9            ret
5313   2216               ; --- memcmp -----------------------------------------------------------------
5314   2216             memcmp:
5315   2216 22 9C 2D      shld memcmp_3
5316   2219               ; 2 asm {
5317   2219                 ; if(len==0) return 0;
5318   2219 7D              mov a, l
5319   221A B4              ora h
5320   221B C8              rz
5321   221C C5              push b
5322   221D                 ; de = len
5323   221D EB              xchg
5324   221E                 ; bc = d
5325   221E 2A 98 2D        lhld memcmp_1
5326   2221 44              mov b, h
5327   2222 4D              mov c, l
5328   2223                 ; hl = s
5329   2223 2A 9A 2D        lhld memcmp_2
5330   2226                 ; loop
5331   2226             memcmp_l1:
5332   2226 0A                ldax b
5333   2227 BE                cmp m
5334   2228 C2 35 22          jnz memcmp_stop
5335   222B 23                inx h
5336   222C 03                inx b
5337   222D 1B                dcx d
5338   222E 7A                mov a, d
5339   222F B3                ora e
5340   2230 C2 26 22        jnz memcmp_l1
5341   2233 C1              pop b
5342   2234                 ; a=0
5343   2234 C9              ret
5344   2235             memcmp_stop:
5345   2235 C1              pop b
5346   2236 9F              sbb a
5347   2237 D8              rc
5348   2238 3C              inr a
5349   2239 C9              ret
5350   223A               
5351   223A C9            ret
5352   223B               ; --- op_div16 -----------------------------------------------------------------
5353   223B             op_div16:
5354   223B C5                  PUSH B
5355   223C EB                  XCHG
5356   223D CD 47 22            CALL _DIV0
5357   2240 EB                  XCHG
5358   2241 22 9E 2D            SHLD op_div16_mod
5359   2244 EB                  XCHG
5360   2245 C1                  POP B
5361   2246 C9                  RET
5362   2247             
5363   2247             _DIV0:
5364   2247 7C          _DIV:	MOV A,H
5365   2248 B5          	ORA L
5366   2249 C8          	RZ
5367   224A 01 00 00    	LXI B,0000
5368   224D C5          	PUSH B
5369   224E 7B          _DIV1:	MOV A,E
5370   224F 95          	SUB L
5371   2250 7A          	MOV A,D
5372   2251 9C          	SBB H
5373   2252 DA 5A 22    	JC _DIV2
5374   2255 E5          	PUSH H
5375   2256 29          	DAD H
5376   2257 D2 4E 22    	JNC _DIV1
5377   225A 21 00 00    _DIV2:	LXI H,0000
5378   225D C1          _DIV3:	POP B
5379   225E 78          	MOV A,B
5380   225F B1          	ORA C
5381   2260 C8          	RZ
5382   2261 29          	DAD H
5383   2262 D5          	PUSH D
5384   2263 7B          	MOV A,E
5385   2264 91          	SUB C
5386   2265 5F          	MOV E,A
5387   2266 7A          	MOV A,D
5388   2267 98          	SBB B
5389   2268 57          	MOV D,A
5390   2269 DA 71 22    	JC _DIV4
5391   226C 23          	INX H
5392   226D C1          	POP B
5393   226E C3 5D 22    	JMP _DIV3
5394   2271 D1          _DIV4:	POP D
5395   2272 C3 5D 22    	JMP _DIV3  
5396   2275               
5397   2275 C9            ret
5398   2276               ; --- memset -----------------------------------------------------------------
5399   2276             memset:
5400   2276 22 A3 2D      shld memset_3
5401   2279               ; 2 asm {
5402   2279 C5              push b
5403   227A 3A A2 2D        lda memset_2
5404   227D EB              xchg
5405   227E 2A A0 2D        lhld memset_1
5406   2281 EB              xchg
5407   2282 01 FF FF        lxi b, -1    
5408   2285             memset_l1:
5409   2285 09              dad b
5410   2286 D2 8E 22        jnc memset_l2
5411   2289 12              stax d
5412   228A 13              inx d
5413   228B C3 85 22        jmp memset_l1
5414   228E             memset_l2:
5415   228E C1              pop b
5416   228F               
5417   228F C9            ret
5418   2290               ; --- memcpy -----------------------------------------------------------------
5419   2290             memcpy:
5420   2290 22 A9 2D      shld memcpy_3
5421   2293               ; 2 asm {
5422   2293                 ; if(cnt==0) return
5423   2293 7C              mov a, h
5424   2294 B5              ora l
5425   2295 C8              rz
5426   2296                 ; start
5427   2296 C5              push b
5428   2297                 ; de = count
5429   2297 EB              xchg
5430   2298                 ; bc = from
5431   2298 2A A7 2D        lhld memcpy_2
5432   229B 4D              mov c, l
5433   229C 44              mov b, h
5434   229D                 ; hl = to
5435   229D 2A A5 2D        lhld memcpy_1
5436   22A0                 ; enter loop
5437   22A0 14              inr d
5438   22A1 AF              xra a
5439   22A2 B3              ora e
5440   22A3 CA AE 22        jz memcpy_l2
5441   22A6             memcpy_l1:
5442   22A6                 ; *dest = *src
5443   22A6 0A              ldax b
5444   22A7 77              mov m, a
5445   22A8                 ; dest++, src++
5446   22A8 23              inx h
5447   22A9 03              inx b
5448   22AA                 ; while(--cnt)
5449   22AA 1D              dcr e
5450   22AB C2 A6 22        jnz memcpy_l1
5451   22AE             memcpy_l2:
5452   22AE 15              dcr d
5453   22AF C2 A6 22        jnz memcpy_l1
5454   22B2 C1              pop b
5455   22B3               
5456   22B3 C9            ret
5457   22B4               ; --- fs_findfirst -----------------------------------------------------------------
5458   22B4             fs_findfirst:
5459   22B4 22 AF 2D      shld fs_findfirst_3
5460   22B7               ; 4 if(path[0] == '/') path++;Сложение с константой 0
5461   22B7 2A AB 2D      lhld fs_findfirst_1
5462   22BA 7E            mov a, m
5463   22BB FE 2F         cpi 47
5464   22BD C2 C7 22      jnz l358
5465   22C0               ; 4 path++;
5466   22C0 54            mov d, h
5467   22C1 5D            mov e, l
5468   22C2 23            inx h
5469   22C3 22 AB 2D      shld fs_findfirst_1
5470   22C6 EB            xchg
5471   22C7             l358:
5472   22C7               ; 5 asm {
5473   22C7 C5              PUSH B
5474   22C8                 ; hl = fs_findfirst_3
5475   22C8 EB              XCHG
5476   22C9 2A AD 2D        LHLD fs_findfirst_2
5477   22CC 44              MOV  B, H  
5478   22CD 4D              MOV  C, L
5479   22CE 2A AB 2D        LHLD fs_findfirst_1 
5480   22D1 3E 01           MVI  A, 1
5481   22D3 CD EB 23        CALL fs_entry
5482   22D6 22 DA 2D        SHLD fs_low
5483   22D9 C1              POP  B
5484   22DA               
5485   22DA C9            ret
5486   22DB               ; --- op_mod16 -----------------------------------------------------------------
5487   22DB             op_mod16:
5488   22DB CD 3B 22      call op_div16
5489   22DE               ; 5 asm {
5490   22DE 2A 9E 2D        lhld op_div16_mod;
5491   22E1               
5492   22E1 C9            ret
5493   22E2               ; --- strcpy -----------------------------------------------------------------
5494   22E2             strcpy:
5495   22E2 22 B3 2D      shld strcpy_2
5496   22E5               ; 2 asm {
5497   22E5                 ; de = src
5498   22E5 EB              xchg
5499   22E6                 ; hl = to
5500   22E6 2A B1 2D        lhld strcpy_1
5501   22E9             strcpy_l1:
5502   22E9                 ; *dest = *src
5503   22E9 1A              ldax d
5504   22EA 77              mov m, a
5505   22EB B7              ora a
5506   22EC 23              inx h
5507   22ED 13              inx d
5508   22EE C2 E9 22        jnz strcpy_l1
5509   22F1 2B              dcx h
5510   22F2               
5511   22F2 C9            ret
5512   22F3               ; --- memcpy_back -----------------------------------------------------------------
5513   22F3             memcpy_back:
5514   22F3 22 B9 2D      shld memcpy_back_3
5515   22F6               ; 2 asm {
5516   22F6                 ; if(cnt==0) return
5517   22F6 7C              mov a, h
5518   22F7 B5              ora l
5519   22F8 C8              rz
5520   22F9                 ; start
5521   22F9 C5              push b
5522   22FA                 ; de = count
5523   22FA EB              xchg
5524   22FB                 ; bc = from
5525   22FB 2A B7 2D        lhld memcpy_back_2
5526   22FE 19              dad d
5527   22FF 4D              mov c, l
5528   2300 44              mov b, h
5529   2301                 ; hl = to
5530   2301 2A B5 2D        lhld memcpy_back_1
5531   2304 19              dad d
5532   2305                 ; enter loop
5533   2305 14              inr d
5534   2306 AF              xra a
5535   2307 B3              ora e
5536   2308 CA 13 23        jz memcpy_back_l2
5537   230B             memcpy_back_l1:
5538   230B                 ; dest--, src--
5539   230B 2B              dcx h
5540   230C 0B              dcx b
5541   230D                 ; *dest = *src
5542   230D 0A              ldax b
5543   230E 77              mov m, a
5544   230F                 ; while(cnt)
5545   230F 1D              dcr e
5546   2310 C2 0B 23        jnz memcpy_back_l1
5547   2313             memcpy_back_l2:
5548   2313 15              dcr d
5549   2314 C2 0B 23        jnz memcpy_back_l1
5550   2317 C1              pop b
5551   2318               
5552   2318 C9            ret
5553   2319               ; --- strchr -----------------------------------------------------------------
5554   2319             strchr:
5555   2319 32 BD 2D      sta strchr_2
5556   231C               ; 2 asm {
5557   231C 57              mov d, a
5558   231D 2A BB 2D        lhld strchr_1
5559   2320             strchr_l1:
5560   2320                 ; *dest = *src    
5561   2320 7E              mov a, m
5562   2321 BA              cmp d
5563   2322 C8              rz
5564   2323 23              inx h
5565   2324 B7              ora a
5566   2325 C2 20 23        jnz strchr_l1
5567   2328 67              mov h, a
5568   2329 6F              mov l, a
5569   232A               
5570   232A C9            ret
5571   232B               ; --- strcmp -----------------------------------------------------------------
5572   232B             strcmp:
5573   232B 22 C0 2D      shld strcmp_2
5574   232E               ; 3 while(1) {
5575   232E             l359:
5576   232E               ; 4 a=*d, b=*s;
5577   232E 2A BE 2D      lhld strcmp_1
5578   2331 7E            mov a, m
5579   2332 32 C2 2D      sta strcmp_a
5580   2335 2A C0 2D      lhld strcmp_2
5581   2338 7E            mov a, m
5582   2339 32 C3 2D      sta strcmp_b
5583   233C               ; 5 if(a < b) return 255;
5584   233C 21 C3 2D      lxi h, strcmp_b
5585   233F 3A C2 2D      lda strcmp_a
5586   2342 BE            cmp m
5587   2343 D2 49 23      jnc l361
5588   2346               ; 5 return 255;
5589   2346 3E FF         mvi a, 255
5590   2348 C9            ret
5591   2349             l361:
5592   2349               ; 6 if(b < a) return 1;
5593   2349 21 C2 2D      lxi h, strcmp_a
5594   234C 3A C3 2D      lda strcmp_b
5595   234F BE            cmp m
5596   2350 D2 56 23      jnc l362
5597   2353               ; 6 return 1;
5598   2353 3E 01         mvi a, 1
5599   2355 C9            ret
5600   2356             l362:
5601   2356               ; 7 if(*d==0) return 0;
5602   2356 2A BE 2D      lhld strcmp_1
5603   2359 7E            mov a, m
5604   235A B7            ora a
5605   235B C2 60 23      jnz l363
5606   235E               ; 7 return 0;
5607   235E AF            xra a
5608   235F C9            ret
5609   2360             l363:
5610   2360               ; 8 ++d, ++s;
5611   2360 23            inx h
5612   2361 22 BE 2D      shld strcmp_1
5613   2364 2A C0 2D      lhld strcmp_2
5614   2367 23            inx h
5615   2368 22 C0 2D      shld strcmp_2
5616   236B C3 2E 23      jmp l359
5617   236E             l360:
5618   236E C9            ret
5619   236F               ; --- op_mul16 -----------------------------------------------------------------
5620   236F             op_mul16:
5621   236F C5            push b
5622   2370 44            mov b, h
5623   2371 4D            mov c, l
5624   2372 21 00 00      lxi h, 0
5625   2375 3E 11         mvi a, 17
5626   2377             op_mul16_1:
5627   2377 3D            dcr a
5628   2378 CA FE 20      jz pop_bc_ret
5629   237B 29            dad h
5630   237C EB            xchg
5631   237D D2 85 23      jnc op_mul16_2
5632   2380 29            dad h
5633   2381 23            inx h
5634   2382 C3 86 23      jmp op_mul16_3
5635   2385             op_mul16_2:
5636   2385 29            dad h
5637   2386             op_mul16_3:
5638   2386 EB            xchg
5639   2387 D2 77 23      jnc op_mul16_1
5640   238A 09            dad b
5641   238B D2 77 23      jnc op_mul16_1
5642   238E 13            inx d
5643   238F C3 77 23      jmp op_mul16_1
5644   2392             
5645   2392 C9            ret
5646   2393               ; --- fs_open -----------------------------------------------------------------
5647   2393             fs_open:
5648   2393 22 C4 2D      shld fs_open_1
5649   2396               ; 5 return fs_open0(name, O_OPEN);
5650   2396 22 24 2E      shld fs_open0_1
5651   2399 AF            xra a
5652   239A C3 BC 26      jmp fs_open0
5653   239D C9            ret
5654   239E               ; --- fs_read -----------------------------------------------------------------
5655   239E             fs_read:
5656   239E 22 C8 2D      shld fs_read_2
5657   23A1               ; 4 asm {
5658   23A1 C5              PUSH B
5659   23A2                 ; hl = fs_read_2
5660   23A2 EB              XCHG
5661   23A3 2A C6 2D        LHLD fs_read_1
5662   23A6 EB              XCHG
5663   23A7 3E 04           MVI  A, 4
5664   23A9 CD EB 23        CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
5665   23AC 22 DA 2D        SHLD fs_low
5666   23AF C1              POP  B    
5667   23B0               
5668   23B0 C9            ret
5669   23B1               ; --- fs_create -----------------------------------------------------------------
5670   23B1             fs_create:
5671   23B1 22 CA 2D      shld fs_create_1
5672   23B4               ; 5 return fs_open0(name, O_CREATE);
5673   23B4 22 24 2E      shld fs_open0_1
5674   23B7 3E 01         mvi a, 1
5675   23B9 C3 BC 26      jmp fs_open0
5676   23BC C9            ret
5677   23BD               ; --- fs_write -----------------------------------------------------------------
5678   23BD             fs_write:
5679   23BD 22 CE 2D      shld fs_write_2
5680   23C0               ; 4 asm {
5681   23C0 C5              PUSH B
5682   23C1                 ; hl = fs_write_2
5683   23C1 EB              XCHG
5684   23C2 2A CC 2D        LHLD fs_write_1
5685   23C5 EB              XCHG
5686   23C6 3A DE 2D        LDA  fs_addr
5687   23C9 3E 05           MVI  A, 5
5688   23CB CD EB 23        CALL fs_entry ; HL-размер, DE-адрес / A-код ошибки
5689   23CE C1              POP  B    
5690   23CF               
5691   23CF C9            ret
5692   23D0               ; --- fs_exec -----------------------------------------------------------------
5693   23D0             fs_exec:
5694   23D0 22 D2 2D      shld fs_exec_2
5695   23D3               ; 4 asm {    
5696   23D3                 
5697   23D3 C5              PUSH B
5698   23D4 EB              XCHG
5699   23D5 2A D0 2D        LHLD fs_exec_1
5700   23D8 AF              XRA  A
5701   23D9 CD EB 23        CALL fs_entry
5702   23DC C1              POP  B
5703   23DD               
5704   23DD C9            ret
5705   23DE               ; --- fs_init -----------------------------------------------------------------
5706   23DE             fs_init:
5707   23DE 22 D4 2D        SHLD fs_cmdLine
5708   23E1 EB              XCHG
5709   23E2 22 D7 2D        SHLD fs_selfName
5710   23E5 60              MOV H, B
5711   23E6 69              MOV L, C
5712   23E7 22 EC 23        SHLD fs_entry_n+1
5713   23EA               
5714   23EA C9            ret
5715   23EB               ; --- fs_entry -----------------------------------------------------------------
5716   23EB             fs_entry:
5717   23EB             fs_entry_n:
5718   23EB C3 00 00        JMP 0000h
5719   23EE               
5720   23EE C9            ret
5721   23EF               ; --- fs_getsize -----------------------------------------------------------------
5722   23EF             fs_getsize:
5723   23EF 21 00 00      lxi h, 0
5724   23F2 22 27 2E      shld fs_seek_1
5725   23F5 22 29 2E      shld fs_seek_2
5726   23F8 3E 64         mvi a, 100
5727   23FA C3 CB 26      jmp fs_seek
5728   23FD C9            ret
5729   23FE               ; --- set32 -----------------------------------------------------------------
5730   23FE             set32:
5731   23FE 22 E1 2D      shld set32_2
5732   2401               ; 4 asm {
5733   2401 EB              xchg ; de = set32_2
5734   2402 2A DF 2D        lhld set32_1
5735   2405 1A              ldax d
5736   2406 77              mov m, a
5737   2407 23              inx h
5738   2408 13              inx d
5739   2409 1A              ldax d
5740   240A 77              mov m, a
5741   240B 23              inx h
5742   240C 13              inx d
5743   240D 1A              ldax d
5744   240E 77              mov m, a
5745   240F 23              inx h
5746   2410 13              inx d
5747   2411 1A              ldax d
5748   2412 77              mov m, a
5749   2413               
5750   2413 C9            ret
5751   2414               ; --- div32_16 -----------------------------------------------------------------
5752   2414             div32_16:
5753   2414 22 E5 2D      shld div32_16_2
5754   2417               ; 9 ((ushort*)a)[1] = ((ushort*)a)[1] / b;Сложение с константой 2
5755   2417 2A E3 2D      lhld div32_16_1
5756   241A 23            inx h
5757   241B 23            inx h
5758   241C               ; Сложение с константой 2
5759   241C E5            push h
5760   241D 2A E3 2D      lhld div32_16_1
5761   2420 23            inx h
5762   2421 23            inx h
5763   2422 EB            xchg
5764   2423 2A E5 2D      lhld div32_16_2
5765   2426 EB            xchg
5766   2427 7E            mov a, m
5767   2428 23            inx h
5768   2429 66            mov h, m
5769   242A 6F            mov l, a
5770   242B CD 3B 22      call op_div16
5771   242E D1            pop d
5772   242F EB            xchg
5773   2430 73            mov m, e
5774   2431 23            inx h
5775   2432 72            mov m, d
5776   2433 2B            dcx h
5777   2434               ; 11 ((uchar*)&tmp)[1] = op_div16_mod;
5778   2434 3A 9E 2D      lda op_div16_mod
5779   2437 32 E8 2D      sta (div32_16_tmp)+(1)
5780   243A               ; 12 ((uchar*)&tmp)[0] = ((uchar*)a)[1];Сложение с константой 1
5781   243A 2A E3 2D      lhld div32_16_1
5782   243D 23            inx h
5783   243E 7E            mov a, m
5784   243F 32 E7 2D      sta (div32_16_tmp)+(0)
5785   2442               ; 13 ((uchar*)a)[1] = tmp / b;Сложение с константой 1
5786   2442 2A E3 2D      lhld div32_16_1
5787   2445 23            inx h
5788   2446 EB            xchg
5789   2447 2A E5 2D      lhld div32_16_2
5790   244A EB            xchg
5791   244B E5            push h
5792   244C 2A E7 2D      lhld div32_16_tmp
5793   244F CD 3B 22      call op_div16
5794   2452 7D            mov a, l
5795   2453 E1            pop h
5796   2454 77            mov m, a
5797   2455               ; 15 ((uchar*)&tmp)[1] = op_div16_mod;
5798   2455 3A 9E 2D      lda op_div16_mod
5799   2458 32 E8 2D      sta (div32_16_tmp)+(1)
5800   245B               ; 16 ((uchar*)&tmp)[0] = ((uchar*)a)[0];Сложение с константой 0
5801   245B 2A E3 2D      lhld div32_16_1
5802   245E 7E            mov a, m
5803   245F 32 E7 2D      sta (div32_16_tmp)+(0)
5804   2462               ; 17 ((uchar*)a)[0] = tmp / b;Сложение с константой 0
5805   2462 EB            xchg
5806   2463 2A E5 2D      lhld div32_16_2
5807   2466 EB            xchg
5808   2467 E5            push h
5809   2468 2A E7 2D      lhld div32_16_tmp
5810   246B CD 3B 22      call op_div16
5811   246E 7D            mov a, l
5812   246F E1            pop h
5813   2470 77            mov m, a
5814   2471 C9            ret
5815   2472               ; --- fs_swap -----------------------------------------------------------------
5816   2472             fs_swap:
5817   2472 21 31 2E      lxi h, string13
5818   2475 22 24 2E      shld fs_open0_1
5819   2478 3E 65         mvi a, 101
5820   247A C3 BC 26      jmp fs_open0
5821   247D C9            ret
5822   247E               ; --- add32_16 -----------------------------------------------------------------
5823   247E             add32_16:
5824   247E 22 EB 2D      shld add32_16_2
5825   2481               ; 4 asm {
5826   2481                 ; de = *to
5827   2481 2A E9 2D        lhld add32_16_1
5828   2484 5E              mov e, m
5829   2485 23              inx h
5830   2486 56              mov d, m
5831   2487             
5832   2487                 ; hl = de + from
5833   2487 2A EB 2D        lhld add32_16_2
5834   248A 19              dad d
5835   248B             
5836   248B                 ; *hl = de
5837   248B EB              xchg
5838   248C 2A E9 2D        lhld add32_16_1
5839   248F 73              mov m, e
5840   2490 23              inx h
5841   2491 72              mov m, d     
5842   2492             
5843   2492                 ; …б«Ё ЇҐаҐЇ®«­Ґ­ЁҐ, в® гўҐ«ЁзЁў Ґ¬ ўҐае­Ё© а §ап¤
5844   2492 D0              rnc
5845   2493 23              inx h
5846   2494 34              inr m    
5847   2495             
5848   2495                 ; …б«Ё ЇҐаҐЇ®«­Ґ­ЁҐ, в® гўҐ«ЁзЁў Ґ¬ ўҐае­Ё© а §ап¤
5849   2495 C0              rnz
5850   2496 23              inx h
5851   2497 34              inr m
5852   2498               
5853   2498 C9            ret
5854   2499               ; --- cmp32_32 -----------------------------------------------------------------
5855   2499             cmp32_32:
5856   2499 22 EF 2D      shld cmp32_32_2
5857   249C               ; 4 asm {
5858   249C 2A ED 2D        lhld cmp32_32_1
5859   249F 23              inx h
5860   24A0 23              inx h
5861   24A1 23              inx h
5862   24A2 EB              xchg
5863   24A3             
5864   24A3 2A EF 2D        lhld cmp32_32_2
5865   24A6 23              inx h
5866   24A7 23              inx h
5867   24A8 23              inx h
5868   24A9               
5869   24A9 1A              ldax d
5870   24AA BE              cmp m
5871   24AB C2 C1 24        jnz cmp32_32_l0
5872   24AE                
5873   24AE 2B              dcx h
5874   24AF 1B              dcx d
5875   24B0 1A              ldax d
5876   24B1 BE              cmp m
5877   24B2 C2 C1 24        jnz cmp32_32_l0
5878   24B5                 
5879   24B5 2B              dcx h
5880   24B6 1B              dcx d
5881   24B7 1A              ldax d
5882   24B8 BE              cmp m
5883   24B9 C2 C1 24        jnz cmp32_32_l0
5884   24BC             
5885   24BC 2B              dcx h
5886   24BD 1B              dcx d
5887   24BE 1A              ldax d
5888   24BF BE              cmp m
5889   24C0 C8              rz
5890   24C1             
5891   24C1             cmp32_32_l0:   
5892   24C1 3F              cmc
5893   24C2 9F              sbb a
5894   24C3 F6 01           ori 1
5895   24C5 C9              ret
5896   24C6               
5897   24C6 C9            ret
5898   24C7               ; --- sub32_32 -----------------------------------------------------------------
5899   24C7             sub32_32:
5900   24C7 22 F3 2D      shld sub32_32_2
5901   24CA               ; 4 asm {
5902   24CA 2A F1 2D        lhld sub32_32_1
5903   24CD EB              xchg
5904   24CE 2A F3 2D        lhld sub32_32_2
5905   24D1               
5906   24D1 1A              ldax d
5907   24D2 96              sub m
5908   24D3 12              stax d
5909   24D4                
5910   24D4 23              inx h
5911   24D5 13              inx d
5912   24D6 1A              ldax d
5913   24D7 9E              sbb m
5914   24D8 12              stax d
5915   24D9                 
5916   24D9 23              inx h
5917   24DA 13              inx d
5918   24DB 1A              ldax d
5919   24DC 9E              sbb m
5920   24DD 12              stax d
5921   24DE             
5922   24DE 23              inx h
5923   24DF 13              inx d
5924   24E0 1A              ldax d
5925   24E1 9E              sbb m
5926   24E2 12              stax d
5927   24E3               
5928   24E3 C9            ret
5929   24E4               ; --- fs_delete -----------------------------------------------------------------
5930   24E4             fs_delete:
5931   24E4 22 F5 2D      shld fs_delete_1
5932   24E7               ; 5 return fs_open0(name, O_DELETE);
5933   24E7 22 24 2E      shld fs_open0_1
5934   24EA 3E 64         mvi a, 100
5935   24EC C3 BC 26      jmp fs_open0
5936   24EF C9            ret
5937   24F0               ; --- fs_mkdir -----------------------------------------------------------------
5938   24F0             fs_mkdir:
5939   24F0 22 F7 2D      shld fs_mkdir_1
5940   24F3               ; 5 return fs_open0(name, O_MKDIR);
5941   24F3 22 24 2E      shld fs_open0_1
5942   24F6 3E 02         mvi a, 2
5943   24F8 C3 BC 26      jmp fs_open0
5944   24FB C9            ret
5945   24FC               ; --- fs_move -----------------------------------------------------------------
5946   24FC             fs_move:
5947   24FC 22 FB 2D      shld fs_move_2
5948   24FF               ; 4 asm {
5949   24FF C5              PUSH B
5950   2500 EB              XCHG
5951   2501 2A F9 2D        LHLD fs_move_1
5952   2504 3E 06           MVI  A, 6
5953   2506 CD EB 23        CALL fs_entry ; HL-из, DE-в / A-код ошибки
5954   2509 C1              POP  B
5955   250A               
5956   250A C9            ret
5957   250B               ; --- fs_getfree -----------------------------------------------------------------
5958   250B             fs_getfree:
5959   250B 21 00 00      lxi h, 0
5960   250E 22 27 2E      shld fs_seek_1
5961   2511 22 29 2E      shld fs_seek_2
5962   2514 3E 66         mvi a, 102
5963   2516 C3 CB 26      jmp fs_seek
5964   2519 C9            ret
5965   251A               ; --- fs_gettotal -----------------------------------------------------------------
5966   251A             fs_gettotal:
5967   251A 21 00 00      lxi h, 0
5968   251D 22 27 2E      shld fs_seek_1
5969   2520 22 29 2E      shld fs_seek_2
5970   2523 3E 65         mvi a, 101
5971   2525 C3 CB 26      jmp fs_seek
5972   2528 C9            ret
5973   2529               ; --- radio86rkScreen2a -----------------------------------------------------------------
5974   2529             radio86rkScreen2a:
5975   2529 C5            push b
5976   252A               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
5977   252A 21 D0 76      lxi h, 30416
5978   252D 22 A0 2D      shld memset_1
5979   2530 AF            xra a
5980   2531 32 A2 2D      sta memset_2
5981   2534 21 1D 09      lxi h, 2333
5982   2537 CD 76 22      call memset
5983   253A               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
5984   253A 01 CF 76      lxi b, 30415
5985   253D 3E 03         mvi a, 3
5986   253F 32 FD 2D      sta radio86rkScreen2a_i
5987   2542             l364:
5988   2542               ; convertToConfition
5989   2542 3A FD 2D      lda radio86rkScreen2a_i
5990   2545 B7            ora a
5991   2546 CA 55 25      jz l365
5992   2549               ; 5 v+=2, *v = 0xF1; Сложение BC с константой 2
5993   2549 03            inx b
5994   254A 03            inx b
5995   254B 3E F1         mvi a, 241
5996   254D 02            stax b
5997   254E             l366:
5998   254E 21 FD 2D      lxi h, radio86rkScreen2a_i
5999   2551 35            dcr m
6000   2552 C3 42 25      jmp l364
6001   2555             l365:
6002   2555               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
6003   2555 3E 1F         mvi a, 31
6004   2557 32 FD 2D      sta radio86rkScreen2a_i
6005   255A             l368:
6006   255A               ; convertToConfition
6007   255A 3A FD 2D      lda radio86rkScreen2a_i
6008   255D B7            ora a
6009   255E CA 71 25      jz l369
6010   2561               ; 8 v += (BPL), *v = 0xF1; Сложение с BC
6011   2561 21 4B 00      lxi h, 75
6012   2564 09            dad b
6013   2565 44            mov b, h
6014   2566 4D            mov c, l
6015   2567 3E F1         mvi a, 241
6016   2569 02            stax b
6017   256A             l370:
6018   256A 21 FD 2D      lxi h, radio86rkScreen2a_i
6019   256D 35            dcr m
6020   256E C3 5A 25      jmp l368
6021   2571             l369:
6022   2571               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
6023   2571 21 EC 7F      lxi h, 32748
6024   2574 36 FF         mvi m, 255
6025   2576               ; 10 radio86rkVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
6026   2576 21 DF 76      lxi h, 30431
6027   2579 22 06 2E      shld radio86rkVideoMem
6028   257C               ; 11 radio86rkVideoBpl = (BPL); 
6029   257C 3E 4B         mvi a, 75
6030   257E 32 08 2E      sta radio86rkVideoBpl
6031   2581               ; 1 ((uchar*)0xC000)
6032   2581 21 01 C0      lxi h, 49153
6033   2584 36 00         mvi m, 0
6034   2586               ; 1 ((uchar*)0xC000)
6035   2586 2D            dcr l
6036   2587 36 4D         mvi m, 77
6037   2589               ; 1 ((uchar*)0xC000)
6038   2589 36 64         mvi m, 100
6039   258B               ; 1 ((uchar*)0xC000)
6040   258B 36 77         mvi m, 119
6041   258D               ; 1 ((uchar*)0xC000)
6042   258D 36 53         mvi m, 83
6043   258F               ; 1 ((uchar*)0xC000)
6044   258F 2C            inr l
6045   2590 36 23         mvi m, 35
6046   2592               ; 7 while((VG75[1] & 0x20) == 0); 
6047   2592             l377:
6048   2592 3A 01 C0      lda 49153
6049   2595 E6 20         ani 32
6050   2597 C2 9D 25      jnz l378
6051   259A C3 92 25      jmp l377
6052   259D             l378:
6053   259D               ; 8 while((VG75[1] & 0x20) == 0); 
6054   259D             l379:
6055   259D 3A 01 C0      lda 49153
6056   25A0 E6 20         ani 32
6057   25A2 C2 A8 25      jnz l380
6058   25A5 C3 9D 25      jmp l379
6059   25A8             l380:
6060   25A8               ; 1 ((uchar*)0xE000)
6061   25A8 21 08 E0      lxi h, 57352
6062   25AB 36 80         mvi m, 128
6063   25AD               ; 1 ((uchar*)0xE000)
6064   25AD 2E 04         mvi l, 4
6065   25AF 36 D0         mvi m, 208
6066   25B1               ; 1 ((uchar*)0xE000)
6067   25B1 36 76         mvi m, 118
6068   25B3               ; 1 ((uchar*)0xE000)
6069   25B3 2C            inr l
6070   25B4 36 1C         mvi m, 28
6071   25B6               ; 1 ((uchar*)0xE000)
6072   25B6 36 49         mvi m, 73
6073   25B8               ; 1 ((uchar*)0xE000)
6074   25B8 2E 08         mvi l, 8
6075   25BA 36 A4         mvi m, 164
6076   25BC               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
6077   25BC F3           di 
6078   25BD C1            pop b
6079   25BE C9            ret
6080   25BF               ; --- directCursor -----------------------------------------------------------------
6081   25BF             directCursor:
6082   25BF 32 FF 2D      sta directCursor_2
6083   25C2               ; 1 ((uchar*)0xC000)
6084   25C2 21 01 C0      lxi h, 49153
6085   25C5 36 80         mvi m, 128
6086   25C7               ; 1 ((uchar*)0xC000)
6087   25C7 3A FE 2D      lda directCursor_1
6088   25CA 32 00 C0      sta 49152
6089   25CD               ; 1 ((uchar*)0xC000)
6090   25CD 3A FF 2D      lda directCursor_2
6091   25D0 32 00 C0      sta 49152
6092   25D3 C9            ret
6093   25D4               ; --- charAddr -----------------------------------------------------------------
6094   25D4             charAddr:
6095   25D4 32 01 2E      sta charAddr_2
6096   25D7               ; 4 return radio86rkVideoMem + y * radio86rkVideoBpl + x;
6097   25D7 21 08 2E      lxi h, radio86rkVideoBpl
6098   25DA 56            mov d, m
6099   25DB CD EC 20      call op_mul
6100   25DE               ; Сложение
6101   25DE EB            xchg
6102   25DF 2A 06 2E      lhld radio86rkVideoMem
6103   25E2 19            dad d
6104   25E3               ; Сложение
6105   25E3 EB            xchg
6106   25E4 2A 00 2E      lhld charAddr_1
6107   25E7 26 00         mvi h, 0
6108   25E9 19            dad d
6109   25EA C9            ret
6110   25EB               ; --- print2 -----------------------------------------------------------------
6111   25EB             print2:
6112   25EB 22 04 2E      shld print2_2
6113   25EE               ; 4 asm {
6114   25EE EB              xchg
6115   25EF 2A 02 2E        lhld print2_1
6116   25F2             print2_loop:
6117   25F2 1A              ldax d
6118   25F3 B7              ora  a
6119   25F4 C8              rz
6120   25F5 E6 7F           ani  07Fh
6121   25F7 77              mov  m, a
6122   25F8 23              inx  h
6123   25F9 13              inx  d
6124   25FA C3 F2 25        jmp  print2_loop
6125   25FD               
6126   25FD C9            ret
6127   25FE               ; --- op_mod -----------------------------------------------------------------
6128   25FE             op_mod:
6129   25FE C5              PUSH B
6130   25FF 5F              MOV E, A
6131   2600 21 08 00        LXI H, 8
6132   2603 0E 00           MVI C, 0
6133   2605             op_mod_1:
6134   2605 7B              MOV A,E
6135   2606 17              RAL
6136   2607 5F              MOV E,A
6137   2608 79              MOV A,C
6138   2609 17              RAL
6139   260A 92              SUB D
6140   260B D2 0F 26        JNC op_mod_2
6141   260E 82              ADD D
6142   260F             op_mod_2:
6143   260F 4F              MOV C,A ; Остаток в С
6144   2610 3F              CMC
6145   2611 7C              MOV A,H
6146   2612 17              RAL
6147   2613 67              MOV H,A ; Частное в Н
6148   2614 2D              DCR L
6149   2615 C2 05 26        JNZ op_mod_1
6150   2618 79              MOV A, C
6151   2619 C1              POP B
6152   261A               
6153   261A C9            ret
6154   261B               ; --- print -----------------------------------------------------------------
6155   261B             print:
6156   261B 22 0B 2E      shld print_3
6157   261E               ; 4 print2(charAddr(x, y), text);
6158   261E 3A 09 2E      lda print_1
6159   2621 32 00 2E      sta charAddr_1
6160   2624 3A 0A 2E      lda print_2
6161   2627 CD D4 25      call charAddr
6162   262A 22 02 2E      shld print2_1
6163   262D 2A 0B 2E      lhld print_3
6164   2630 C3 EB 25      jmp print2
6165   2633             printn:
6166   2633 22 10 2E      shld printn_4
6167   2636               ; 4 print2n(charAddr(x, y), len, text);
6168   2636 3A 0D 2E      lda printn_1
6169   2639 32 00 2E      sta charAddr_1
6170   263C 3A 0E 2E      lda printn_2
6171   263F CD D4 25      call charAddr
6172   2642 22 12 2E      shld print2n_1
6173   2645 3A 0F 2E      lda printn_3
6174   2648 32 14 2E      sta print2n_2
6175   264B 2A 10 2E      lhld printn_4
6176   264E C3 51 26      jmp print2n
6177   2651             print2n:
6178   2651 22 15 2E      shld print2n_3
6179   2654               ; 4 asm {
6180   2654 C5              push b
6181   2655 EB              xchg
6182   2656 2A 12 2E        lhld print2n_1
6183   2659 3A 14 2E        lda print2n_2
6184   265C 47              mov b, a
6185   265D             print2n_loop:
6186   265D 1A              ldax d
6187   265E B7              ora  a
6188   265F CA 6B 26        jz   print2n_ret
6189   2662 E6 7F           ani  07Fh
6190   2664 77              mov  m, a
6191   2665 23              inx  h
6192   2666 13              inx  d
6193   2667 05              dcr b
6194   2668 C2 5D 26        jnz  print2n_loop 
6195   266B             print2n_ret:
6196   266B C1              pop b
6197   266C               
6198   266C C9            ret
6199   266D               ; --- print2cn -----------------------------------------------------------------
6200   266D             print2cn:
6201   266D 32 1A 2E      sta print2cn_3
6202   2670               ; 4 asm {
6203   2670 E6 7F           ani  07Fh
6204   2672 57              mov  d, a
6205   2673 3A 19 2E        lda  print2cn_2    
6206   2676 2A 17 2E        lhld print2cn_1
6207   2679             print2cn_loop:
6208   2679 72              mov  m, d
6209   267A 23              inx  h
6210   267B 3D              dcr  a
6211   267C C2 79 26        jnz  print2cn_loop
6212   267F               
6213   267F C9            ret
6214   2680               ; --- printm -----------------------------------------------------------------
6215   2680             printm:
6216   2680 22 1E 2E      shld printm_4
6217   2683               ; 4 print2m(charAddr(x, y), len, text);
6218   2683 3A 1B 2E      lda printm_1
6219   2686 32 00 2E      sta charAddr_1
6220   2689 3A 1C 2E      lda printm_2
6221   268C CD D4 25      call charAddr
6222   268F 22 2C 2E      shld print2m_1
6223   2692 3A 1D 2E      lda printm_3
6224   2695 32 2E 2E      sta print2m_2
6225   2698 2A 1E 2E      lhld printm_4
6226   269B C3 E5 26      jmp print2m
6227   269E             printcn:
6228   269E 32 23 2E      sta printcn_4
6229   26A1               ; 4 print2cn(charAddr(x, y),len, c);
6230   26A1 3A 20 2E      lda printcn_1
6231   26A4 32 00 2E      sta charAddr_1
6232   26A7 3A 21 2E      lda printcn_2
6233   26AA CD D4 25      call charAddr
6234   26AD 22 17 2E      shld print2cn_1
6235   26B0 3A 22 2E      lda printcn_3
6236   26B3 32 19 2E      sta print2cn_2
6237   26B6 3A 23 2E      lda printcn_4
6238   26B9 C3 6D 26      jmp print2cn
6239   26BC             fs_open0:
6240   26BC 32 26 2E      sta fs_open0_2
6241   26BF               ; 5 asm {      
6242   26BF                   
6243   26BF C5              PUSH B
6244   26C0                 ; a = fs_open0_2
6245   26C0 57              MOV  D, A 
6246   26C1 2A 24 2E        LHLD fs_open0_1
6247   26C4 3E 02           MVI  A, 2
6248   26C6 CD EB 23        CALL fs_entry
6249   26C9 C1              POP  B
6250   26CA               
6251   26CA C9            ret
6252   26CB               ; --- fs_seek -----------------------------------------------------------------
6253   26CB             fs_seek:
6254   26CB 32 2B 2E      sta fs_seek_3
6255   26CE               ; 4 asm {
6256   26CE C5              PUSH B
6257   26CF                 ; a = fs_seek_3
6258   26CF 47              MOV  B, A
6259   26D0 2A 29 2E        LHLD fs_seek_2
6260   26D3 EB              XCHG
6261   26D4 2A 27 2E        LHLD fs_seek_1
6262   26D7 3E 03           MVI  A, 3
6263   26D9 CD EB 23        CALL fs_entry ; B-режим, DE:HL-имя файла / A-код ошибки, DE:HL-позиция
6264   26DC 22 DA 2D        SHLD fs_low
6265   26DF EB              XCHG
6266   26E0 22 DC 2D        SHLD fs_high
6267   26E3 C1              POP  B
6268   26E4               
6269   26E4 C9            ret
6270   26E5               ; --- print2m -----------------------------------------------------------------
6271   26E5             print2m:
6272   26E5 22 2F 2E      shld print2m_3
6273   26E8               ; 4 asm {
6274   26E8 C5              push b
6275   26E9 EB              xchg
6276   26EA 2A 2C 2E        lhld print2m_1
6277   26ED 3A 2E 2E        lda print2m_2
6278   26F0 47              mov b, a
6279   26F1             print2m_loop:
6280   26F1 1A              ldax d
6281   26F2 B7              ora  a
6282   26F3 CA F7 26        jz   print2m_ret
6283   26F6 13              inx  d
6284   26F7             print2m_ret:
6285   26F7 E6 7F           ani  07Fh
6286   26F9 77              mov  m, a
6287   26FA 23              inx  h
6288   26FB 05              dcr b
6289   26FC C2 F1 26        jnz  print2m_loop 
6290   26FF C1              pop b
6291   2700               
6292   2700 C9            ret
6293   2701             editorApp:
6294   2701 42 4F 4F 54   .db 66,79,79,84,47,69,68,73,84,46,82,75
6294   2705 2F 45 44 49 
6294   2709 54 2E 52 4B 
6295   270D 00            .db 0
6296   270E             
6297   270E             viewerApp:
6298   270E 42 4F 4F 54   .db 66,79,79,84,47,86,73,69,87,46,82,75
6298   2712 2F 56 49 45 
6298   2716 57 2E 52 4B 
6299   271A 00            .db 0
6300   271B             
6301   271B             panelA:
6302   271B              .ds 266
6303   2825             panelB:
6304   2825              .ds 266
6305   292F             cmdline:
6306   292F              .ds 256
6307   2A2F             maxFiles:
6308   2A2F              .ds 2
6309   2A31             parentDir:
6310   2A31 2E           .db 46
6311   2A32 2E           .db 46
6312   2A33 20           .db 32
6313   2A34 20           .db 32
6314   2A35 20           .db 32
6315   2A36 20           .db 32
6316   2A37 20           .db 32
6317   2A38 20           .db 32
6318   2A39 20           .db 32
6319   2A3A 20           .db 32
6320   2A3B 20           .db 32
6321   2A3C 10           .db 16
6322   2A3D 00           .db 0
6323   2A3E 00           .db 0
6324   2A3F 00           .db 0
6325   2A40 00           .db 0
6326   2A41 00           .db 0
6327   2A42 00           .db 0
6328   2A43 00           .db 0
6329   2A44 00           .db 0
6330   2A45             
6331   2A45             getSel_n:
6332   2A45              .ds 2
6333   2A47             getSelNoBack_f:
6334   2A47              .ds 2
6335   2A49             drawFileInfo_f:
6336   2A49              .ds 2
6337   2A4B             drawFileInfo_buf:
6338   2A4B              .ds 18
6339   2A5D             drawFilesCount_total:
6340   2A5D              .ds 4
6341   2A61             drawFilesCount_i:
6342   2A61              .ds 2
6343   2A63             drawFilesCount_filesCnt:
6344   2A63              .ds 2
6345   2A65             drawFilesCount_p:
6346   2A65              .ds 2
6347   2A67             processInput_1:
6348   2A67              .ds 1
6349   2A68             drawError_1:
6350   2A68              .ds 2
6351   2A6A             drawError_2:
6352   2A6A              .ds 1
6353   2A6B             drawError_buf:
6354   2A6B              .ds 4
6355   2A6F             inputBox_1:
6356   2A6F              .ds 2
6357   2A71             confirm_1:
6358   2A71              .ds 2
6359   2A73             confirm_2:
6360   2A73              .ds 2
6361   2A75             unpackName_1:
6362   2A75              .ds 2
6363   2A77             unpackName_2:
6364   2A77              .ds 2
6365   2A79             catPathAndUnpack_1:
6366   2A79              .ds 2
6367   2A7B             catPathAndUnpack_2:
6368   2A7B              .ds 2
6369   2A7D             catPathAndUnpack_len:
6370   2A7D              .ds 2
6371   2A7F             nextSelectedCnt:
6372   2A7F              .ds 2
6373   2A81             nextSelectedFile:
6374   2A81 83 2A        .dw $+2
6375   2A83              .ds 20
6376   2A97             getFirstSelected_1:
6377   2A97              .ds 2
6378   2A99             getFirstSelected_type:
6379   2A99              .ds 1
6380   2A9A             getNextSelected_1:
6381   2A9A              .ds 2
6382   2A9C             cmpFileInfo_1:
6383   2A9C              .ds 2
6384   2A9E             cmpFileInfo_2:
6385   2A9E              .ds 2
6386   2AA0             sort_1:
6387   2AA0              .ds 2
6388   2AA2             sort_2:
6389   2AA2              .ds 2
6390   2AA4             sort_i:
6391   2AA4              .ds 2
6392   2AA6             sort_j:
6393   2AA6              .ds 2
6394   2AA8             sort_x:
6395   2AA8              .ds 2
6396   2AAA             sort_st_:
6397   2AAA              .ds 128
6398   2B2A             sort_st:
6399   2B2A              .ds 2
6400   2B2C             sort_stc:
6401   2B2C              .ds 1
6402   2B2D             packName_1:
6403   2B2D              .ds 2
6404   2B2F             packName_2:
6405   2B2F              .ds 2
6406   2B31             packName_i:
6407   2B31              .ds 1
6408   2B32             getFiles_f:
6409   2B32              .ds 2
6410   2B34             getFiles_st:
6411   2B34              .ds 2
6412   2B36             getFiles_n:
6413   2B36              .ds 2
6414   2B38             getFiles_i:
6415   2B38              .ds 1
6416   2B39             getFiles_j:
6417   2B39              .ds 2
6418   2B3B             getFiles_dir:
6419   2B3B              .ds 20
6420   2B4F             selectFile_1:
6421   2B4F              .ds 2
6422   2B51             selectFile_f:
6423   2B51              .ds 2
6424   2B53             reloadFiles_1:
6425   2B53              .ds 2
6426   2B55             absolutePath_1:
6427   2B55              .ds 2
6428   2B57             absolutePath_l:
6429   2B57              .ds 2
6430   2B59             getName_1:
6431   2B59              .ds 2
6432   2B5B             getName_p:
6433   2B5B              .ds 2
6434   2B5D             dropPathInt_1:
6435   2B5D              .ds 2
6436   2B5F             dropPathInt_2:
6437   2B5F              .ds 2
6438   2B61             dropPathInt_p:
6439   2B61              .ds 2
6440   2B63             dropPath_buf:
6441   2B63              .ds 11
6442   2B6E             cursor_right_w:
6443   2B6E              .ds 2
6444   2B70             dupFiles_1:
6445   2B70              .ds 1
6446   2B71             loadState_i:
6447   2B71              .ds 2
6448   2B73             run_1:
6449   2B73              .ds 2
6450   2B75             run_2:
6451   2B75              .ds 2
6452   2B77             cmd_editview_1:
6453   2B77              .ds 2
6454   2B79             cmd_editview_f:
6455   2B79              .ds 2
6456   2B7B             cmd_enter_d:
6457   2B7B              .ds 2
6458   2B7D             cmd_enter_i:
6459   2B7D              .ds 1
6460   2B7E             cmd_enter_f:
6461   2B7E              .ds 2
6462   2B80             cmd_enter_l:
6463   2B80              .ds 2
6464   2B82             cmd_enter_o:
6465   2B82              .ds 2
6466   2B84             cmd_inverseOne_f:
6467   2B84              .ds 2
6468   2B86             cmd_inverseAll_f:
6469   2B86              .ds 2
6470   2B88             cmd_inverseAll_i:
6471   2B88              .ds 2
6472   2B8A             cmd_copyFile_1:
6473   2B8A              .ds 2
6474   2B8C             cmd_copyFile_2:
6475   2B8C              .ds 2
6476   2B8E             cmd_copyFile_buf:
6477   2B8E              .ds 16
6478   2B9E             cmd_copyFile_e:
6479   2B9E              .ds 1
6480   2B9F             cmd_copyFile_progress_i:
6481   2B9F              .ds 1
6482   2BA0             cmd_copyFile_progress:
6483   2BA0              .ds 4
6484   2BA4             cmd_copyFile_progress_x:
6485   2BA4              .ds 4
6486   2BA8             cmd_copyFile_progress_step:
6487   2BA8              .ds 4
6488   2BAC             applyMask1_1:
6489   2BAC              .ds 2
6490   2BAE             applyMask1_2:
6491   2BAE              .ds 2
6492   2BB0             applyMask1_3:
6493   2BB0              .ds 1
6494   2BB1             cmd_copyFolder_1:
6495   2BB1              .ds 2
6496   2BB3             cmd_copyFolder_2:
6497   2BB3              .ds 2
6498   2BB5             cmd_copyFolder_e:
6499   2BB5              .ds 1
6500   2BB6             cmd_copyFolder_i:
6501   2BB6              .ds 2
6502   2BB8             cmd_copyFolder_level:
6503   2BB8              .ds 1
6504   2BB9             cmd_copyFolder_stack:
6505   2BB9              .ds 16
6506   2BC9             cmd_copyFolder_f:
6507   2BC9              .ds 2
6508   2BCB             applyMask_1:
6509   2BCB              .ds 2
6510   2BCD             applyMask_2:
6511   2BCD              .ds 2
6512   2BCF             cmd_copymove1_1:
6513   2BCF              .ds 1
6514   2BD0             cmd_copymove1_2:
6515   2BD0              .ds 1
6516   2BD1             cmd_copymove1_name:
6517   2BD1              .ds 2
6518   2BD3             cmd_copymove1_e:
6519   2BD3              .ds 1
6520   2BD4             cmd_copymove1_f:
6521   2BD4              .ds 2
6522   2BD6             cmd_copymove1_sourceFile:
6523   2BD6              .ds 256
6524   2CD6             cmd_copymove1_mask:
6525   2CD6              .ds 11
6526   2CE1             cmd_copymove1_forMask:
6527   2CE1              .ds 11
6528   2CEC             cmd_copymove1_type:
6529   2CEC              .ds 1
6530   2CED             cmd_copymove1_i:
6531   2CED              .ds 2
6532   2CEF             cmd_copymove_1:
6533   2CEF              .ds 1
6534   2CF0             cmd_copymove_2:
6535   2CF0              .ds 1
6536   2CF1             cmd_new1_1:
6537   2CF1              .ds 1
6538   2CF2             cmd_new_1:
6539   2CF2              .ds 1
6540   2CF3             cmd_freespace_1_1:
6541   2CF3              .ds 1
6542   2CF4             cmd_freespace_1_2:
6543   2CF4              .ds 2
6544   2CF6             cmd_freespace_1_buf:
6545   2CF6              .ds 17
6546   2D07             cmd_freespace_e:
6547   2D07              .ds 1
6548   2D08             cmd_deleteFolder_level:
6549   2D08              .ds 1
6550   2D09             cmd_deleteFolder_e:
6551   2D09              .ds 1
6552   2D0A             cmd_deleteFolder_p:
6553   2D0A              .ds 2
6554   2D0C             cmd_deleteFolder_i:
6555   2D0C              .ds 2
6556   2D0E             cmd_delete_e:
6557   2D0E              .ds 1
6558   2D0F             cmd_delete_needRefresh2:
6559   2D0F              .ds 1
6560   2D10             compareMask1_1:
6561   2D10              .ds 2
6562   2D12             compareMask1_2:
6563   2D12              .ds 2
6564   2D14             compareMask1_3:
6565   2D14              .ds 1
6566   2D15             compareMask_1:
6567   2D15              .ds 2
6568   2D17             compareMask_2:
6569   2D17              .ds 2
6570   2D19             cmd_sel_1:
6571   2D19              .ds 1
6572   2D1A             cmd_sel_f:
6573   2D1A              .ds 2
6574   2D1C             cmd_sel_i:
6575   2D1C              .ds 2
6576   2D1E             cmd_sel_buf:
6577   2D1E              .ds 11
6578   2D29             activePanel:
6579   2D29              .ds 1
6580   2D2A             fileCursorAddr:
6581   2D2A 2C 2D        .dw $+2
6582   2D2C              .ds 1
6583   2D2D             showTextCursor_1:
6584   2D2D              .ds 1
6585   2D2E             showTextCursor_2:
6586   2D2E              .ds 1
6587   2D2F             vLine_1:
6588   2D2F              .ds 2
6589   2D31             vLine_2:
6590   2D31              .ds 1
6591   2D32             vLine_3:
6592   2D32              .ds 1
6593   2D33             drawRect_1:
6594   2D33              .ds 2
6595   2D35             drawRect_2:
6596   2D35              .ds 1
6597   2D36             drawRect_3:
6598   2D36              .ds 1
6599   2D37             drawRect_i:
6600   2D37              .ds 1
6601   2D38             fillRect_1:
6602   2D38              .ds 2
6603   2D3A             fillRect_2:
6604   2D3A              .ds 1
6605   2D3B             fillRect_3:
6606   2D3B              .ds 1
6607   2D3C             fillRect_4:
6608   2D3C              .ds 1
6609   2D3D             drawFilesCountInt_1:
6610   2D3D              .ds 2
6611   2D3F             drawFilesCountInt_2:
6612   2D3F              .ds 2
6613   2D41             drawFilesCountInt_v:
6614   2D41              .ds 1
6615   2D42             drawFilesCountInt_a:
6616   2D42              .ds 2
6617   2D44             drawPanel_1:
6618   2D44              .ds 2
6619   2D46             drawPanelTitle_1:
6620   2D46              .ds 1
6621   2D47             drawPanelTitle_p:
6622   2D47              .ds 2
6623   2D49             drawPanelTitle_l:
6624   2D49              .ds 2
6625   2D4B             drawPanelTitle_x:
6626   2D4B              .ds 1
6627   2D4C             drawFile2_1:
6628   2D4C              .ds 2
6629   2D4E             drawFile2_2:
6630   2D4E              .ds 2
6631   2D50             drawColumn_1:
6632   2D50              .ds 1
6633   2D51             drawColumn_a:
6634   2D51              .ds 2
6635   2D53             drawColumn_y:
6636   2D53              .ds 1
6637   2D54             drawColumn_f:
6638   2D54              .ds 2
6639   2D56             drawFile_1:
6640   2D56              .ds 1
6641   2D57             drawFile_2:
6642   2D57              .ds 1
6643   2D58             drawFile_3:
6644   2D58              .ds 2
6645   2D5A             drawFileInfo1_1:
6646   2D5A              .ds 2
6647   2D5C             drawFileInfo2_1:
6648   2D5C              .ds 2
6649   2D5E             drawCmdLineWithPath_l:
6650   2D5E              .ds 2
6651   2D60             drawCmdLineWithPath_old:
6652   2D60              .ds 2
6653   2D62             drawWindow_1:
6654   2D62              .ds 2
6655   2D64             drawWindowText_1:
6656   2D64              .ds 1
6657   2D65             drawWindowText_2:
6658   2D65              .ds 1
6659   2D66             drawWindowText_3:
6660   2D66              .ds 2
6661   2D68             drawWindowProgress_1:
6662   2D68              .ds 1
6663   2D69             drawWindowProgress_2:
6664   2D69              .ds 1
6665   2D6A             drawWindowProgress_3:
6666   2D6A              .ds 1
6667   2D6B             drawWindowProgress_4:
6668   2D6B              .ds 1
6669   2D6C             drawInput_1:
6670   2D6C              .ds 1
6671   2D6D             drawInput_2:
6672   2D6D              .ds 1
6673   2D6E             drawInput_3:
6674   2D6E              .ds 1
6675   2D6F             drawInput_c1:
6676   2D6F              .ds 2
6677   2D71             drawInput_old:
6678   2D71              .ds 2
6679   2D73             drawInput_cmdline_offset:
6680   2D73              .ds 2
6681   2D75             drawInput_cmdline_pos:
6682   2D75              .ds 2
6683   2D77             drawWindowInput_1:
6684   2D77              .ds 1
6685   2D78             drawWindowInput_2:
6686   2D78              .ds 1
6687   2D79             drawWindowInput_3:
6688   2D79              .ds 1
6689   2D7A             memswap_1:
6690   2D7A              .ds 2
6691   2D7C             memswap_2:
6692   2D7C              .ds 2
6693   2D7E             memswap_3:
6694   2D7E              .ds 2
6695   2D80             i2s32_1:
6696   2D80              .ds 2
6697   2D82             i2s32_2:
6698   2D82              .ds 2
6699   2D84             i2s32_3:
6700   2D84              .ds 2
6701   2D86             i2s32_4:
6702   2D86              .ds 1
6703   2D87             i2s32_v:
6704   2D87              .ds 4
6705   2D8B             i2s_1:
6706   2D8B              .ds 2
6707   2D8D             i2s_2:
6708   2D8D              .ds 2
6709   2D8F             i2s_3:
6710   2D8F              .ds 2
6711   2D91             i2s_4:
6712   2D91              .ds 1
6713   2D92             add32_32_1:
6714   2D92              .ds 2
6715   2D94             add32_32_2:
6716   2D94              .ds 2
6717   2D96             strlen_1:
6718   2D96              .ds 2
6719   2D98             memcmp_1:
6720   2D98              .ds 2
6721   2D9A             memcmp_2:
6722   2D9A              .ds 2
6723   2D9C             memcmp_3:
6724   2D9C              .ds 2
6725   2D9E             op_div16_mod:
6726   2D9E              .ds 2
6727   2DA0             memset_1:
6728   2DA0              .ds 2
6729   2DA2             memset_2:
6730   2DA2              .ds 1
6731   2DA3             memset_3:
6732   2DA3              .ds 2
6733   2DA5             memcpy_1:
6734   2DA5              .ds 2
6735   2DA7             memcpy_2:
6736   2DA7              .ds 2
6737   2DA9             memcpy_3:
6738   2DA9              .ds 2
6739   2DAB             fs_findfirst_1:
6740   2DAB              .ds 2
6741   2DAD             fs_findfirst_2:
6742   2DAD              .ds 2
6743   2DAF             fs_findfirst_3:
6744   2DAF              .ds 2
6745   2DB1             strcpy_1:
6746   2DB1              .ds 2
6747   2DB3             strcpy_2:
6748   2DB3              .ds 2
6749   2DB5             memcpy_back_1:
6750   2DB5              .ds 2
6751   2DB7             memcpy_back_2:
6752   2DB7              .ds 2
6753   2DB9             memcpy_back_3:
6754   2DB9              .ds 2
6755   2DBB             strchr_1:
6756   2DBB              .ds 2
6757   2DBD             strchr_2:
6758   2DBD              .ds 1
6759   2DBE             strcmp_1:
6760   2DBE              .ds 2
6761   2DC0             strcmp_2:
6762   2DC0              .ds 2
6763   2DC2             strcmp_a:
6764   2DC2              .ds 1
6765   2DC3             strcmp_b:
6766   2DC3              .ds 1
6767   2DC4             fs_open_1:
6768   2DC4              .ds 2
6769   2DC6             fs_read_1:
6770   2DC6              .ds 2
6771   2DC8             fs_read_2:
6772   2DC8              .ds 2
6773   2DCA             fs_create_1:
6774   2DCA              .ds 2
6775   2DCC             fs_write_1:
6776   2DCC              .ds 2
6777   2DCE             fs_write_2:
6778   2DCE              .ds 2
6779   2DD0             fs_exec_1:
6780   2DD0              .ds 2
6781   2DD2             fs_exec_2:
6782   2DD2              .ds 2
6783   2DD4             fs_cmdLine:
6784   2DD4 D6 2D        .dw $+2
6785   2DD6              .ds 1
6786   2DD7             fs_selfName:
6787   2DD7 D9 2D        .dw $+2
6788   2DD9              .ds 1
6789   2DDA             fs_low:
6790   2DDA              .ds 2
6791   2DDC             fs_high:
6792   2DDC              .ds 2
6793   2DDE             fs_addr:
6794   2DDE              .ds 1
6795   2DDF             set32_1:
6796   2DDF              .ds 2
6797   2DE1             set32_2:
6798   2DE1              .ds 2
6799   2DE3             div32_16_1:
6800   2DE3              .ds 2
6801   2DE5             div32_16_2:
6802   2DE5              .ds 2
6803   2DE7             div32_16_tmp:
6804   2DE7              .ds 2
6805   2DE9             add32_16_1:
6806   2DE9              .ds 2
6807   2DEB             add32_16_2:
6808   2DEB              .ds 2
6809   2DED             cmp32_32_1:
6810   2DED              .ds 2
6811   2DEF             cmp32_32_2:
6812   2DEF              .ds 2
6813   2DF1             sub32_32_1:
6814   2DF1              .ds 2
6815   2DF3             sub32_32_2:
6816   2DF3              .ds 2
6817   2DF5             fs_delete_1:
6818   2DF5              .ds 2
6819   2DF7             fs_mkdir_1:
6820   2DF7              .ds 2
6821   2DF9             fs_move_1:
6822   2DF9              .ds 2
6823   2DFB             fs_move_2:
6824   2DFB              .ds 2
6825   2DFD             radio86rkScreen2a_i:
6826   2DFD              .ds 1
6827   2DFE             directCursor_1:
6828   2DFE              .ds 1
6829   2DFF             directCursor_2:
6830   2DFF              .ds 1
6831   2E00             charAddr_1:
6832   2E00              .ds 1
6833   2E01             charAddr_2:
6834   2E01              .ds 1
6835   2E02             print2_1:
6836   2E02              .ds 2
6837   2E04             print2_2:
6838   2E04              .ds 2
6839   2E06             radio86rkVideoMem:
6840   2E06 C2 36        .dw 14018
6841   2E08             
6842   2E08             radio86rkVideoBpl:
6843   2E08 4E           .db 78
6844   2E09             
6845   2E09             print_1:
6846   2E09              .ds 1
6847   2E0A             print_2:
6848   2E0A              .ds 1
6849   2E0B             print_3:
6850   2E0B              .ds 2
6851   2E0D             printn_1:
6852   2E0D              .ds 1
6853   2E0E             printn_2:
6854   2E0E              .ds 1
6855   2E0F             printn_3:
6856   2E0F              .ds 1
6857   2E10             printn_4:
6858   2E10              .ds 2
6859   2E12             print2n_1:
6860   2E12              .ds 2
6861   2E14             print2n_2:
6862   2E14              .ds 1
6863   2E15             print2n_3:
6864   2E15              .ds 2
6865   2E17             print2cn_1:
6866   2E17              .ds 2
6867   2E19             print2cn_2:
6868   2E19              .ds 1
6869   2E1A             print2cn_3:
6870   2E1A              .ds 1
6871   2E1B             printm_1:
6872   2E1B              .ds 1
6873   2E1C             printm_2:
6874   2E1C              .ds 1
6875   2E1D             printm_3:
6876   2E1D              .ds 1
6877   2E1E             printm_4:
6878   2E1E              .ds 2
6879   2E20             printcn_1:
6880   2E20              .ds 1
6881   2E21             printcn_2:
6882   2E21              .ds 1
6883   2E22             printcn_3:
6884   2E22              .ds 1
6885   2E23             printcn_4:
6886   2E23              .ds 1
6887   2E24             fs_open0_1:
6888   2E24              .ds 2
6889   2E26             fs_open0_2:
6890   2E26              .ds 1
6891   2E27             fs_seek_1:
6892   2E27              .ds 2
6893   2E29             fs_seek_2:
6894   2E29              .ds 2
6895   2E2B             fs_seek_3:
6896   2E2B              .ds 1
6897   2E2C             print2m_1:
6898   2E2C              .ds 2
6899   2E2E             print2m_2:
6900   2E2E              .ds 1
6901   2E2F             print2m_3:
6902   2E2F              .ds 2
6903   2E31             string13:
6904   2E31 00           .db 0
6905   2E32             string20:
6906   2E32 17 00        .db 23,0
6907   2E34             string49:
6908   2E34 20 20 20 20  .db 32,32,32,32,32,60,68,73,82,62,0
6908   2E38 20 3C 44 49 
6908   2E3C 52 3E 00 
6909   2E3F             string16:
6910   2E3F 20 6B 6F 70  .db 32,107,111,112,105,114,111,119,97,110,105,101,32,0
6910   2E43 69 72 6F 77 
6910   2E47 61 6E 69 65 
6910   2E4B 20 00 
6911   2E4D             string22:
6912   2E4D 20 6B 6F 70  .db 32,107,111,112,105,114,111,119,97,116,120,32,0
6912   2E51 69 72 6F 77 
6912   2E55 61 74 78 20 
6912   2E59 00 
6913   2E5A             string30:
6914   2E5A 20 6D 62 00  .db 32,109,98,0
6915   2E5E             string31:
6916   2E5E 20 6E 61 6B  .db 32,110,97,107,111,112,105,116,101,108,120,32,0
6916   2E62 6F 70 69 74 
6916   2E66 65 6C 78 20 
6916   2E6A 00 
6917   2E6B             string0:
6918   2E6B 20 6F 7B 69  .db 32,111,123,105,98,107,97,32,0
6918   2E6F 62 6B 61 20 
6918   2E73 00 
6919   2E74             string24:
6920   2E74 20 70 65 72  .db 32,112,101,114,101,105,109,101,110,111,119,97,110,105,101,47,112,101,114,101,109,101,125,101,110,105,101,32,0
6920   2E78 65 69 6D 65 
6920   2E7C 6E 6F 77 61 
6920   2E80 6E 69 65 2F 
6920   2E84 70 65 72 65 
6920   2E88 6D 65 7D 65 
6920   2E8C 6E 69 65 20 
6920   2E90 00 
6921   2E91             string23:
6922   2E91 20 70 65 72  .db 32,112,101,114,101,105,109,101,110,111,119,97,116,120,47,112,101,114,101,109,101,115,116,105,116,120,32,0
6922   2E95 65 69 6D 65 
6922   2E99 6E 6F 77 61 
6922   2E9D 74 78 2F 70 
6922   2EA1 65 72 65 6D 
6922   2EA5 65 73 74 69 
6922   2EA9 74 78 20 00 
6923   2EAD             string41:
6924   2EAD 20 70 6F 6D  .db 32,112,111,109,101,116,105,116,120,32,102,97,106,108,121,32,0
6924   2EB1 65 74 69 74 
6924   2EB5 78 20 66 61 
6924   2EB9 6A 6C 79 20 
6924   2EBD 00 
6925   2EBE             string28:
6926   2EBE 20 73 6F 7A  .db 32,115,111,122,100,97,116,120,32,102,97,106,108,32,0
6926   2EC2 64 61 74 78 
6926   2EC6 20 66 61 6A 
6926   2ECA 6C 20 00 
6927   2ECD             string27:
6928   2ECD 20 73 6F 7A  .db 32,115,111,122,100,97,116,120,32,112,97,112,107,117,32,0
6928   2ED1 64 61 74 78 
6928   2ED5 20 70 61 70 
6928   2ED9 6B 75 20 00 
6929   2EDD             string36:
6930   2EDD 20 75 64 61  .db 32,117,100,97,108,101,110,105,101,32,0
6930   2EE1 6C 65 6E 69 
6930   2EE5 65 20 00 
6931   2EE8             string37:
6932   2EE8 20 75 64 61  .db 32,117,100,97,108,105,116,120,32,0
6932   2EEC 6C 69 74 78 
6932   2EF0 20 00 
6933   2EF2             string40:
6934   2EF2 2A 2E 2A 00  .db 42,46,42,0
6935   2EF6             string15:
6936   2EF6 2E 49 4E 00  .db 46,73,78,0
6937   2EFA             string14:
6938   2EFA 2E 52 4B 00  .db 46,82,75,0
6939   2EFE             string21:
6940   2EFE 2F 00        .db 47,0
6941   2F00             string53:
6942   2F00 30 31 32 33  .db 48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0
6942   2F04 34 35 36 37 
6942   2F08 38 39 41 42 
6942   2F0C 43 44 45 46 
6942   2F10 00 
6943   2F11             string50:
6944   2F11 3E 00        .db 62,0
6945   2F13             string46:
6946   2F13 46 31 20 46  .db 70,49,32,70,82,69,69,32,70,50,32,78,69,87,32,32,70,51,32,86,73,69,87,32,32,70,52,32,69,68,73,84,32,70,53,32,67,79,80,89,32,70,54,32,82,69,78,32,32,70,55,32,68,73,82,32,32,70,56,32,68,69,76,0
6946   2F17 52 45 45 20 
6946   2F1B 46 32 20 4E 
6946   2F1F 45 57 20 20 
6946   2F23 46 33 20 56 
6946   2F27 49 45 57 20 
6946   2F2B 20 46 34 20 
6946   2F2F 45 44 49 54 
6946   2F33 20 46 35 20 
6946   2F37 43 4F 50 59 
6946   2F3B 20 46 36 20 
6946   2F3F 52 45 4E 20 
6946   2F43 20 46 37 20 
6946   2F47 44 49 52 20 
6946   2F4B 20 46 38 20 
6946   2F4F 44 45 4C 00 
6947   2F53             string47:
6948   2F53 5B 00        .db 91,0
6949   2F55             string51:
6950   2F55 5B 20 41 4E  .db 91,32,65,78,89,32,75,69,89,32,93,0
6950   2F59 59 20 4B 45 
6950   2F5D 59 20 5D 00 
6951   2F61             string52:
6952   2F61 5B 20 61 72  .db 91,32,97,114,50,32,45,32,115,116,111,112,32,93,0
6952   2F65 32 20 2D 20 
6952   2F69 73 74 6F 70 
6952   2F6D 20 5D 00 
6953   2F70             string12:
6954   2F70 5B 20 77 6B  .db 91,32,119,107,32,45,32,111,107,32,93,32,32,91,32,97,114,50,32,45,32,111,116,109,101,110,97,32,93,0
6954   2F74 20 2D 20 6F 
6954   2F78 6B 20 5D 20 
6954   2F7C 20 5B 20 61 
6954   2F80 72 32 20 2D 
6954   2F84 20 6F 74 6D 
6954   2F88 65 6E 61 20 
6954   2F8C 5D 00 
6955   2F8E             string48:
6956   2F8E 5D 00        .db 93,0
6957   2F90             string42:
6958   2F90 62 61 6A 74  .db 98,97,106,116,32,119,32,32,32,32,0
6958   2F94 20 77 20 20 
6958   2F98 20 20 00 
6959   2F9B             string7:
6960   2F9B 64 69 73 6B  .db 100,105,115,107,32,122,97,112,111,108,110,101,110,0
6960   2F9F 20 7A 61 70 
6960   2FA3 6F 6C 6E 65 
6960   2FA7 6E 00 
6961   2FA9             string8:
6962   2FA9 66 61 69 6C  .db 102,97,105,108,32,115,117,125,101,115,116,119,117,101,116,0
6962   2FAD 20 73 75 7D 
6962   2FB1 65 73 74 77 
6962   2FB5 75 65 74 00 
6963   2FB9             string4:
6964   2FB9 66 61 6A 6C  .db 102,97,106,108,32,110,101,32,111,116,107,114,121,116,0
6964   2FBD 20 6E 65 20 
6964   2FC1 6F 74 6B 72 
6964   2FC5 79 74 00 
6965   2FC8             string44:
6966   2FC8 66 61 6A 6C  .db 102,97,106,108,97,104,32,0
6966   2FCC 61 68 20 00 
6967   2FD0             string43:
6968   2FD0 66 61 6A 6C  .db 102,97,106,108,101,32,0
6968   2FD4 65 20 00 
6969   2FD7             string45:
6970   2FD7 69 6D 71 00  .db 105,109,113,0
6971   2FDB             string11:
6972   2FDB 69 6D 71 3A  .db 105,109,113,58,0
6972   2FDF 00 
6973   2FE0             string17:
6974   2FE0 69 7A 3A 00  .db 105,122,58,0
6975   2FE4             string6:
6976   2FE4 6D 61 6B 73  .db 109,97,107,115,105,109,117,109,32,102,97,106,108,111,119,32,119,32,112,97,112,107,101,0
6976   2FE8 69 6D 75 6D 
6976   2FEC 20 66 61 6A 
6976   2FF0 6C 6F 77 20 
6976   2FF4 77 20 70 61 
6976   2FF8 70 6B 65 00 
6977   2FFC             string1:
6978   2FFC 6E 65 74 20  .db 110,101,116,32,102,97,106,108,111,119,111,106,32,115,105,115,116,101,109,121,0
6978   3000 66 61 6A 6C 
6978   3004 6F 77 6F 6A 
6978   3008 20 73 69 73 
6978   300C 74 65 6D 79 
6978   3010 00 
6979   3011             string25:
6980   3011 6F 7B 69 62  .db 111,123,105,98,107,97,32,107,111,112,105,114,111,119,97,110,105,113,0
6980   3015 6B 61 20 6B 
6980   3019 6F 70 69 72 
6980   301D 6F 77 61 6E 
6980   3021 69 71 00 
6981   3024             string2:
6982   3024 6F 7B 69 62  .db 111,123,105,98,107,97,32,110,97,107,111,112,105,116,101,108,113,0
6982   3028 6B 61 20 6E 
6982   302C 61 6B 6F 70 
6982   3030 69 74 65 6C 
6982   3034 71 00 
6983   3036             string26:
6984   3036 6F 7B 69 62  .db 111,123,105,98,107,97,32,112,101,114,101,109,101,125,101,110,105,113,0
6984   303A 6B 61 20 70 
6984   303E 65 72 65 6D 
6984   3042 65 7D 65 6E 
6984   3046 69 71 00 
6985   3049             string29:
6986   3049 6F 7B 69 62  .db 111,123,105,98,107,97,32,115,111,122,100,97,110,105,113,32,112,97,112,107,105,0
6986   304D 6B 61 20 73 
6986   3051 6F 7A 64 61 
6986   3055 6E 69 71 20 
6986   3059 70 61 70 6B 
6986   305D 69 00 
6987   305F             string39:
6988   305F 6F 7B 69 62  .db 111,123,105,98,107,97,32,117,100,97,108,101,110,105,113,0
6988   3063 6B 61 20 75 
6988   3067 64 61 6C 65 
6988   306B 6E 69 71 00 
6989   306F             string33:
6990   306F 6F 7B 69 62  .db 111,123,105,98,107,97,32,126,116,101,110,105,113,0
6990   3073 6B 61 20 7E 
6990   3077 74 65 6E 69 
6990   307B 71 00 
6991   307D             string3:
6992   307D 70 61 70 6B  .db 112,97,112,107,97,32,110,101,32,112,117,115,116,97,0
6992   3081 61 20 6E 65 
6992   3085 20 70 75 73 
6992   3089 74 61 00 
6993   308C             string9:
6994   308C 70 72 65 72  .db 112,114,101,114,119,97,110,111,32,112,111,108,120,122,111,119,97,116,101,108,101,109,0
6994   3090 77 61 6E 6F 
6994   3094 20 70 6F 6C 
6994   3098 78 7A 6F 77 
6994   309C 61 74 65 6C 
6994   30A0 65 6D 00 
6995   30A3             string32:
6996   30A3 70 72 6F 77  .db 112,114,111,119,101,114,107,97,46,46,46,0
6996   30A7 65 72 6B 61 
6996   30AB 2E 2E 2E 00 
6997   30AF             string10:
6998   30AF 70 75 74 78  .db 112,117,116,120,32,98,111,108,120,123,101,32,50,53,53,32,115,105,109,119,111,108,111,119,0
6998   30B3 20 62 6F 6C 
6998   30B7 78 7B 65 20 
6998   30BB 32 35 35 20 
6998   30BF 73 69 6D 77 
6998   30C3 6F 6C 6F 77 
6998   30C7 00 
6999   30C8             string5:
7000   30C8 70 75 74 78  .db 112,117,116,120,32,110,101,32,110,97,106,100,101,110,0
7000   30CC 20 6E 65 20 
7000   30D0 6E 61 6A 64 
7000   30D4 65 6E 00 
7001   30D7             string19:
7002   30D7 73 6B 6F 70  .db 115,107,111,112,105,114,111,119,97,110,111,32,32,32,32,32,32,32,32,32,32,32,47,32,32,32,32,32,32,32,32,32,32,32,98,97,106,116,0
7002   30DB 69 72 6F 77 
7002   30DF 61 6E 6F 20 
7002   30E3 20 20 20 20 
7002   30E7 20 20 20 20 
7002   30EB 20 20 2F 20 
7002   30EF 20 20 20 20 
7002   30F3 20 20 20 20 
7002   30F7 20 20 62 61 
7002   30FB 6A 74 00 
7003   30FE             string34:
7004   30FE 73 77 6F 62  .db 115,119,111,98,111,100,110,111,58,32,0
7004   3102 6F 64 6E 6F 
7004   3106 3A 20 00 
7005   3109             string18:
7006   3109 77 3A 00     .db 119,58,0
7007   310C             string35:
7008   310C 77 73 65 67  .db 119,115,101,103,111,58,0
7008   3110 6F 3A 00 
7009   3113             string38:
7010   3113 77 79 20 68  .db 119,121,32,104,111,116,105,116,101,32,117,100,97,108,105,116,120,32,102,97,105,108,40,121,41,63,0
7010   3117 6F 74 69 74 
7010   311B 65 20 75 64 
7010   311F 61 6C 69 74 
7010   3123 78 20 66 61 
7010   3127 69 6C 28 79 
7010   312B 29 3F 00 
7011   312E               .end
tasm: Number of errors = 0
