   1               		.file	"fs.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	fs_clust2sect:
  12               	.LFB7:
  13               		.file 1 "fs.c"
   1:fs.c          **** /*
   2:fs.c          **** It is an open source software to implement FAT file system to
   3:fs.c          **** small embedded systems. This is a free software and is opened for education,
   4:fs.c          **** research and commercial developments under license policy of following trems.
   5:fs.c          **** 
   6:fs.c          **** (C) 2013-2014 vinxru
   7:fs.c          **** (C) 2010, ChaN, all right reserved.
   8:fs.c          **** 
   9:fs.c          **** It is a free software and there is NO WARRANTY.
  10:fs.c          **** No restriction on use. You can use, modify and redistribute it for
  11:fs.c          **** personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
  12:fs.c          **** Redistributions of source code must retain the above copyright notice.
  13:fs.c          **** 
  14:fs.c          **** Version 1.0 10-05-2014
  15:fs.c          **** 
  16:fs.c          **** P.S. goto allows you to save memory! Like other horrors bellow.
  17:fs.c          **** 
  18:fs.c          **** Program size: 3070 words (6140 bytes), 75% of FLASH at ATMega8 !!!
  19:fs.c          **** */
  20:fs.c          **** 
  21:fs.c          **** /* 
  22:fs.c          **** –Ø –Ω–µ —Å—Ç–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
  23:fs.c          **** CON,PRN,AUX,CLOCK$,NUL,COM1,COM2,COM3,COM4,LPT1,LPT2,LPT3
  24:fs.c          **** —á—Ç–æ –±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä. –§–∞–π–ª—ã —Å —Ç–∞–∫–∏–º–∏ –∏–º–µ
  25:fs.c          **** –æ—Å—Ç–∞–≤–ª—è—é –Ω–∞ —Å–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞.
  26:fs.c          **** */
  27:fs.c          **** 
  28:fs.c          **** //#include <stdafx.h>
  29:fs.c          **** #include <stdint.h>
  30:fs.c          **** #include <avr/pgmspace.h>
  31:fs.c          **** #include "fs.h"
  32:fs.c          **** #include "sd.h"
  33:fs.c          **** #include <string.h>
  34:fs.c          **** 
  35:fs.c          **** /* –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ */
  36:fs.c          **** 
  37:fs.c          **** #define	LD_WORD(ptr)    (*(WORD*)(ptr))
  38:fs.c          **** #define	LD_DWORD(ptr)   (*(unsigned long*)(ptr))
  39:fs.c          **** 
  40:fs.c          **** /* –ó–Ω–∞—á–µ–Ω–∏—è fs_type */
  41:fs.c          ****                   
  42:fs.c          **** #define FS_FAT16	0
  43:fs.c          **** #define FS_FAT32	1
  44:fs.c          **** #define FS_ERROR	2
  45:fs.c          **** 
  46:fs.c          **** /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
  47:fs.c          **** 
  48:fs.c          **** #define FREE_CLUSTER    0
  49:fs.c          **** #define LAST_CLUSTER    0x0FFFFFFF
  50:fs.c          **** 
  51:fs.c          **** /* –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ boot-—Å–µ–∫—Ç–æ—Ä–∞ */
  52:fs.c          **** 
  53:fs.c          **** typedef struct { 
  54:fs.c          **** #ifndef FS_DISABLE_CHECK
  55:fs.c          ****   uint8_t  opened;              /* –ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ: OPENED_NONE, OPENED_FILE, OPENED_DIR */
  56:fs.c          **** #endif
  57:fs.c          ****   uint8_t  entry_able;          /* –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ fs_dirrea
  58:fs.c          ****   WORD  entry_index;         /* –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ */
  59:fs.c          ****   unsigned long entry_cluster;       /* –ö–ª–∞—Å—Ç–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ */
  60:fs.c          ****   unsigned long entry_sector;        /* –°–µ–∫—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ */
  61:fs.c          ****   unsigned long entry_start_cluster; /* –ü–µ—Ä–≤—ã–π —Å–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–
  62:fs.c          ****   unsigned long ptr;                 /* –£–∫–∞–∑–∞—Ç–µ–ª—å —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞*/
  63:fs.c          ****   unsigned long size;                /* –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ / File size */
  64:fs.c          ****   unsigned long cluster;             /* –¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä —Ñ–∞–π–ª–∞ */
  65:fs.c          ****   unsigned long sector;              /* –¢–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä —Ñ–∞–π–ª–∞ */
  66:fs.c          ****   uint8_t  changed;             /* –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–
  67:fs.c          **** } File;
  68:fs.c          **** 
  69:fs.c          **** uint8_t  fs_type;         /* FS_FAT16, FS_FAT32, FS_ERROR */
  70:fs.c          **** unsigned long fs_fatbase;      /* –ê–¥—Ä–µ—Å –ø–µ—Ä–≤–æ–π FAT */
  71:fs.c          **** unsigned long fs_fatbase2;     /* –ê–¥—Ä–µ—Å –≤—Ç–æ—Ä–æ–π FAT */
  72:fs.c          **** uint8_t  fs_csize;        /* –†–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ —Å–µ–∫—Ç–æ—Ä–∞—Ö */
  73:fs.c          **** WORD  fs_n_rootdir;    /* –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ (—Ç–æ–ª—å
  74:fs.c          **** unsigned long fs_n_fatent;     /* –ö–æ–ª-–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
  75:fs.c          **** unsigned long fs_dirbase;      /* –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ (—Å–µ–∫—Ç–æ—Ä –¥–ª—è FAT16, –∫–ª–
  76:fs.c          **** unsigned long fs_database;     /* –ê–¥—Ä–µ—Å –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ */
  77:fs.c          **** 
  78:fs.c          **** /* –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –û—Å—Ç–∞–ª—å–Ω–æ–µ */
  79:fs.c          **** 
  80:fs.c          **** uint8_t  lastError;       /* –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ */
  81:fs.c          **** unsigned long fs_fatoptim;     /* –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä */
  82:fs.c          **** unsigned long fs_tmp;          /* –ò—Å–ø–æ–ª—å–∑—É–µ—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π */
  83:fs.c          **** WORD  fs_wtotal;       /* –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ fs_write_start, fs_write_end*
  84:fs.c          **** 
  85:fs.c          **** /* –û—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ */
  86:fs.c          **** 
  87:fs.c          **** File fs_file;
  88:fs.c          **** 
  89:fs.c          **** #ifndef FS_DISABLE_SWAP
  90:fs.c          **** File fs_secondFile;
  91:fs.c          **** #endif
  92:fs.c          **** 
  93:fs.c          **** /* –°—Ç—Ä—É–∫—Ç—É—Ä–∞ boot-—Å–µ–∫—Ç–æ—Ä–∞ */
  94:fs.c          **** 
  95:fs.c          **** #define BPB_SecPerClus    13
  96:fs.c          **** #define BPB_RsvdSecCnt    14
  97:fs.c          **** #define BPB_NumFATs       16
  98:fs.c          **** #define BPB_RootEntCnt    17
  99:fs.c          **** #define BPB_TotSec16      19
 100:fs.c          **** #define BPB_FATSz16       22
 101:fs.c          **** #define BPB_TotSec32      32
 102:fs.c          **** #define BS_FilSysType     54
 103:fs.c          **** #define BPB_FATSz32       36
 104:fs.c          **** #define BPB_RootClus      44
 105:fs.c          **** #define BS_FilSysType32   82
 106:fs.c          **** #define MBR_Table         446
 107:fs.c          **** 
 108:fs.c          **** /**************************************************************************
 109:fs.c          **** *  –ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –≤ –±—É—Ñ–µ—Ä                                                 *
 110:fs.c          **** **************************************************************************/
 111:fs.c          **** 
 112:fs.c          **** static uint8_t sd_readBuf(unsigned long sector) {
 113:fs.c          ****   return sd_read(buf, sector, 0, 512);
 114:fs.c          **** }
 115:fs.c          **** 
 116:fs.c          **** /**************************************************************************
 117:fs.c          **** *  –ó–∞–ø–∏—Å—å –±—É—Ñ–µ—Ä–∞ –≤ —Å–µ–∫—Ç–æ—Ä                                                 *
 118:fs.c          **** **************************************************************************/
 119:fs.c          **** 
 120:fs.c          **** static uint8_t sd_writeBuf(unsigned long sector) {
 121:fs.c          ****   return sd_write512(buf, sector);
 122:fs.c          **** }
 123:fs.c          **** 
 124:fs.c          **** /**************************************************************************
 125:fs.c          **** *  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è                                                          *
 126:fs.c          **** **************************************************************************/
 127:fs.c          **** 
 128:fs.c          **** uint8_t fs_init(void) {
 129:fs.c          ****   unsigned long bsect, fsize, tsect;
 130:fs.c          **** 
 131:fs.c          ****   /* –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é */
 132:fs.c          ****   fs_fatoptim = 2;
 133:fs.c          **** 
 134:fs.c          ****   /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
 135:fs.c          **** #ifndef FS_DISABLE_CHECK
 136:fs.c          ****   fs_file.opened = OPENED_NONE;
 137:fs.c          **** #ifndef FS_DISABLE_SWAP  
 138:fs.c          ****   fs_secondFile.opened = OPENED_NONE;
 139:fs.c          **** #endif 
 140:fs.c          ****   fs_type = FS_ERROR;
 141:fs.c          **** #endif
 142:fs.c          **** 
 143:fs.c          ****   /* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è */
 144:fs.c          ****   if(sd_init()) return 1;
 145:fs.c          ****   
 146:fs.c          ****   /* –ò—â–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É */
 147:fs.c          ****   bsect = 0;               
 148:fs.c          ****   while(1) {                 
 149:fs.c          ****     if(sd_readBuf(bsect)) return 1;
 150:fs.c          ****     if(LD_WORD(buf + 510) == 0xAA55) {
 151:fs.c          ****       if(LD_WORD(buf + BS_FilSysType  ) == 0x4146) break;
 152:fs.c          ****       if(LD_WORD(buf + BS_FilSysType32) == 0x4146) break;
 153:fs.c          ****       /* –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ MBR */       
 154:fs.c          ****       if(bsect == 0 && buf[MBR_Table+4]) { 
 155:fs.c          ****         bsect = LD_DWORD(buf + (MBR_Table + 8));
 156:fs.c          ****         if(bsect != 0) continue;
 157:fs.c          ****       }      
 158:fs.c          ****     }   
 159:fs.c          **** abort_noFS:
 160:fs.c          ****     lastError = ERR_NO_FILESYSTEM; return 1;
 161:fs.c          ****   }
 162:fs.c          ****         
 163:fs.c          ****   /* –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã FAT –≤ —Å–µ–∫—Ç–æ—Ä–∞—Ö */
 164:fs.c          ****   fsize = LD_WORD(buf + BPB_FATSz16);
 165:fs.c          ****   if(fsize == 0) fsize = LD_DWORD(buf + BPB_FATSz32);
 166:fs.c          ****   
 167:fs.c          ****   /* –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Å–µ–∫—Ç–æ—Ä–∞—Ö */
 168:fs.c          ****   tsect = LD_WORD( buf + BPB_TotSec16);  
 169:fs.c          ****   if(tsect == 0) tsect = LD_DWORD(buf + BPB_TotSec32);
 170:fs.c          ****   
 171:fs.c          ****   /* –†–∞–∑–º–µ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 16 –∏ –¥–
 172:fs.c          ****   fs_n_rootdir = LD_WORD(buf + BPB_RootEntCnt);
 173:fs.c          ****   
 174:fs.c          ****   /* –ê–¥—Ä–µ—Å–∞ —Ç–∞–±–ª–∏—Ü FAT –≤ —Å–µ–∫—Ç–æ—Ä–∞—Ö */
 175:fs.c          ****   fs_fatbase  = bsect + LD_WORD(buf + BPB_RsvdSecCnt);
 176:fs.c          ****   fs_fatbase2 = 0;
 177:fs.c          ****   if(buf[BPB_NumFATs] >= 2) fs_fatbase2 = fs_fatbase + fsize;
 178:fs.c          **** 
 179:fs.c          ****   /* –ö–æ–ª-–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä */
 180:fs.c          ****   fs_csize = buf[BPB_SecPerClus];
 181:fs.c          **** 
 182:fs.c          ****   /* –ö–æ–ª-–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
 183:fs.c          ****   fsize *= buf[BPB_NumFATs];
 184:fs.c          ****   fs_n_fatent = (tsect - LD_WORD(buf + BPB_RsvdSecCnt) - fsize - fs_n_rootdir / 16) / fs_csize + 2;
 185:fs.c          **** 
 186:fs.c          ****   /* –ê–¥—Ä–µ—Å 2-–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ */
 187:fs.c          ****   fs_database = fs_fatbase + fsize + fs_n_rootdir / 16;
 188:fs.c          ****   
 189:fs.c          ****   /* –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã */
 190:fs.c          ****   
 191:fs.c          ****   /* FAT 12 */
 192:fs.c          ****   if(fs_n_fatent < 0xFF7) goto abort_noFS; 
 193:fs.c          ****   
 194:fs.c          ****   /* FAT 16 */
 195:fs.c          ****   if(fs_n_fatent < 0xFFF7) {
 196:fs.c          ****     fs_dirbase = fs_fatbase + fsize; 
 197:fs.c          ****     fs_type = FS_FAT16;
 198:fs.c          ****     return 0;
 199:fs.c          ****   }    
 200:fs.c          ****    
 201:fs.c          ****   /* FAT 32 */
 202:fs.c          ****   fs_dirbase = LD_DWORD(buf + BPB_RootClus);
 203:fs.c          ****   
 204:fs.c          ****   /* –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ */
 205:fs.c          ****   if(LD_WORD(buf + BPB_RsvdSecCnt)>0) {
 206:fs.c          ****     bsect++;
 207:fs.c          ****     if(sd_readBuf(bsect)) return 1;
 208:fs.c          ****     if(LD_DWORD(buf) == 0x41615252 && LD_DWORD(buf + 0x1E4) == 0x61417272 && LD_DWORD(buf + 0x1FC) 
 209:fs.c          ****       LD_DWORD(buf + 0x1E8) = 0xFFFFFFFF;
 210:fs.c          ****       LD_DWORD(buf + 0x1EC) = 0xFFFFFFFF;
 211:fs.c          ****       if(sd_writeBuf(bsect)) return 1;
 212:fs.c          ****     }
 213:fs.c          ****   }
 214:fs.c          ****   fs_type = FS_FAT32;
 215:fs.c          ****       
 216:fs.c          ****   return 0;
 217:fs.c          **** }
 218:fs.c          **** 
 219:fs.c          **** /**************************************************************************
 220:fs.c          **** *  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Å–∫–∞ –∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–
 221:fs.c          **** **************************************************************************/
 222:fs.c          **** 
 223:fs.c          **** uint8_t fs_check(void) {
 224:fs.c          ****   if(!sd_check()) return 0;
 225:fs.c          ****   return fs_init();
 226:fs.c          **** }
 227:fs.c          **** 
 228:fs.c          **** /**************************************************************************
 229:fs.c          **** *  –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –∏–∑ FS_DIRENTRY                                        *
 230:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç buf (—Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ–≥–æ –Ω–µ –Ω–∞–ø–∏
 231:fs.c          **** **************************************************************************/
 232:fs.c          **** 
 233:fs.c          **** static unsigned long fs_getEntryCluster(void) {
 234:fs.c          ****   unsigned long c = LD_WORD(FS_DIRENTRY + DIR_FstClusLO);
 235:fs.c          ****   if(fs_type != FS_FAT16) c |= ((unsigned long)LD_WORD(FS_DIRENTRY + DIR_FstClusHI)) << 16;  
 236:fs.c          ****   return c;
 237:fs.c          **** }
 238:fs.c          **** 
 239:fs.c          **** /**************************************************************************
 240:fs.c          **** *  –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä.                                            *
 241:fs.c          **** *  –ê—Ä–≥—É–º–µ–Ω—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ fs_tmp.                            
 242:fs.c          **** **************************************************************************/
 243:fs.c          **** 
 244:fs.c          **** static uint8_t fs_nextCluster(void) {
 245:fs.c          ****   if(fs_type == FS_FAT16) {                                                                        
 246:fs.c          ****     if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto ab
 247:fs.c          ****     fs_tmp &= 0xFFFF;
 248:fs.c          ****   } else {
 249:fs.c          ****     if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 128, (WORD)((uint8_t)fs_tmp % 128) * 4, 4))
 250:fs.c          ****     fs_tmp &= 0x0FFFFFFF;
 251:fs.c          ****   }                            
 252:fs.c          ****   /* –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—
 253:fs.c          ****   if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
 254:fs.c          ****     fs_tmp = 0;
 255:fs.c          ****   return 0;
 256:fs.c          **** abort:
 257:fs.c          ****   return 1;
 258:fs.c          **** }
 259:fs.c          **** 
 260:fs.c          **** /**************************************************************************
 261:fs.c          **** *  –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –Ω–æ–º–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞             
 262:fs.c          **** *  –ê—Ä–≥—É–º–µ–Ω—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ fs_tmp.                            
 263:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç buf                                                  *
 264:fs.c          **** ***************************************************************************/
 265:fs.c          **** 
 266:fs.c          **** static void fs_clust2sect(void) {
  14               		.loc 1 266 0
  15               		.cfi_startproc
  16 0000 0F93      		push r16
  17               	.LCFI0:
  18               		.cfi_def_cfa_offset 3
  19               		.cfi_offset 16, -2
  20 0002 1F93      		push r17
  21               	.LCFI1:
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 17, -3
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 2 */
  27               	.L__stack_usage = 2
 267:fs.c          ****   fs_tmp = (fs_tmp - 2) * fs_csize + fs_database;
  28               		.loc 1 267 0
  29 0004 A091 0000 		lds r26,fs_csize
  30 0008 2091 0000 		lds r18,fs_tmp
  31 000c 3091 0000 		lds r19,fs_tmp+1
  32 0010 4091 0000 		lds r20,fs_tmp+2
  33 0014 5091 0000 		lds r21,fs_tmp+3
  34 0018 2250      		subi r18,2
  35 001a 3109      		sbc r19,__zero_reg__
  36 001c 4109      		sbc r20,__zero_reg__
  37 001e 5109      		sbc r21,__zero_reg__
  38 0020 B0E0      		ldi r27,0
  39 0022 0E94 0000 		call __muluhisi3
  40 0026 0091 0000 		lds r16,fs_database
  41 002a 1091 0000 		lds r17,fs_database+1
  42 002e 2091 0000 		lds r18,fs_database+2
  43 0032 3091 0000 		lds r19,fs_database+3
  44 0036 600F      		add r22,r16
  45 0038 711F      		adc r23,r17
  46 003a 821F      		adc r24,r18
  47 003c 931F      		adc r25,r19
  48 003e 6093 0000 		sts fs_tmp,r22
  49 0042 7093 0000 		sts fs_tmp+1,r23
  50 0046 8093 0000 		sts fs_tmp+2,r24
  51 004a 9093 0000 		sts fs_tmp+3,r25
  52               	/* epilogue start */
 268:fs.c          **** }
  53               		.loc 1 268 0
  54 004e 1F91      		pop r17
  55 0050 0F91      		pop r16
  56 0052 0895      		ret
  57               		.cfi_endproc
  58               	.LFE7:
  61               	sd_readBuf:
  62               	.LFB1:
 112:fs.c          **** static uint8_t sd_readBuf(unsigned long sector) {
  63               		.loc 1 112 0
  64               		.cfi_startproc
  65               	.LVL0:
  66 0054 0F93      		push r16
  67               	.LCFI2:
  68               		.cfi_def_cfa_offset 3
  69               		.cfi_offset 16, -2
  70 0056 1F93      		push r17
  71               	.LCFI3:
  72               		.cfi_def_cfa_offset 4
  73               		.cfi_offset 17, -3
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 2 */
  77               	.L__stack_usage = 2
  78 0058 AB01      		movw r20,r22
  79 005a BC01      		movw r22,r24
 113:fs.c          ****   return sd_read(buf, sector, 0, 512);
  80               		.loc 1 113 0
  81 005c 00E0      		ldi r16,0
  82 005e 12E0      		ldi r17,lo8(2)
  83 0060 20E0      		ldi r18,0
  84 0062 30E0      		ldi r19,0
  85 0064 80E0      		ldi r24,lo8(buf)
  86 0066 90E0      		ldi r25,hi8(buf)
  87 0068 0E94 0000 		call sd_read
  88               	.LVL1:
  89               	/* epilogue start */
 114:fs.c          **** }
  90               		.loc 1 114 0
  91 006c 1F91      		pop r17
  92 006e 0F91      		pop r16
  93 0070 0895      		ret
  94               		.cfi_endproc
  95               	.LFE1:
  98               	sd_writeBuf:
  99               	.LFB2:
 120:fs.c          **** static uint8_t sd_writeBuf(unsigned long sector) {
 100               		.loc 1 120 0
 101               		.cfi_startproc
 102               	.LVL2:
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 107 0072 AB01      		movw r20,r22
 108 0074 BC01      		movw r22,r24
 121:fs.c          ****   return sd_write512(buf, sector);
 109               		.loc 1 121 0
 110 0076 80E0      		ldi r24,lo8(buf)
 111 0078 90E0      		ldi r25,hi8(buf)
 112 007a 0C94 0000 		jmp sd_write512
 113               	.LVL3:
 114               		.cfi_endproc
 115               	.LFE2:
 118               	fs_saveFatSector:
 119               	.LFB11:
 269:fs.c          **** 
 270:fs.c          **** /**************************************************************************
 271:fs.c          **** *  –ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É                                  
 272:fs.c          **** *  –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –º–µ—Ç–∫–∏ —Ç–æ–º–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, LFN –ø–æ–
 273:fs.c          **** *                                                                         *
 274:fs.c          **** *  –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ, –ø–
 275:fs.c          **** *  –ø—Ä–∏–≤–µ–¥–µ–Ω–æ                                                              *
 276:fs.c          **** *                                                                         *
 277:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç buf[0..MAX_FILENAME-1]                               *
 278:fs.c          **** ***************************************************************************/
 279:fs.c          ****  
 280:fs.c          **** static uint8_t fs_readdirInt(void) {
 281:fs.c          ****   if(fs_file.entry_able) {
 282:fs.c          ****     fs_file.entry_index++;
 283:fs.c          **** 
 284:fs.c          ****     /* –í –ø–∞–ø–∫–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 65536 —Ñ–∞–π–ª–æ–≤, –∞ –≤ –∫–æ—Ä–Ω–µ FAT
 285:fs.c          ****     if(fs_file.entry_index == 0 || (fs_file.entry_cluster == 0 && fs_file.entry_index == fs_n_rootd
 286:fs.c          ****       fs_file.entry_index = 0;
 287:fs.c          **** retEnd:
 288:fs.c          ****       FS_DIRENTRY[DIR_Name] = 0; /* –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–
 289:fs.c          ****       fs_file.entry_able = 0; 
 290:fs.c          ****       return 0; 
 291:fs.c          ****     }	
 292:fs.c          ****       
 293:fs.c          ****     /* –ì—Ä–∞–Ω–∏—Ü–∞ —Å–µ–∫—Ç–æ—Ä–∞ */
 294:fs.c          ****     if(fs_file.entry_index % 16 == 0) {        
 295:fs.c          ****       fs_file.entry_sector++;		
 296:fs.c          **** 
 297:fs.c          ****       /* –ì—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ */
 298:fs.c          ****       if(fs_file.entry_cluster != 0 && ((fs_file.entry_index / 16) % fs_csize) == 0) {
 299:fs.c          **** 
 300:fs.c          ****         /* –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä */ 
 301:fs.c          ****         fs_tmp = fs_file.entry_cluster;
 302:fs.c          ****         if(fs_nextCluster()) return 1;
 303:fs.c          ****         if(fs_tmp == 0) goto retEnd; /* –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä, —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ–º
 304:fs.c          ****          
 305:fs.c          ****         /* –°–æ—Ö—Ä–∞–Ω—è–µ–º */
 306:fs.c          ****         fs_file.entry_cluster = fs_tmp;
 307:fs.c          ****         fs_clust2sect();
 308:fs.c          ****         fs_file.entry_sector = fs_tmp;
 309:fs.c          ****       }
 310:fs.c          ****     }
 311:fs.c          ****   } else {
 312:fs.c          ****     fs_file.entry_index = 0;
 313:fs.c          ****     fs_file.entry_able  = 1;
 314:fs.c          ****     fs_tmp = fs_file.entry_start_cluster; 
 315:fs.c          **** 
 316:fs.c          ****     /* –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –∏ —Å–µ–∫—Ç–æ—Ä –ø–∞–ø–∫–∏. –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –∏–º–µ–µ—Ç —Å–º
 317:fs.c          ****     –¥–ª—è FAT16, –Ω–æ –∑–∞—Ç–æ –∫–æ–¥ —Ö–æ—Ä–æ—à–æ —Å–∂–∏–º–∞–µ—Ç—Å—è. –¢.–∫. —ç—Ç–æ—Ç –∫—É—Å–æ–∫ 
 318:fs.c          ****     –∫—É—Å–∫—É –≤—ã—à–µ. */
 319:fs.c          ****     fs_file.entry_cluster = fs_tmp;
 320:fs.c          ****     fs_clust2sect();
 321:fs.c          ****     fs_file.entry_sector = fs_tmp;
 322:fs.c          **** 
 323:fs.c          ****     /* –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ FS_FAT16 */  
 324:fs.c          ****     if(fs_file.entry_cluster == 0) fs_file.entry_sector = fs_dirbase;
 325:fs.c          ****   }
 326:fs.c          **** 
 327:fs.c          ****   return sd_read(FS_DIRENTRY, fs_file.entry_sector, (WORD)((fs_file.entry_index % 16) * 32), 32);
 328:fs.c          **** }
 329:fs.c          **** 
 330:fs.c          **** /**************************************************************************
 331:fs.c          **** *  –ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É (—É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø
 332:fs.c          **** *                                                                         *
 333:fs.c          **** *  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ fs_opendir, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–
 334:fs.c          **** *  –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –≤–∞–º –Ω–∏—á–µ–≥–æ —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω–∞–¥
 335:fs.c          **** *  –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã               
 336:fs.c          **** *                                                                         *
 337:fs.c          **** *  –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ entry_able=0,  —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞–
 338:fs.c          **** *  –ø–æ –∞–¥—Ä–µ—Å—É entry_start_cluster. –ü—Ä–∏ —ç—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ
 339:fs.c          **** *  entry_able, entry_index, entry_sector, entry_cluster.                  *   
 340:fs.c          **** *                                                                         *
 341:fs.c          **** *  –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ fs_file.entry_able=1, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ç–∏ 4 –ø–µ—Ä–µ–º
 342:fs.c          **** *                                                                         *
 343:fs.c          **** *  –ù–∞ –≤—ã—Ö–æ–¥–µ                                                              *
 344:fs.c          **** *    entry_able     - –µ—Å–ª–∏ 0 –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞—Ç–∞–ª–æ–≥–∞       
 345:fs.c          **** *    entry_sector   - —Å–µ–∫—Ç–æ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                                    *
 346:fs.c          **** *    entry_cluster  - –∫–ª–∞—Å—Ç–µ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                                   *
 347:fs.c          **** *    entry_index    - –Ω–æ–º–µ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                                     *
 348:fs.c          **** *    FS_DIRENTRY    - –æ–ø–∏—Å–∞—Ç–µ–ª—å                                           *
 349:fs.c          **** *                                                                         *
 350:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç buf[0..MAX_FILENAME-1]                               *
 351:fs.c          **** **************************************************************************/
 352:fs.c          **** 
 353:fs.c          **** uint8_t fs_readdir_nocheck(void) {
 354:fs.c          ****   while(!fs_readdirInt()) {
 355:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == 0) fs_file.entry_able = 0;
 356:fs.c          ****     if(fs_file.entry_able == 0) return 0;
 357:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == 0xE5) continue; /*  –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ 0x05 */
 358:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == '.') continue;
 359:fs.c          ****     if((FS_DIRENTRY[DIR_Attr] & AM_VOL) == 0) return 0;
 360:fs.c          ****   }
 361:fs.c          ****   return 1;
 362:fs.c          **** }
 363:fs.c          **** 
 364:fs.c          **** uint8_t fs_readdir() {
 365:fs.c          **** #ifndef FS_DISABLE_CHECK
 366:fs.c          ****   /* –ü–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ */
 367:fs.c          ****   if(fs_file.opened != OPENED_DIR) { lastError = ERR_NOT_OPENED; return 1; }
 368:fs.c          **** #endif
 369:fs.c          ****   return fs_readdir_nocheck();
 370:fs.c          **** }
 371:fs.c          **** 
 372:fs.c          **** /**************************************************************************
 373:fs.c          **** *  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã FAT                              
 374:fs.c          **** **************************************************************************/
 375:fs.c          **** 
 376:fs.c          **** static uint8_t fs_saveFatSector(unsigned long sector) { 
 120               		.loc 1 376 0
 121               		.cfi_startproc
 122               	.LVL4:
 123 007e CF92      		push r12
 124               	.LCFI4:
 125               		.cfi_def_cfa_offset 3
 126               		.cfi_offset 12, -2
 127 0080 DF92      		push r13
 128               	.LCFI5:
 129               		.cfi_def_cfa_offset 4
 130               		.cfi_offset 13, -3
 131 0082 EF92      		push r14
 132               	.LCFI6:
 133               		.cfi_def_cfa_offset 5
 134               		.cfi_offset 14, -4
 135 0084 FF92      		push r15
 136               	.LCFI7:
 137               		.cfi_def_cfa_offset 6
 138               		.cfi_offset 15, -5
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 4 */
 142               	.L__stack_usage = 4
 143 0086 6B01      		movw r12,r22
 144 0088 7C01      		movw r14,r24
 377:fs.c          ****   if(fs_fatbase2) if(sd_writeBuf(fs_fatbase2+sector)) return 1;
 145               		.loc 1 377 0
 146 008a 8091 0000 		lds r24,fs_fatbase2
 147 008e 9091 0000 		lds r25,fs_fatbase2+1
 148 0092 A091 0000 		lds r26,fs_fatbase2+2
 149 0096 B091 0000 		lds r27,fs_fatbase2+3
 150 009a 0097      		sbiw r24,0
 151 009c A105      		cpc r26,__zero_reg__
 152 009e B105      		cpc r27,__zero_reg__
 153 00a0 01F4      		brne .L5
 154               	.LVL5:
 155               	.L6:
 378:fs.c          ****   return sd_writeBuf(fs_fatbase+sector);
 156               		.loc 1 378 0
 157 00a2 6091 0000 		lds r22,fs_fatbase
 158 00a6 7091 0000 		lds r23,fs_fatbase+1
 159 00aa 8091 0000 		lds r24,fs_fatbase+2
 160 00ae 9091 0000 		lds r25,fs_fatbase+3
 161 00b2 6C0D      		add r22,r12
 162 00b4 7D1D      		adc r23,r13
 163 00b6 8E1D      		adc r24,r14
 164 00b8 9F1D      		adc r25,r15
 165               	/* epilogue start */
 379:fs.c          **** }
 166               		.loc 1 379 0
 167 00ba FF90      		pop r15
 168 00bc EF90      		pop r14
 169 00be DF90      		pop r13
 170 00c0 CF90      		pop r12
 171               	.LVL6:
 378:fs.c          ****   return sd_writeBuf(fs_fatbase+sector);
 172               		.loc 1 378 0
 173 00c2 0C94 0000 		jmp sd_writeBuf
 174               	.LVL7:
 175               	.L5:
 377:fs.c          ****   if(fs_fatbase2) if(sd_writeBuf(fs_fatbase2+sector)) return 1;
 176               		.loc 1 377 0 discriminator 1
 177 00c6 BC01      		movw r22,r24
 178 00c8 CD01      		movw r24,r26
 179 00ca 6C0D      		add r22,r12
 180 00cc 7D1D      		adc r23,r13
 181 00ce 8E1D      		adc r24,r14
 182 00d0 9F1D      		adc r25,r15
 183 00d2 0E94 0000 		call sd_writeBuf
 184               	.LVL8:
 185 00d6 8823      		tst r24
 186 00d8 01F0      		breq .L6
 187               		.loc 1 379 0
 188 00da 81E0      		ldi r24,lo8(1)
 189               	/* epilogue start */
 190 00dc FF90      		pop r15
 191 00de EF90      		pop r14
 192 00e0 DF90      		pop r13
 193 00e2 CF90      		pop r12
 194               	.LVL9:
 195 00e4 0895      		ret
 196               		.cfi_endproc
 197               	.LFE11:
 200               	fs_allocCluster:
 201               	.LFB12:
 380:fs.c          **** 
 381:fs.c          **** /**************************************************************************
 382:fs.c          **** *  –í—ã–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä                                                       *
 383:fs.c          **** *                                                                         *
 384:fs.c          **** *  –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ fs_tmp                              
 385:fs.c          **** **************************************************************************/
 386:fs.c          **** 
 387:fs.c          **** /* –†–∞–¥–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fs_getfree –ø—Ä–∏—à–ª–æ—Å—å —É—Å–ª–æ–∂–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é fs_allocCl
 388:fs.c          **** –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–∞–∫—Ä–æ
 389:fs.c          **** –∏—Å–∫–ª—é—á–∏—Ç—å –ª–∏—à–Ω–∏–π –∫–æ–¥ */
 390:fs.c          **** 
 391:fs.c          **** #ifdef FS_DISABLE_GETFREESPACE
 392:fs.c          **** #define DIS(X)
 393:fs.c          **** #define ALLOCCLUSTER
 394:fs.c          **** #else
 395:fs.c          **** #define DIS(X) X
 396:fs.c          **** #define ALLOCCLUSTER 0
 397:fs.c          **** #endif
 398:fs.c          **** 
 399:fs.c          **** static uint8_t fs_allocCluster(DIS(uint8_t freeSpace)) {
 202               		.loc 1 399 0
 203               		.cfi_startproc
 204               	.LVL10:
 205 00e6 4F92      		push r4
 206               	.LCFI8:
 207               		.cfi_def_cfa_offset 3
 208               		.cfi_offset 4, -2
 209 00e8 5F92      		push r5
 210               	.LCFI9:
 211               		.cfi_def_cfa_offset 4
 212               		.cfi_offset 5, -3
 213 00ea 6F92      		push r6
 214               	.LCFI10:
 215               		.cfi_def_cfa_offset 5
 216               		.cfi_offset 6, -4
 217 00ec 7F92      		push r7
 218               	.LCFI11:
 219               		.cfi_def_cfa_offset 6
 220               		.cfi_offset 7, -5
 221 00ee 9F92      		push r9
 222               	.LCFI12:
 223               		.cfi_def_cfa_offset 7
 224               		.cfi_offset 9, -6
 225 00f0 AF92      		push r10
 226               	.LCFI13:
 227               		.cfi_def_cfa_offset 8
 228               		.cfi_offset 10, -7
 229 00f2 BF92      		push r11
 230               	.LCFI14:
 231               		.cfi_def_cfa_offset 9
 232               		.cfi_offset 11, -8
 233 00f4 CF92      		push r12
 234               	.LCFI15:
 235               		.cfi_def_cfa_offset 10
 236               		.cfi_offset 12, -9
 237 00f6 DF92      		push r13
 238               	.LCFI16:
 239               		.cfi_def_cfa_offset 11
 240               		.cfi_offset 13, -10
 241 00f8 EF92      		push r14
 242               	.LCFI17:
 243               		.cfi_def_cfa_offset 12
 244               		.cfi_offset 14, -11
 245 00fa FF92      		push r15
 246               	.LCFI18:
 247               		.cfi_def_cfa_offset 13
 248               		.cfi_offset 15, -12
 249 00fc 0F93      		push r16
 250               	.LCFI19:
 251               		.cfi_def_cfa_offset 14
 252               		.cfi_offset 16, -13
 253 00fe 1F93      		push r17
 254               	.LCFI20:
 255               		.cfi_def_cfa_offset 15
 256               		.cfi_offset 17, -14
 257 0100 CF93      		push r28
 258               	.LCFI21:
 259               		.cfi_def_cfa_offset 16
 260               		.cfi_offset 28, -15
 261 0102 DF93      		push r29
 262               	.LCFI22:
 263               		.cfi_def_cfa_offset 17
 264               		.cfi_offset 29, -16
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 15 */
 268               	.L__stack_usage = 15
 269 0104 B82E      		mov r11,r24
 400:fs.c          ****   uint8_t i;
 401:fs.c          ****   unsigned long s;
 402:fs.c          ****   uint8_t *a;
 403:fs.c          **** 
 404:fs.c          ****   /* –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ */
 405:fs.c          ****   fs_tmp = fs_fatoptim;
 270               		.loc 1 405 0
 271 0106 8091 0000 		lds r24,fs_fatoptim
 272 010a 9091 0000 		lds r25,fs_fatoptim+1
 273 010e A091 0000 		lds r26,fs_fatoptim+2
 274 0112 B091 0000 		lds r27,fs_fatoptim+3
 275               	.LVL11:
 276 0116 8093 0000 		sts fs_tmp,r24
 277 011a 9093 0000 		sts fs_tmp+1,r25
 278 011e A093 0000 		sts fs_tmp+2,r26
 279 0122 B093 0000 		sts fs_tmp+3,r27
 280               	.L24:
 406:fs.c          ****   
 407:fs.c          ****   /* –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ç–æ—Ä–∞ */
 408:fs.c          ****   while(1) {
 409:fs.c          ****     /* –°–µ–∫—Ç–æ—Ä –∏ —Å–º–µ—â–µ–Ω–∏–µ */ 
 410:fs.c          ****     s = fs_tmp / 256, i = (uint8_t)fs_tmp, a = (uint8_t*)((WORD*)buf + i);    
 281               		.loc 1 410 0
 282 0126 4091 0000 		lds r20,fs_tmp
 283 012a 5091 0000 		lds r21,fs_tmp+1
 284 012e 6091 0000 		lds r22,fs_tmp+2
 285 0132 7091 0000 		lds r23,fs_tmp+3
 286               	.LVL12:
 287 0136 A42E      		mov r10,r20
 288               	.LVL13:
 411:fs.c          ****     if(fs_type != FS_FAT16) s = fs_tmp / 128, i |= 128, a = (uint8_t*)((unsigned long*)buf - 128 + 
 289               		.loc 1 411 0
 290 0138 8091 0000 		lds r24,fs_type
 291 013c 8111      		cpse r24,__zero_reg__
 292 013e 00C0      		rjmp .L12
 410:fs.c          ****     s = fs_tmp / 256, i = (uint8_t)fs_tmp, a = (uint8_t*)((WORD*)buf + i);    
 293               		.loc 1 410 0
 294 0140 C52E      		mov r12,r21
 295 0142 D62E      		mov r13,r22
 296 0144 E72E      		mov r14,r23
 297 0146 FF24      		clr r15
 298               	.LVL14:
 299 0148 C42F      		mov r28,r20
 300 014a D0E0      		ldi r29,0
 301 014c CC0F      		lsl r28
 302 014e DD1F      		rol r29
 303 0150 C050      		subi r28,lo8(-(buf))
 304 0152 D040      		sbci r29,hi8(-(buf))
 305 0154 00C0      		rjmp .L13
 306               	.LVL15:
 307               	.L12:
 308               		.loc 1 411 0 discriminator 1
 309 0156 6A01      		movw r12,r20
 310 0158 7B01      		movw r14,r22
 311 015a 87E0      		ldi r24,7
 312               		1:
 313 015c F694      		lsr r15
 314 015e E794      		ror r14
 315 0160 D794      		ror r13
 316 0162 C794      		ror r12
 317 0164 8A95      		dec r24
 318 0166 01F4      		brne 1b
 319               	.LVL16:
 320 0168 842F      		mov r24,r20
 321 016a 8068      		ori r24,lo8(-128)
 322 016c A82E      		mov r10,r24
 323               	.LVL17:
 324 016e 84E0      		ldi r24,lo8(4)
 325 0170 A89E      		mul r10,r24
 326 0172 E001      		movw r28,r0
 327 0174 1124      		clr __zero_reg__
 328 0176 C050      		subi r28,lo8(-(buf-512))
 329 0178 D040      		sbci r29,hi8(-(buf-512))
 330               	.LVL18:
 331               	.L13:
 412:fs.c          ****     
 413:fs.c          ****     /* –ß–∏—Ç–∞–µ–º —Å–µ–∫—Ç–æ—Ä */
 414:fs.c          ****     if(sd_readBuf(fs_fatbase + s)) goto abort;   
 332               		.loc 1 414 0
 333 017a 6091 0000 		lds r22,fs_fatbase
 334 017e 7091 0000 		lds r23,fs_fatbase+1
 335 0182 8091 0000 		lds r24,fs_fatbase+2
 336 0186 9091 0000 		lds r25,fs_fatbase+3
 337 018a 6C0D      		add r22,r12
 338 018c 7D1D      		adc r23,r13
 339 018e 8E1D      		adc r24,r14
 340 0190 9F1D      		adc r25,r15
 341 0192 0E94 0000 		call sd_readBuf
 342               	.LVL19:
 343 0196 8111      		cpse r24,__zero_reg__
 344 0198 00C0      		rjmp .L26
 415:fs.c          ****     
 416:fs.c          ****     /* –°—Ä–µ–¥–∏ 128/256 —á–∏—Å–µ–ª –≤ —Å–µ–∫—Ç–æ—Ä–µ –∏—â–µ–º 0 */    
 417:fs.c          ****     /* –ö—É—á–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –Ω–µ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–
 418:fs.c          ****     do {
 419:fs.c          ****       /* –ö–ª–∞—Å—Ç–µ—Ä—ã –∫–æ–Ω—á–∏–ª–∏—Å—å */
 420:fs.c          ****       if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto 
 345               		.loc 1 420 0
 346 019a 8091 0000 		lds r24,fs_n_fatent
 347 019e 9091 0000 		lds r25,fs_n_fatent+1
 348 01a2 A091 0000 		lds r26,fs_n_fatent+2
 349 01a6 B091 0000 		lds r27,fs_n_fatent+3
 421:fs.c          ****       
 422:fs.c          ****       /* –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π *
 423:fs.c          ****       if(fs_type == FS_FAT16) {
 350               		.loc 1 423 0
 351 01aa 9090 0000 		lds r9,fs_type
 352 01ae E091 0000 		lds r30,fs_tmp
 353 01b2 0091 0000 		lds r16,fs_file+28
 354 01b6 1091 0000 		lds r17,fs_file+28+1
 355 01ba 2091 0000 		lds r18,fs_file+28+2
 356 01be 3091 0000 		lds r19,fs_file+28+3
 357 01c2 4E2F      		mov r20,r30
 358 01c4 5091 0000 		lds r21,fs_tmp+1
 359 01c8 6091 0000 		lds r22,fs_tmp+2
 360 01cc 7091 0000 		lds r23,fs_tmp+3
 361 01d0 AE1A      		sub r10,r30
 362               	.L25:
 420:fs.c          ****       if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto 
 363               		.loc 1 420 0
 364 01d2 4817      		cp r20,r24
 365 01d4 5907      		cpc r21,r25
 366 01d6 6A07      		cpc r22,r26
 367 01d8 7B07      		cpc r23,r27
 368 01da 00F0      		brlo .L15
 369 01dc 4093 0000 		sts fs_tmp,r20
 370 01e0 5093 0000 		sts fs_tmp+1,r21
 371 01e4 6093 0000 		sts fs_tmp+2,r22
 372 01e8 7093 0000 		sts fs_tmp+3,r23
 373 01ec 0093 0000 		sts fs_file+28,r16
 374 01f0 1093 0000 		sts fs_file+28+1,r17
 375 01f4 2093 0000 		sts fs_file+28+2,r18
 376 01f8 3093 0000 		sts fs_file+28+3,r19
 420:fs.c          ****       if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto 
 377               		.loc 1 420 0 is_stmt 0 discriminator 1
 378 01fc B110      		cpse r11,__zero_reg__
 379 01fe 00C0      		rjmp .L27
 420:fs.c          ****       if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto 
 380               		.loc 1 420 0 discriminator 2
 381 0200 86E0      		ldi r24,lo8(6)
 382 0202 8093 0000 		sts lastError,r24
 383 0206 00C0      		rjmp .L26
 384               	.L15:
 385               		.loc 1 423 0 is_stmt 1
 386 0208 9110      		cpse r9,__zero_reg__
 387 020a 00C0      		rjmp .L16
 424:fs.c          ****         if(LD_WORD(a) == 0) { DIS(if(!freeSpace) {) LD_WORD(a) = (WORD)LAST_CLUSTER; goto founded; 
 388               		.loc 1 424 0
 389 020c E881      		ld r30,Y
 390 020e F981      		ldd r31,Y+1
 391 0210 EF2B      		or r30,r31
 392 0212 01F4      		brne .L17
 393               		.loc 1 424 0 is_stmt 0 discriminator 1
 394 0214 B110      		cpse r11,__zero_reg__
 395 0216 00C0      		rjmp .L18
 396 0218 4093 0000 		sts fs_tmp,r20
 397 021c 5093 0000 		sts fs_tmp+1,r21
 398 0220 6093 0000 		sts fs_tmp+2,r22
 399 0224 7093 0000 		sts fs_tmp+3,r23
 400 0228 0093 0000 		sts fs_file+28,r16
 401 022c 1093 0000 		sts fs_file+28+1,r17
 402 0230 2093 0000 		sts fs_file+28+2,r18
 403 0234 3093 0000 		sts fs_file+28+3,r19
 404               		.loc 1 424 0
 405 0238 8FEF      		ldi r24,lo8(-1)
 406 023a 9FEF      		ldi r25,lo8(-1)
 407 023c 9983      		std Y+1,r25
 408 023e 8883      		st Y,r24
 409 0240 00C0      		rjmp .L19
 410               	.L18:
 411               		.loc 1 424 0 discriminator 2
 412 0242 0F5F      		subi r16,-1
 413 0244 1F4F      		sbci r17,-1
 414 0246 2F4F      		sbci r18,-1
 415 0248 3F4F      		sbci r19,-1
 416               	.L17:
 425:fs.c          ****         a += 2;
 417               		.loc 1 425 0 is_stmt 1
 418 024a 2296      		adiw r28,2
 419               	.LVL20:
 420 024c 00C0      		rjmp .L20
 421               	.L16:
 426:fs.c          ****       } else {
 427:fs.c          ****         if(LD_DWORD(a) == 0) { DIS(if(!freeSpace) {) LD_DWORD(a) = LAST_CLUSTER; goto founded; DIS(
 422               		.loc 1 427 0
 423 024e 4880      		ld r4,Y
 424 0250 5980      		ldd r5,Y+1
 425 0252 6A80      		ldd r6,Y+2
 426 0254 7B80      		ldd r7,Y+3
 427 0256 4528      		or r4,r5
 428 0258 4628      		or r4,r6
 429 025a 4728      		or r4,r7
 430 025c 01F4      		brne .L21
 431               		.loc 1 427 0 is_stmt 0 discriminator 1
 432 025e B110      		cpse r11,__zero_reg__
 433 0260 00C0      		rjmp .L22
 434 0262 4093 0000 		sts fs_tmp,r20
 435 0266 5093 0000 		sts fs_tmp+1,r21
 436 026a 6093 0000 		sts fs_tmp+2,r22
 437 026e 7093 0000 		sts fs_tmp+3,r23
 438 0272 0093 0000 		sts fs_file+28,r16
 439 0276 1093 0000 		sts fs_file+28+1,r17
 440 027a 2093 0000 		sts fs_file+28+2,r18
 441 027e 3093 0000 		sts fs_file+28+3,r19
 442               		.loc 1 427 0
 443 0282 8FEF      		ldi r24,lo8(-1)
 444 0284 9FEF      		ldi r25,lo8(-1)
 445 0286 AFEF      		ldi r26,lo8(-1)
 446 0288 BFE0      		ldi r27,lo8(15)
 447 028a 8883      		st Y,r24
 448 028c 9983      		std Y+1,r25
 449 028e AA83      		std Y+2,r26
 450 0290 BB83      		std Y+3,r27
 451 0292 00C0      		rjmp .L19
 452               	.L22:
 453               		.loc 1 427 0 discriminator 2
 454 0294 0F5F      		subi r16,-1
 455 0296 1F4F      		sbci r17,-1
 456 0298 2F4F      		sbci r18,-1
 457 029a 3F4F      		sbci r19,-1
 458               	.L21:
 428:fs.c          ****         a += 4;
 459               		.loc 1 428 0 is_stmt 1
 460 029c 2496      		adiw r28,4
 461               	.LVL21:
 462               	.L20:
 429:fs.c          ****       }
 430:fs.c          ****       
 431:fs.c          ****       /* –°—á–µ—Ç—á–∏–∫ */
 432:fs.c          ****       ++fs_tmp, ++i;
 463               		.loc 1 432 0
 464 029e 4F5F      		subi r20,-1
 465 02a0 5F4F      		sbci r21,-1
 466 02a2 6F4F      		sbci r22,-1
 467 02a4 7F4F      		sbci r23,-1
 468 02a6 EA2D      		mov r30,r10
 469 02a8 E40F      		add r30,r20
 433:fs.c          ****     } while(i != 0);
 470               		.loc 1 433 0
 471 02aa 01F0      		breq .+2
 472 02ac 00C0      		rjmp .L25
 473 02ae 4093 0000 		sts fs_tmp,r20
 474 02b2 5093 0000 		sts fs_tmp+1,r21
 475 02b6 6093 0000 		sts fs_tmp+2,r22
 476 02ba 7093 0000 		sts fs_tmp+3,r23
 477 02be 0093 0000 		sts fs_file+28,r16
 478 02c2 1093 0000 		sts fs_file+28+1,r17
 479 02c6 2093 0000 		sts fs_file+28+2,r18
 480 02ca 3093 0000 		sts fs_file+28+3,r19
 481 02ce 00C0      		rjmp .L24
 482               	.L19:
 434:fs.c          ****   }          
 435:fs.c          **** founded:  
 436:fs.c          ****   /* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è */
 437:fs.c          ****   fs_fatoptim = fs_tmp;
 483               		.loc 1 437 0
 484 02d0 4093 0000 		sts fs_fatoptim,r20
 485 02d4 5093 0000 		sts fs_fatoptim+1,r21
 486 02d8 6093 0000 		sts fs_fatoptim+2,r22
 487 02dc 7093 0000 		sts fs_fatoptim+3,r23
 438:fs.c          ****   
 439:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è */
 440:fs.c          ****   return fs_saveFatSector(s);
 488               		.loc 1 440 0
 489 02e0 C701      		movw r24,r14
 490 02e2 B601      		movw r22,r12
 491               	/* epilogue start */
 441:fs.c          **** abort:
 442:fs.c          ****   return 1;
 443:fs.c          **** }
 492               		.loc 1 443 0
 493 02e4 DF91      		pop r29
 494 02e6 CF91      		pop r28
 495               	.LVL22:
 496 02e8 1F91      		pop r17
 497 02ea 0F91      		pop r16
 498 02ec FF90      		pop r15
 499 02ee EF90      		pop r14
 500 02f0 DF90      		pop r13
 501 02f2 CF90      		pop r12
 502               	.LVL23:
 503 02f4 BF90      		pop r11
 504               	.LVL24:
 505 02f6 AF90      		pop r10
 506 02f8 9F90      		pop r9
 507 02fa 7F90      		pop r7
 508 02fc 6F90      		pop r6
 509 02fe 5F90      		pop r5
 510 0300 4F90      		pop r4
 440:fs.c          ****   return fs_saveFatSector(s);
 511               		.loc 1 440 0
 512 0302 0C94 0000 		jmp fs_saveFatSector
 513               	.LVL25:
 514               	.L26:
 442:fs.c          ****   return 1;
 515               		.loc 1 442 0
 516 0306 81E0      		ldi r24,lo8(1)
 517 0308 00C0      		rjmp .L14
 518               	.L27:
 420:fs.c          ****       if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto 
 519               		.loc 1 420 0
 520 030a 80E0      		ldi r24,0
 521               	.L14:
 522               	/* epilogue start */
 523               		.loc 1 443 0
 524 030c DF91      		pop r29
 525 030e CF91      		pop r28
 526               	.LVL26:
 527 0310 1F91      		pop r17
 528 0312 0F91      		pop r16
 529 0314 FF90      		pop r15
 530 0316 EF90      		pop r14
 531 0318 DF90      		pop r13
 532 031a CF90      		pop r12
 533               	.LVL27:
 534 031c BF90      		pop r11
 535               	.LVL28:
 536 031e AF90      		pop r10
 537 0320 9F90      		pop r9
 538 0322 7F90      		pop r7
 539 0324 6F90      		pop r6
 540 0326 5F90      		pop r5
 541 0328 4F90      		pop r4
 542 032a 0895      		ret
 543               		.cfi_endproc
 544               	.LFE12:
 547               	fs_setNextCluster:
 548               	.LFB13:
 444:fs.c          **** 
 445:fs.c          **** #undef DIS
 446:fs.c          **** 
 447:fs.c          **** /**************************************************************************
 448:fs.c          **** *  –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã FAT                                                  *
 449:fs.c          **** *                                                                         *
 450:fs.c          **** *  –ï—Å–ª–∏ fs_tmp!=0, —Ç–æ FAT[cluster] = fs_tmp                               *
 451:fs.c          **** *  –ï—Å–ª–∏ fs_tmp==0, —Ç–æ swap(FAT[cluster], fs_tmp)                          *
 452:fs.c          **** **************************************************************************/
 453:fs.c          **** 
 454:fs.c          **** static uint8_t fs_setNextCluster(unsigned long cluster) {
 549               		.loc 1 454 0
 550               		.cfi_startproc
 551               	.LVL29:
 552 032c 8F92      		push r8
 553               	.LCFI23:
 554               		.cfi_def_cfa_offset 3
 555               		.cfi_offset 8, -2
 556 032e 9F92      		push r9
 557               	.LCFI24:
 558               		.cfi_def_cfa_offset 4
 559               		.cfi_offset 9, -3
 560 0330 AF92      		push r10
 561               	.LCFI25:
 562               		.cfi_def_cfa_offset 5
 563               		.cfi_offset 10, -4
 564 0332 BF92      		push r11
 565               	.LCFI26:
 566               		.cfi_def_cfa_offset 6
 567               		.cfi_offset 11, -5
 568 0334 CF92      		push r12
 569               	.LCFI27:
 570               		.cfi_def_cfa_offset 7
 571               		.cfi_offset 12, -6
 572 0336 DF92      		push r13
 573               	.LCFI28:
 574               		.cfi_def_cfa_offset 8
 575               		.cfi_offset 13, -7
 576 0338 EF92      		push r14
 577               	.LCFI29:
 578               		.cfi_def_cfa_offset 9
 579               		.cfi_offset 14, -8
 580 033a FF92      		push r15
 581               	.LCFI30:
 582               		.cfi_def_cfa_offset 10
 583               		.cfi_offset 15, -9
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 8 */
 587               	.L__stack_usage = 8
 588 033c 6B01      		movw r12,r22
 589 033e 7C01      		movw r14,r24
 590               	.LVL30:
 455:fs.c          ****   unsigned long s, prev;
 456:fs.c          ****   void* a;                                            
 457:fs.c          ****   
 458:fs.c          ****   /* –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä */  
 459:fs.c          ****   s = cluster / 128;
 460:fs.c          ****   if(fs_type == FS_FAT16) s = cluster / 256;
 591               		.loc 1 460 0
 592 0340 8091 0000 		lds r24,fs_type
 593 0344 8823      		tst r24
 594 0346 01F0      		breq .L29
 459:fs.c          ****   s = cluster / 128;
 595               		.loc 1 459 0
 596 0348 4601      		movw r8,r12
 597 034a 5701      		movw r10,r14
 598 034c 57E0      		ldi r21,7
 599               		1:
 600 034e B694      		lsr r11
 601 0350 A794      		ror r10
 602 0352 9794      		ror r9
 603 0354 8794      		ror r8
 604 0356 5A95      		dec r21
 605 0358 01F4      		brne 1b
 606               	.LVL31:
 607 035a 00C0      		rjmp .L30
 608               	.LVL32:
 609               	.L29:
 610               		.loc 1 460 0 discriminator 1
 611 035c 8D2C      		mov r8,r13
 612 035e 9E2C      		mov r9,r14
 613 0360 AF2C      		mov r10,r15
 614 0362 BB24      		clr r11
 615               	.LVL33:
 616               	.L30:
 461:fs.c          ****   
 462:fs.c          ****   /* –ß–∏—Ç–∞–µ–º —Å–µ–∫—Ç–æ—Ä */  
 463:fs.c          ****   if(sd_readBuf(fs_fatbase + s)) return 1;
 617               		.loc 1 463 0
 618 0364 6091 0000 		lds r22,fs_fatbase
 619 0368 7091 0000 		lds r23,fs_fatbase+1
 620 036c 8091 0000 		lds r24,fs_fatbase+2
 621 0370 9091 0000 		lds r25,fs_fatbase+3
 622 0374 680D      		add r22,r8
 623 0376 791D      		adc r23,r9
 624 0378 8A1D      		adc r24,r10
 625 037a 9B1D      		adc r25,r11
 626 037c 0E94 0000 		call sd_readBuf
 627               	.LVL34:
 628 0380 8111      		cpse r24,__zero_reg__
 629 0382 00C0      		rjmp .L31
 464:fs.c          ****                
 465:fs.c          ****   /* –ò–∑–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä */ 
 466:fs.c          ****   if(fs_type == FS_FAT16) {                                                                        
 630               		.loc 1 466 0
 631 0384 2091 0000 		lds r18,fs_type
 632 0388 8091 0000 		lds r24,fs_tmp
 633 038c 9091 0000 		lds r25,fs_tmp+1
 634 0390 A091 0000 		lds r26,fs_tmp+2
 635 0394 B091 0000 		lds r27,fs_tmp+3
 467:fs.c          ****     a = (WORD*)buf + (uint8_t)cluster;
 636               		.loc 1 467 0
 637 0398 EC2D      		mov r30,r12
 466:fs.c          ****   if(fs_type == FS_FAT16) {                                                                        
 638               		.loc 1 466 0
 639 039a 2111      		cpse r18,__zero_reg__
 640 039c 00C0      		rjmp .L32
 641               		.loc 1 467 0
 642 039e F0E0      		ldi r31,0
 643 03a0 EE0F      		lsl r30
 644 03a2 FF1F      		rol r31
 645 03a4 E050      		subi r30,lo8(-(buf))
 646 03a6 F040      		sbci r31,hi8(-(buf))
 647               	.LVL35:
 468:fs.c          ****     prev = LD_WORD(a);
 648               		.loc 1 468 0
 649 03a8 4081      		ld r20,Z
 650 03aa 5181      		ldd r21,Z+1
 651 03ac 60E0      		ldi r22,0
 652 03ae 70E0      		ldi r23,0
 653               	.LVL36:
 469:fs.c          ****     LD_WORD(a) = (WORD)fs_tmp;
 654               		.loc 1 469 0
 655 03b0 2091 0000 		lds r18,fs_tmp
 656 03b4 3091 0000 		lds r19,fs_tmp+1
 657 03b8 3183      		std Z+1,r19
 658 03ba 2083      		st Z,r18
 659 03bc 00C0      		rjmp .L33
 660               	.LVL37:
 661               	.L32:
 470:fs.c          ****   } else {
 471:fs.c          ****     a = (unsigned long*)buf + (uint8_t)cluster % 128;
 662               		.loc 1 471 0
 663 03be EF77      		andi r30,lo8(127)
 664 03c0 24E0      		ldi r18,lo8(4)
 665 03c2 E29F      		mul r30,r18
 666 03c4 F001      		movw r30,r0
 667 03c6 1124      		clr __zero_reg__
 668 03c8 E050      		subi r30,lo8(-(buf))
 669 03ca F040      		sbci r31,hi8(-(buf))
 670               	.LVL38:
 472:fs.c          ****     prev = LD_DWORD(a);
 671               		.loc 1 472 0
 672 03cc 4081      		ld r20,Z
 673 03ce 5181      		ldd r21,Z+1
 674 03d0 6281      		ldd r22,Z+2
 675 03d2 7381      		ldd r23,Z+3
 676               	.LVL39:
 473:fs.c          ****     LD_DWORD(a) = fs_tmp;
 677               		.loc 1 473 0
 678 03d4 8083      		st Z,r24
 679 03d6 9183      		std Z+1,r25
 680 03d8 A283      		std Z+2,r26
 681 03da B383      		std Z+3,r27
 682               	.L33:
 474:fs.c          ****   }
 475:fs.c          ****     
 476:fs.c          ****   /* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞. –í–Ω–µ–∑–∞–ø–Ω–æ if
 477:fs.c          ****   if(fs_tmp == FREE_CLUSTER) if(cluster < fs_fatoptim) fs_fatoptim = cluster;
 683               		.loc 1 477 0
 684 03dc 0097      		sbiw r24,0
 685 03de A105      		cpc r26,__zero_reg__
 686 03e0 B105      		cpc r27,__zero_reg__
 687 03e2 01F4      		brne .L34
 688               		.loc 1 477 0 is_stmt 0 discriminator 1
 689 03e4 8091 0000 		lds r24,fs_fatoptim
 690 03e8 9091 0000 		lds r25,fs_fatoptim+1
 691 03ec A091 0000 		lds r26,fs_fatoptim+2
 692 03f0 B091 0000 		lds r27,fs_fatoptim+3
 693 03f4 C816      		cp r12,r24
 694 03f6 D906      		cpc r13,r25
 695 03f8 EA06      		cpc r14,r26
 696 03fa FB06      		cpc r15,r27
 697 03fc 00F4      		brsh .L37
 698 03fe C092 0000 		sts fs_fatoptim,r12
 699 0402 D092 0000 		sts fs_fatoptim+1,r13
 700 0406 E092 0000 		sts fs_fatoptim+2,r14
 701 040a F092 0000 		sts fs_fatoptim+3,r15
 702 040e 00C0      		rjmp .L37
 703               	.L34:
 478:fs.c          **** 
 479:fs.c          ****   /* –†–µ–∑—É–ª—å—Ç–∞—Ç */
 480:fs.c          ****   if(fs_tmp == LAST_CLUSTER || fs_tmp == FREE_CLUSTER) 
 704               		.loc 1 480 0 is_stmt 1
 705 0410 8F3F      		cpi r24,-1
 706 0412 9F4F      		sbci r25,-1
 707 0414 AF4F      		sbci r26,-1
 708 0416 BF40      		sbci r27,15
 709 0418 01F4      		brne .L36
 710               	.L37:
 481:fs.c          ****     fs_tmp = prev;
 711               		.loc 1 481 0
 712 041a 4093 0000 		sts fs_tmp,r20
 713 041e 5093 0000 		sts fs_tmp+1,r21
 714 0422 6093 0000 		sts fs_tmp+2,r22
 715 0426 7093 0000 		sts fs_tmp+3,r23
 716               	.L36:
 482:fs.c          ****   
 483:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ç–æ—Ä */ 
 484:fs.c          ****   return fs_saveFatSector(s);
 717               		.loc 1 484 0
 718 042a C501      		movw r24,r10
 719 042c B401      		movw r22,r8
 720               	/* epilogue start */
 485:fs.c          **** }
 721               		.loc 1 485 0
 722 042e FF90      		pop r15
 723 0430 EF90      		pop r14
 724 0432 DF90      		pop r13
 725 0434 CF90      		pop r12
 726               	.LVL40:
 727 0436 BF90      		pop r11
 728 0438 AF90      		pop r10
 729 043a 9F90      		pop r9
 730 043c 8F90      		pop r8
 731               	.LVL41:
 484:fs.c          ****   return fs_saveFatSector(s);
 732               		.loc 1 484 0
 733 043e 0C94 0000 		jmp fs_saveFatSector
 734               	.LVL42:
 735               	.L31:
 736               		.loc 1 485 0
 737 0442 81E0      		ldi r24,lo8(1)
 738               	/* epilogue start */
 739 0444 FF90      		pop r15
 740 0446 EF90      		pop r14
 741 0448 DF90      		pop r13
 742 044a CF90      		pop r12
 743               	.LVL43:
 744 044c BF90      		pop r11
 745 044e AF90      		pop r10
 746 0450 9F90      		pop r9
 747 0452 8F90      		pop r8
 748               	.LVL44:
 749 0454 0895      		ret
 750               		.cfi_endproc
 751               	.LFE13:
 754               	fs_freeChain:
 755               	.LFB30:
 486:fs.c          **** 
 487:fs.c          **** /**************************************************************************
 488:fs.c          **** *  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å –∫–ª–∞—Å—Ç–µ—Ä                                       
 489:fs.c          **** **************************************************************************/
 490:fs.c          **** 
 491:fs.c          **** static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 494:fs.c          **** }
 495:fs.c          **** 
 496:fs.c          **** /**************************************************************************
 497:fs.c          **** *  –û—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –∏ –±—É—Ñ–µ—Ä                                               *
 498:fs.c          **** **************************************************************************/
 499:fs.c          **** 
 500:fs.c          **** static uint8_t fs_eraseCluster(uint8_t i) {
 501:fs.c          ****   memset(buf, 0, 512);
 502:fs.c          ****   for(; i < fs_csize; ++i)
 503:fs.c          ****     if(sd_writeBuf(fs_tmp + i)) return 1;
 504:fs.c          ****   return 0;
 505:fs.c          **** }
 506:fs.c          **** 
 507:fs.c          **** /**************************************************************************
 508:fs.c          **** *  –í—ã–¥–µ–ª–∏—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ                                         
 509:fs.c          **** *                                                                         *
 510:fs.c          **** *  entry_able –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 0                                         *
 511:fs.c          **** *  entry_start_cluster –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø–∞–ø–∫–∏      
 512:fs.c          **** **************************************************************************/
 513:fs.c          **** 
 514:fs.c          **** static uint8_t* fs_allocEntry(void) {
 515:fs.c          ****   /* –ò—â–µ–º –≤ –ø–∞–ø–∫–µ –ø—É—Å—Ç–æ–π –æ–ø–∏—Å–∞—Ç–µ–ª—å. */
 516:fs.c          ****   while(1) {
 517:fs.c          ****     if(fs_readdirInt()) return 0;
 518:fs.c          **** 
 519:fs.c          ****     /* –ö–ª–∞—Å—Ç–µ—Ä—ã –∫–æ–Ω—á–∏–ª–∏—Å—å */
 520:fs.c          ****     if(!fs_file.entry_able) break;
 521:fs.c          **** 
 522:fs.c          ****     /* –≠—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ–ø–∏—Å–∞—Ç–µ–ª—å */
 523:fs.c          ****     if(FS_DIRENTRY[0] == 0xE5 || FS_DIRENTRY[0] == 0) { /* –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ 0x05 */
 524:fs.c          **** 
 525:fs.c          ****       /* –ß–∏—Ç–∞–µ–º —Å–µ–∫—Ç–æ—Ä */
 526:fs.c          ****       if(sd_readBuf(fs_file.entry_sector)) return 0; 
 527:fs.c          **** 
 528:fs.c          ****       /* –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–ø–∏—Å–∞—Ç–µ–ª—å */
 529:fs.c          ****       return buf + (fs_file.entry_index % 16) * 32;
 530:fs.c          ****     }
 531:fs.c          ****   }               
 532:fs.c          ****     
 533:fs.c          ****   /* –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª-–≤—É —Ñ–∞–π–ª–æ–≤ */ 
 534:fs.c          ****   /* –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ FAT16 —Ç–∞–∫ –∂–µ –≤–µ—Ä–Ω–µ—Ç fs_file.entry_index == 0 */
 535:fs.c          ****   if(fs_file.entry_index == 0) { lastError = ERR_DIR_FULL; return 0; }
 536:fs.c          **** 
 537:fs.c          ****   /* –í—ã–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ fs_tmp */
 538:fs.c          ****   if(fs_allocCluster(ALLOCCLUSTER)) return 0;
 539:fs.c          **** 
 540:fs.c          ****   /* –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–ª–∞—Å—Ç–µ—Ä –∫ –ø–∞–ø–∫–µ. */
 541:fs.c          ****   if(fs_setNextCluster(fs_file.entry_cluster)) return 0; /* fs_tmp —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —Ç–∞–∫ –∫–
 542:fs.c          **** 
 543:fs.c          ****   /* –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç–≤–µ—Ç */ 
 544:fs.c          ****   fs_file.entry_cluster = fs_tmp;
 545:fs.c          ****   fs_clust2sect();   
 546:fs.c          ****   fs_file.entry_sector  = fs_tmp;
 547:fs.c          **** 
 548:fs.c          ****   /* –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –∏ –∑–∞ –æ–¥–Ω–æ BUF (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–
 549:fs.c          ****   fs_eraseCluster(0);
 550:fs.c          **** 
 551:fs.c          ****   /* –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–ø–∏—Å–∞—Ç–µ–ª—å */
 552:fs.c          ****   return buf;
 553:fs.c          **** }
 554:fs.c          **** 
 555:fs.c          **** /**************************************************************************
 556:fs.c          **** *  –û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É                                        
 557:fs.c          **** *                                                                         *
 558:fs.c          **** *  –ò–º—è —Ñ–∞–π–ª–∞ –≤ buf. –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å FS_MAXFILE —Å–∏–º–æ–ª–æ–≤ 
 559:fs.c          **** *                                                                         *
 560:fs.c          **** *  what = OPENED_NONE - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É                            *
 561:fs.c          **** *  what = OPENED_FILE - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª (—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç)         
 562:fs.c          **** *  what = OPENED_DIR  - –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É (—Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–
 563:fs.c          **** *  what | 0x80        - –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ entry_start_cluster     *
 564:fs.c          **** *                                                                         *
 565:fs.c          **** *  –ù–∞ –≤—ã—Ö–æ–¥–µ                                                              *
 566:fs.c          **** *   FS_DIRENTRY                 - –æ–ø–∏—Å–∞—Ç–µ–ª—å                               *
 567:fs.c          **** *   fs_file.entry_able          - 0 (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª/–ø–∞–ø
 568:fs.c          **** *   fs_file.entry_sector        - —Å–µ–∫—Ç–æ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                        *
 569:fs.c          **** *   fs_file.entry_cluster       - –∫–ª–∞—Å—Ç–µ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                       *
 570:fs.c          **** *   fs_file.entry_index         - –Ω–æ–º–µ—Ä –æ–ø–∏—Å–∞—Ç–µ–ª—è                         *
 571:fs.c          **** *   fs_file.entry_start_cluster - –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏         
 572:fs.c          **** *   fs_parent_dir_cluster       - –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø–∞–ø–∫–∏ –ø—Ä–µ–¥–∫–∞ (CREATE)    *
 573:fs.c          **** *   fs_file.ptr                 - 0 (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª)                    *
 574:fs.c          **** *   fs_file.size                - —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª)         
 575:fs.c          **** *                                                                         *
 576:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç buf[0..MAX_FILENAME-1]                               *
 577:fs.c          **** **************************************************************************/
 578:fs.c          **** 
 579:fs.c          **** static uint8_t fs_open0_create(uint8_t dir); /* forward */    
 580:fs.c          **** static CONST uint8_t* fs_open0_name(CONST uint8_t *p); /* forward */
 581:fs.c          **** 
 582:fs.c          **** #define FS_DIRFIND      (buf + 469)           /* 11 –±–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è –≤–Ω—É—Ç—
 583:fs.c          **** #define fs_notrootdir (*(uint8_t*)&fs_file.size) /* –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fs_open0, –≤ —ç—Ç–æ –≤
 584:fs.c          **** #define fs_parent_dir_cluster fs_file.sector  /* –¢–∞–∫ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fs_file.secto
 585:fs.c          **** 
 586:fs.c          **** uint8_t fs_open0(uint8_t what) {
 587:fs.c          ****   CONST uint8_t *path;  
 588:fs.c          ****   uint8_t r;  
 589:fs.c          **** 
 590:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */               
 591:fs.c          **** #ifndef FS_DISABLE_CHECK
 592:fs.c          ****   if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; goto abort; }  
 593:fs.c          ****   fs_file.opened = OPENED_NONE;
 594:fs.c          **** #endif
 595:fs.c          **** 
 596:fs.c          ****   /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏ */                      
 597:fs.c          ****   r = what & 0x80; what &= 0x7F;
 598:fs.c          ****   fs_parent_dir_cluster = fs_file.entry_start_cluster;
 599:fs.c          ****   
 600:fs.c          ****   /* –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ */
 601:fs.c          ****   fs_notrootdir = 0;
 602:fs.c          ****   fs_file.entry_start_cluster = fs_dirbase;
 603:fs.c          ****   if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             
 604:fs.c          **** 
 605:fs.c          ****   /* –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ */
 606:fs.c          ****   if(buf[0] == 0) {	
 607:fs.c          ****     if(what) goto abort_noPath;		
 608:fs.c          ****     FS_DIRENTRY[0] = 0;             /* –ü—Ä–∏–∑–Ω–∞–∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ */
 609:fs.c          ****     FS_DIRENTRY[DIR_Attr] = AM_DIR; /* –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª/–ø
 610:fs.c          ****   } else {                        
 611:fs.c          ****     path = buf;
 612:fs.c          ****     while(1) {
 613:fs.c          ****       /* –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–º—è –∏–∑ path –≤ FS_DIRFIND */
 614:fs.c          ****       path = fs_open0_name(path);
 615:fs.c          ****       if(path == (CONST uint8_t*)1) goto abort_noPath;      	
 616:fs.c          ****       /* –ò—â–µ–º –∏–º—è –≤ –ø–∞–ø–∫–µ */      
 617:fs.c          ****       fs_file.entry_able = 0;
 618:fs.c          ****       while(1) {              
 619:fs.c          ****         if(fs_readdir_nocheck()) return 1;    
 620:fs.c          ****         if(fs_file.entry_able == 0) break;
 621:fs.c          ****         if(!memcmp(FS_DIRENTRY, FS_DIRFIND, 11)) break;
 622:fs.c          ****       }
 623:fs.c          ****       /* –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç—É –ø—É—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è */          
 624:fs.c          ****       if(what && path == 0) {                        
 625:fs.c          ****         fs_parent_dir_cluster = fs_file.entry_start_cluster; /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —ç—Ç–æ–π –ø–µ
 626:fs.c          ****         if(fs_type == FS_FAT32 && fs_parent_dir_cluster == fs_dirbase) fs_parent_dir_cluster = 0; 
 627:fs.c          ****         if(fs_file.entry_able == 0) return fs_open0_create(what-1); /* –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º */
 628:fs.c          ****         lastError = ERR_FILE_EXISTS; goto abort; 
 629:fs.c          ****       }
 630:fs.c          ****       /* –§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ */            
 631:fs.c          ****       if(fs_file.entry_able == 0) goto abort_noPath;
 632:fs.c          ****       
 633:fs.c          ****       /* –ß—Ç–æ —Ç–æ –Ω–∞–π–¥–µ–Ω–æ */            
 634:fs.c          ****       fs_file.entry_start_cluster = fs_getEntryCluster();
 635:fs.c          ****       /* –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—É—Ç–∏ */            
 636:fs.c          ****       if(path == 0) break;                      
 637:fs.c          ****       /* –≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞–ø–∫–∞ */            
 638:fs.c          ****       if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) goto abort_noPath;
 639:fs.c          ****       /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ fs_move */
 640:fs.c          ****       if(r && fs_file.entry_start_cluster == fs_parent_dir_cluster) goto abort_noPath;
 641:fs.c          ****       /* –ù–∞–¥–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–∂–µ –Ω–µ –±—É–¥–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π */            
 642:fs.c          ****       fs_notrootdir = 1;
 643:fs.c          ****     }
 644:fs.c          ****   }
 645:fs.c          ****   /* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */   
 646:fs.c          ****   fs_file.entry_able = 0;
 647:fs.c          ****   fs_file.size  = LD_DWORD(FS_DIRENTRY + DIR_FileSize);
 648:fs.c          ****   fs_file.ptr   = 0;  
 649:fs.c          **** #ifndef FS_DISABLE_CHECK
 650:fs.c          ****   fs_file.opened     = OPENED_FILE;
 651:fs.c          ****   if(FS_DIRENTRY[DIR_Attr] & AM_DIR) fs_file.opened = OPENED_DIR; 
 652:fs.c          **** #endif
 653:fs.c          **** 
 654:fs.c          ****   /* –ù–µ–ª—å–∑—è –¥–≤–∞–∂–¥—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª */
 655:fs.c          **** #ifndef FS_DISABLE_CHECK
 656:fs.c          **** #ifndef FS_DISABLE_SWAP
 657:fs.c          ****   if(fs_secondFile.opened==OPENED_FILE && fs_file.opened==OPENED_FILE && fs_secondFile.entry_sector
 658:fs.c          ****     fs_secondFile.opened = OPENED_NONE; //!9-05-2014 –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª
 659:fs.c          ****   }
 660:fs.c          **** #endif
 661:fs.c          **** #endif
 662:fs.c          **** 
 663:fs.c          ****   return 0;
 664:fs.c          **** abort_noPath:
 665:fs.c          ****   lastError = ERR_NO_PATH;
 666:fs.c          **** abort: 
 667:fs.c          ****   return 1;
 668:fs.c          **** }
 669:fs.c          **** 
 670:fs.c          **** static uint8_t exists(const char* str, uint8_t c) {
 671:fs.c          ****   while (pgm_read_byte(str) != 0x00) {
 672:fs.c          ****     uint8_t x = pgm_read_byte(str++);
 673:fs.c          ****     if (x == c) 
 674:fs.c          ****       return c;
 675:fs.c          ****   }
 676:fs.c          ****   return 0;
 677:fs.c          **** }
 678:fs.c          **** 
 679:fs.c          **** static CONST uint8_t * fs_open0_name(CONST uint8_t *p) {
 680:fs.c          ****   uint8_t c, ni, i;
 681:fs.c          **** 
 682:fs.c          ****   memset(FS_DIRFIND, ' ', 11);    
 683:fs.c          ****   i = 0; ni = 8;
 684:fs.c          ****   while(1) {
 685:fs.c          ****     c = *p++;
 686:fs.c          ****     if(c == 0) {
 687:fs.c          ****       if(i == 0) break; /* –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ */
 688:fs.c          ****       return 0;
 689:fs.c          ****     }                                                     	
 690:fs.c          ****     if(c == '/') return p;
 691:fs.c          ****     if(c == '.') {
 692:fs.c          ****       if(i == 0) break; /* –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ */
 693:fs.c          **** #ifndef FS_DISABLE_CHECK    
 694:fs.c          ****       if(ni != 8) break; /* –í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞ */
 695:fs.c          **** #endif    
 696:fs.c          ****       i = 8; ni = 11;
 697:fs.c          ****       continue;
 698:fs.c          ****     }                 
 699:fs.c          ****     /* –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º–µ */
 700:fs.c          ****     if(i == ni) break;
 701:fs.c          ****     /* –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã */
 702:fs.c          **** #ifndef FS_DISABLE_CHECK    
 703:fs.c          ****     if(exists(PSTR("+,;=[]*?<:>\\|\""), c)) break;
 704:fs.c          ****     if(c <= 0x20) break;
 705:fs.c          ****     if(c >= 0x80) break;
 706:fs.c          **** #endif    
 707:fs.c          ****     /* –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É */
 708:fs.c          ****     if(c >= 'a' && c <= 'z') c -= 0x20;
 709:fs.c          ****     /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è */
 710:fs.c          ****     FS_DIRFIND[i++] = c;
 711:fs.c          ****   }                     
 712:fs.c          ****   /* –û—à–∏–±–∫–∞ */
 713:fs.c          ****   return (CONST uint8_t*)1;
 714:fs.c          **** }
 715:fs.c          **** 
 716:fs.c          **** static uint8_t fs_open0_create(uint8_t dir) {
 717:fs.c          ****   uint8_t  new_name[11];
 718:fs.c          ****   unsigned long allocatedCluster = 0;
 719:fs.c          ****   uint8_t* allocatedEntry;
 720:fs.c          **** 
 721:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, —Ç–∞–∫ –∫–∞–∫ –≤–µ—Å—å –±—É—Ñ–µ—Ä –±—É–¥–µ—Ç –∑–∞—Ç–µ—Ä—Ç */
 722:fs.c          ****   memcpy(new_name, FS_DIRFIND, 11); 
 723:fs.c          **** 
 724:fs.c          ****   /* –í—ã–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –ø–∞–ø–∫–∏ */   
 725:fs.c          ****   if(dir) {
 726:fs.c          ****     if(fs_allocCluster(ALLOCCLUSTER)) goto abort; /* fs_file.entry_start_cluster –∏–∑–º–µ–Ω–µ–Ω –Ω–
 727:fs.c          ****     allocatedCluster = fs_tmp;
 728:fs.c          ****   }
 729:fs.c          **** 
 730:fs.c          ****   /* –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–ø–∫—É –æ–ø–∏—Å–∞—Ç–µ–ª—å (—Å–µ–∫—Ç–æ—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω) */
 731:fs.c          ****   allocatedEntry = fs_allocEntry();
 732:fs.c          ****   if(allocatedEntry == 0) {       
 733:fs.c          ****   
 734:fs.c          ****     /* –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä */
 735:fs.c          ****     fs_tmp = FREE_CLUSTER; 
 736:fs.c          ****     fs_setNextCluster(allocatedCluster);
 737:fs.c          ****     goto abort;
 738:fs.c          ****   }
 739:fs.c          **** 
 740:fs.c          ****   /* –£—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ–º –∏–º—è –≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å. */
 741:fs.c          ****   memset(allocatedEntry, 0, 32);
 742:fs.c          ****   memcpy(allocatedEntry, new_name, 11);        
 743:fs.c          **** 
 744:fs.c          ****   if(!dir) {    
 745:fs.c          ****     /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å –Ω–∞ –¥–∏—Å–∫ */
 746:fs.c          ****     if(sd_writeBuf(fs_file.entry_sector)) goto abort;
 747:fs.c          ****     /* fs_file.entry_sector, fs_file.entry_index - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–∞–µ—Ç—Å—è –≤ fs_allocCluster 
 748:fs.c          ****     fs_file.entry_start_cluster = 0; 
 749:fs.c          ****     fs_file.size           = 0;
 750:fs.c          ****     fs_file.ptr            = 0;
 751:fs.c          **** #ifndef FS_DISABLE_CHECK
 752:fs.c          ****     fs_file.opened              = OPENED_FILE;
 753:fs.c          **** #endif
 754:fs.c          ****     return 0;
 755:fs.c          ****   }
 756:fs.c          ****   
 757:fs.c          ****   /* –≠—Ç–æ –ø–∞–ø–∫–∞ */
 758:fs.c          ****   allocatedEntry[DIR_Attr] = AM_DIR;
 759:fs.c          ****   fs_setEntryCluster(allocatedEntry, allocatedCluster);
 760:fs.c          **** 
 761:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å –Ω–∞ –¥–∏—Å–∫ */
 762:fs.c          ****   if(sd_writeBuf(fs_file.entry_sector)) goto abort;
 763:fs.c          ****            
 764:fs.c          ****   /* –°–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ */ 
 765:fs.c          ****   fs_tmp = allocatedCluster;
 766:fs.c          ****   fs_clust2sect();
 767:fs.c          **** 
 768:fs.c          ****   /* –û—á–∏—â–∞–µ–º fs_tmp –∏ –∑–∞ –æ–¥–Ω–æ buf */
 769:fs.c          ****   fs_eraseCluster(1); 
 770:fs.c          ****   
 771:fs.c          ****   /* –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É */
 772:fs.c          ****   memset(buf, ' ', 11); buf[0] = '.'; buf[11] = 0x10;
 773:fs.c          ****   fs_setEntryCluster(buf, allocatedCluster);         
 774:fs.c          ****   
 775:fs.c          ****   memset(buf+32, ' ', 11); buf[32] = '.'; buf[33] = '.'; buf[32+11] = 0x10;
 776:fs.c          ****   if(fs_notrootdir) fs_setEntryCluster(buf + 32, fs_file.entry_start_cluster); /* –°–µ–π—á–∞—Å –≤ f
 777:fs.c          **** 
 778:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫—É */
 779:fs.c          ****   return sd_writeBuf(fs_tmp);      
 780:fs.c          **** abort:
 781:fs.c          ****   return 1;
 782:fs.c          **** }
 783:fs.c          **** 
 784:fs.c          **** /**************************************************************************
 785:fs.c          **** *  –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª                                                           *
 786:fs.c          **** **************************************************************************/
 787:fs.c          **** 
 788:fs.c          **** uint8_t fs_open(void) {
 789:fs.c          ****   if(fs_openany()) goto abort;
 790:fs.c          **** #ifndef FS_DISABLE_CHECK
 791:fs.c          ****   if(fs_file.opened == OPENED_FILE) return 0;
 792:fs.c          ****   fs_file.opened = OPENED_NONE;
 793:fs.c          **** #else  
 794:fs.c          ****   if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) return 0;
 795:fs.c          **** #endif
 796:fs.c          ****   lastError = ERR_NO_PATH;
 797:fs.c          **** abort:
 798:fs.c          ****   return 1;
 799:fs.c          **** }
 800:fs.c          **** 
 801:fs.c          **** /**************************************************************************
 802:fs.c          **** *  –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É                                                          *
 803:fs.c          **** **************************************************************************/
 804:fs.c          **** 
 805:fs.c          **** uint8_t fs_opendir(void) {
 806:fs.c          ****   if(fs_openany()) goto abort;
 807:fs.c          **** #ifndef FS_DISABLE_CHECK
 808:fs.c          ****   if(fs_file.opened == OPENED_DIR) return 0;
 809:fs.c          ****   fs_file.opened = OPENED_NONE;
 810:fs.c          **** #else  
 811:fs.c          ****   if(FS_DIRENTRY[DIR_Attr] & AM_DIR) return 0;
 812:fs.c          **** #endif
 813:fs.c          ****   lastError = ERR_NO_PATH;
 814:fs.c          **** abort:
 815:fs.c          ****   return 1;
 816:fs.c          **** }
 817:fs.c          **** 
 818:fs.c          **** /**************************************************************************
 819:fs.c          **** *  –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å
 820:fs.c          **** *  –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ fs_read0, fs_write_start                          *
 821:fs.c          **** **************************************************************************/
 822:fs.c          **** 
 823:fs.c          **** static uint8_t fs_nextRWSector(void) {
 824:fs.c          ****   if(fs_file.ptr == 0) {
 825:fs.c          ****     /* –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ */
 826:fs.c          ****     fs_tmp = fs_file.entry_start_cluster;
 827:fs.c          ****   } else {
 828:fs.c          ****     /* –ï—â–µ –Ω–µ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ç–æ—Ä–∞ */
 829:fs.c          ****     if((WORD)fs_file.ptr % 512) return 0;
 830:fs.c          ****         
 831:fs.c          ****     /* –°–ª–µ–¥—É—é—â–∏–π —Å–µ–∫—Ç–æ—Ä */    
 832:fs.c          ****     fs_file.sector++;
 833:fs.c          ****         
 834:fs.c          ****     /* –ï—â–µ –Ω–µ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Ç–µ—Ä–∞ */
 835:fs.c          ****     if(((fs_file.sector - fs_database) % fs_csize) != 0) return 0;
 836:fs.c          **** 
 837:fs.c          ****     /* –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä */
 838:fs.c          ****     fs_tmp = fs_file.cluster;
 839:fs.c          ****     if(fs_nextCluster()) return 1;
 840:fs.c          ****   }
 841:fs.c          **** 
 842:fs.c          ****   /* –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π */
 843:fs.c          ****   if(fs_tmp == 0) {                
 844:fs.c          ****     if(fs_allocCluster(ALLOCCLUSTER)) return 1;
 845:fs.c          ****     if(fs_file.ptr == 0) fs_file.entry_start_cluster = fs_tmp;
 846:fs.c          ****                     else fs_setNextCluster(fs_file.cluster); /* fs_tmp —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —Ç–∞–∫
 847:fs.c          ****   }
 848:fs.c          **** 
 849:fs.c          ****   /* –û–∫ */
 850:fs.c          ****   fs_file.cluster = fs_tmp;
 851:fs.c          ****   fs_clust2sect();
 852:fs.c          ****   fs_file.sector  = fs_tmp;
 853:fs.c          ****   return 0;
 854:fs.c          **** }
 855:fs.c          **** 
 856:fs.c          **** /**************************************************************************
 857:fs.c          **** *  –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –≤ buf                           
 858:fs.c          **** *                                                                         *
 859:fs.c          **** *  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ñ–∞–π–ª–∞ –ø—Ä–
 860:fs.c          **** *  –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —É—Ç–µ—á–∫–∞ —Å–≤–æ–±–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ.                
 861:fs.c          **** *                                                                         *
 862:fs.c          **** *  –ê—Ä–≥—É–º–µ–Ω—Ç—ã:                                                             *
 863:fs.c          **** *    ptr      - –±—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è, –º–æ–∂–µ—Ç –±—ã—Ç—å buf                          *
 864:fs.c          **** *    len      - –∫–æ–ª-–≤–æ –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å       
 865:fs.c          **** **************************************************************************/
 866:fs.c          **** 
 867:fs.c          **** uint8_t fs_read0(uint8_t* ptr, WORD len) {
 868:fs.c          ****   WORD sectorLen;
 869:fs.c          **** 
 870:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
 871:fs.c          **** #ifndef FS_DISABLE_CHECK
 872:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 873:fs.c          **** #endif
 874:fs.c          **** 
 875:fs.c          ****   while(len) {
 876:fs.c          ****     /* –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —Å–µ–∫—Ç–æ—Ä–∞ */    
 877:fs.c          ****     if(fs_nextRWSector()) goto abort;
 878:fs.c          ****   
 879:fs.c          ****     /* –ö–æ–ª-–≤–æ –±–∞–π—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∫—Ç–æ—Ä–∞ */      
 880:fs.c          ****     sectorLen = 512 - ((WORD)fs_file.ptr % 512);
 881:fs.c          ****     if(len < sectorLen) sectorLen = len;
 882:fs.c          **** 
 883:fs.c          ****     /* –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ */
 884:fs.c          ****     if(ptr) {
 885:fs.c          ****       if(sd_read(ptr, fs_file.sector, (WORD)fs_file.ptr % 512, sectorLen)) goto abort;
 886:fs.c          ****       ptr += sectorLen;         
 887:fs.c          ****     }
 888:fs.c          ****   
 889:fs.c          ****     /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ */
 890:fs.c          ****     fs_file.ptr += sectorLen;
 891:fs.c          ****     len -= sectorLen;
 892:fs.c          ****   }
 893:fs.c          **** 
 894:fs.c          ****   /* –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ */
 895:fs.c          ****   if(fs_file.ptr > fs_file.size) fs_file.size = fs_file.ptr, fs_file.changed = 1;
 896:fs.c          ****     
 897:fs.c          ****   return 0;
 898:fs.c          **** abort:
 899:fs.c          **** #ifndef FS_DISABLE_CHECK
 900:fs.c          ****   fs_file.opened = OPENED_NONE;
 901:fs.c          **** #endif
 902:fs.c          ****   return 1;
 903:fs.c          **** }
 904:fs.c          **** 
 905:fs.c          **** /**************************************************************************
 906:fs.c          **** *  –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –≤ buf                           
 907:fs.c          **** *                                                                         *
 908:fs.c          **** *  –ê—Ä–≥—É–º–µ–Ω—Ç—ã:                                                             *
 909:fs.c          **** *    ptr      - –±—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è, –º–æ–∂–µ—Ç –±—ã—Ç—å buf                          *
 910:fs.c          **** *    len      - –∫–æ–ª-–≤–æ –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å       
 911:fs.c          **** *    readed   - —É–∫–∞–∑–∞—Ç–µ–ª—å, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ—á
 912:fs.c          **** **************************************************************************/
 913:fs.c          **** 
 914:fs.c          **** uint8_t fs_read(uint8_t* ptr, WORD len, WORD* readed) {
 915:fs.c          ****   /* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –±–∞–π—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è */
 916:fs.c          ****   if(len > fs_file.size - fs_file.ptr) len = (WORD)(fs_file.size - fs_file.ptr);
 917:fs.c          ****   *readed = len; 
 918:fs.c          ****   
 919:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–∞–º */
 920:fs.c          ****   return fs_read0(ptr, len);
 921:fs.c          **** }
 922:fs.c          **** 
 923:fs.c          **** /**************************************************************************
 924:fs.c          **** *  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏–Ω—É —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –≤ –æ–ø–∏—Å—Ç–∞–µ–ª—å   
 925:fs.c          **** *  –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ fs_lseek, fs_write_start, fs_write_end, fs_write_eof     *
 926:fs.c          **** **************************************************************************/
 927:fs.c          **** 
 928:fs.c          **** static char fs_saveFileLength(void) {
 929:fs.c          ****   uint8_t* entry;
 930:fs.c          **** 
 931:fs.c          ****   if(fs_file.changed == 0) return 0;
 932:fs.c          ****   fs_file.changed = 0;
 933:fs.c          **** 
 934:fs.c          ****   /* –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞ */
 935:fs.c          ****   if(sd_readBuf(fs_file.entry_sector)) return 1;
 936:fs.c          **** 
 937:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
 938:fs.c          ****   LD_DWORD(entry + DIR_FileSize) = fs_file.size;  
 939:fs.c          ****   fs_setEntryCluster(entry, fs_file.entry_start_cluster);
 940:fs.c          **** 
 941:fs.c          ****   return sd_writeBuf(fs_file.entry_sector);
 942:fs.c          **** }
 943:fs.c          **** 
 944:fs.c          **** /**************************************************************************
 945:fs.c          **** *  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞                      
 946:fs.c          **** **************************************************************************/
 947:fs.c          **** 
 948:fs.c          **** #define LSEEK_STEP 32768
 949:fs.c          **** 
 950:fs.c          **** uint8_t fs_lseek(unsigned long off, uint8_t mode) {
 951:fs.c          ****   unsigned long l;
 952:fs.c          **** 
 953:fs.c          ****   /* –†–µ–∂–∏–º */
 954:fs.c          ****   if(mode==1) off += fs_file.ptr; else
 955:fs.c          ****   if(mode==2) off += fs_file.size;                        
 956:fs.c          **** 
 957:fs.c          ****   /* –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ fs_file.ptr = 0 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–¥–∞*/ 
 958:fs.c          ****   if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
 959:fs.c          ****   
 960:fs.c          ****   do { /* –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –¥–∞–∂–µ –¥–ª—è off=0, —Ç–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ –ø
 961:fs.c          ****     l = off;
 962:fs.c          ****     if(l > LSEEK_STEP) l = LSEEK_STEP;
 963:fs.c          ****     if(fs_read0(0, (WORD)l)) return 1;
 964:fs.c          ****     off -= l;
 965:fs.c          ****   } while(off);
 966:fs.c          **** 
 967:fs.c          ****   /* –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—Å—è */
 968:fs.c          ****   fs_saveFileLength();
 969:fs.c          ****   
 970:fs.c          ****   /* –†–µ–∑—É–ª—å—Ç–∞—Ç */
 971:fs.c          ****   fs_tmp = fs_file.ptr;
 972:fs.c          **** 
 973:fs.c          ****   return 0;
 974:fs.c          **** }
 975:fs.c          **** 
 976:fs.c          **** /**************************************************************************
 977:fs.c          **** *  –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª (—à–∞–≥ 1)                                                *
 978:fs.c          **** ***************************************************************************/
 979:fs.c          **** 
 980:fs.c          **** uint8_t fs_write_start(void) {
 981:fs.c          ****   WORD len;
 982:fs.c          **** 
 983:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
 984:fs.c          **** #ifndef FS_DISABLE_CHECK
 985:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 986:fs.c          ****   if(fs_wtotal == 0) { lastError = ERR_NO_DATA; goto abort; }
 987:fs.c          **** #endif
 988:fs.c          **** 
 989:fs.c          ****   /* –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –µ—â–µ –¥–æ–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —Å–µ–∫—Ç–æ—Ä? */
 990:fs.c          ****   len = 512 - (WORD)fs_file.ptr % 512;
 991:fs.c          ****     
 992:fs.c          ****   /* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ */
 993:fs.c          ****   if(len > fs_wtotal) len = (WORD)fs_wtotal;
 994:fs.c          **** 
 995:fs.c          ****   /* –í—ã—á–∏—Å–ª–µ–Ω–∏–µ fs_file.sector, –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
 996:fs.c          ****   if(fs_nextRWSector()) goto abort; /* –î–æ–ª–∂–Ω–æ –≤—ã–ª–µ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –æ—à–∏–±–∫–∞
 997:fs.c          **** 
 998:fs.c          ****   /* –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Ñ–∞–π–ª–∞ */
 999:fs.c          ****   if(fs_file.size < fs_file.ptr + len) {
1000:fs.c          ****     fs_file.size = fs_file.ptr + len;
1001:fs.c          ****     fs_file.changed = 1;
1002:fs.c          ****   }
1003:fs.c          **** 
1004:fs.c          ****   /* –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –≤–µ—Å—å —Å–µ–∫—Ç–æ—Ä –±—É–¥–µ—Ç –∑–∞–
1005:fs.c          ****   if(len != 512) {      
1006:fs.c          ****     if(sd_readBuf(fs_file.sector)) goto abort;
1007:fs.c          ****   }
1008:fs.c          ****                               
1009:fs.c          ****   fs_file_wlen = len;
1010:fs.c          ****   fs_file_woff = (WORD)fs_file.ptr % 512;
1011:fs.c          ****   return 0;
1012:fs.c          **** abort:
1013:fs.c          ****   /* –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ ERR_NO_FREE_SPACE */
1014:fs.c          ****   /* –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, —Ç–æ –Ω–∞–¥–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å 
1015:fs.c          ****   fs_saveFileLength();
1016:fs.c          ****   /* –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª */ 
1017:fs.c          **** #ifndef FS_DISABLE_CHECK
1018:fs.c          ****   fs_file.opened = OPENED_NONE;
1019:fs.c          **** #endif
1020:fs.c          ****   return 1;
1021:fs.c          **** }
1022:fs.c          **** 
1023:fs.c          **** /**************************************************************************
1024:fs.c          **** *  –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª (—à–∞–≥ 2)                                                *
1025:fs.c          **** ***************************************************************************/
1026:fs.c          **** 
1027:fs.c          **** uint8_t fs_write_end(void) {
1028:fs.c          **** #ifndef FS_DISABLE_CHECK
1029:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
1030:fs.c          **** #endif
1031:fs.c          **** 
1032:fs.c          ****   /* –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫ */
1033:fs.c          ****   if(sd_writeBuf(fs_file.sector)) goto abort;
1034:fs.c          ****   
1035:fs.c          ****   /* –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ –∫–ª–∞—Å—Ç–µ—
1036:fs.c          ****   /* –ù–æ —ç—Ç–æ –Ω–µ –ø–ª–æ—Ö–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ê —ç—Ç–∞ –æ—à–∏–±–∫–∞ –ø
1037:fs.c          ****   /* –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. */
1038:fs.c          ****   
1039:fs.c          ****   /* –°—á–µ—Ç—á–∏–∫–∏ */
1040:fs.c          ****   fs_file.ptr += fs_file_wlen;
1041:fs.c          ****   fs_wtotal   -= fs_file_wlen;
1042:fs.c          **** 
1043:fs.c          ****   /* –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –ø–µ
1044:fs.c          ****   if(fs_wtotal == 0) {
1045:fs.c          ****     if(fs_saveFileLength()) goto abort;
1046:fs.c          ****   }
1047:fs.c          **** 
1048:fs.c          ****   /* –û–∫ */  
1049:fs.c          ****   return 0;  
1050:fs.c          **** abort:  
1051:fs.c          **** #ifndef FS_DISABLE_CHECK
1052:fs.c          ****     fs_file.opened = OPENED_NONE;
1053:fs.c          **** #endif
1054:fs.c          ****   return 1;
1055:fs.c          **** }
1056:fs.c          **** 
1057:fs.c          **** /**************************************************************************
1058:fs.c          **** *  –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞—á–∏–Ω–∞—è —Å fs_tmp                 
1059:fs.c          **** **************************************************************************/
1060:fs.c          **** 
1061:fs.c          **** static uint8_t fs_freeChain(void) {
 756               		.loc 1 1061 0
 757               		.cfi_startproc
 758 0456 0F93      		push r16
 759               	.LCFI31:
 760               		.cfi_def_cfa_offset 3
 761               		.cfi_offset 16, -2
 762 0458 1F93      		push r17
 763               	.LCFI32:
 764               		.cfi_def_cfa_offset 4
 765               		.cfi_offset 17, -3
 766               	/* prologue: function */
 767               	/* frame size = 0 */
 768               	/* stack size = 2 */
 769               	.L__stack_usage = 2
 770               	.L40:
1062:fs.c          ****   unsigned long c;
1063:fs.c          ****   while(1) {
1064:fs.c          ****     if(fs_tmp < 2 || fs_tmp >= fs_n_fatent) return 0;
 771               		.loc 1 1064 0
 772 045a 6091 0000 		lds r22,fs_tmp
 773 045e 7091 0000 		lds r23,fs_tmp+1
 774 0462 8091 0000 		lds r24,fs_tmp+2
 775 0466 9091 0000 		lds r25,fs_tmp+3
 776 046a 6230      		cpi r22,2
 777 046c 7105      		cpc r23,__zero_reg__
 778 046e 8105      		cpc r24,__zero_reg__
 779 0470 9105      		cpc r25,__zero_reg__
 780 0472 00F0      		brlo .L42
 781               		.loc 1 1064 0 is_stmt 0 discriminator 2
 782 0474 0091 0000 		lds r16,fs_n_fatent
 783 0478 1091 0000 		lds r17,fs_n_fatent+1
 784 047c 2091 0000 		lds r18,fs_n_fatent+2
 785 0480 3091 0000 		lds r19,fs_n_fatent+3
 786 0484 6017      		cp r22,r16
 787 0486 7107      		cpc r23,r17
 788 0488 8207      		cpc r24,r18
 789 048a 9307      		cpc r25,r19
 790 048c 00F4      		brsh .L42
 791               	.LVL45:
1065:fs.c          ****     /* –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä fs_tmp –∏ –∑–∞–ø–∏—Å—Ç—å –≤ fs_tmp —Å–ª–µ–¥—É—é—â–∏–π –∑
1066:fs.c          ****     c = fs_tmp, fs_tmp = FREE_CLUSTER;
 792               		.loc 1 1066 0 is_stmt 1
 793 048e 1092 0000 		sts fs_tmp,__zero_reg__
 794 0492 1092 0000 		sts fs_tmp+1,__zero_reg__
 795 0496 1092 0000 		sts fs_tmp+2,__zero_reg__
 796 049a 1092 0000 		sts fs_tmp+3,__zero_reg__
1067:fs.c          ****     if(fs_setNextCluster(c)) break; /* fs_tmp –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–ª
 797               		.loc 1 1067 0
 798 049e 0E94 0000 		call fs_setNextCluster
 799               	.LVL46:
 800 04a2 8823      		tst r24
 801 04a4 01F0      		breq .L40
1068:fs.c          ****   }
1069:fs.c          ****   return 1;
 802               		.loc 1 1069 0
 803 04a6 81E0      		ldi r24,lo8(1)
 804 04a8 00C0      		rjmp .L39
 805               	.L42:
1064:fs.c          ****     if(fs_tmp < 2 || fs_tmp >= fs_n_fatent) return 0;
 806               		.loc 1 1064 0
 807 04aa 80E0      		ldi r24,0
 808               	.L39:
 809               	/* epilogue start */
1070:fs.c          **** }
 810               		.loc 1 1070 0
 811 04ac 1F91      		pop r17
 812 04ae 0F91      		pop r16
 813 04b0 0895      		ret
 814               		.cfi_endproc
 815               	.LFE30:
 818               	fs_eraseCluster:
 819               	.LFB15:
 500:fs.c          **** static uint8_t fs_eraseCluster(uint8_t i) {
 820               		.loc 1 500 0
 821               		.cfi_startproc
 822               	.LVL47:
 823 04b2 CF93      		push r28
 824               	.LCFI33:
 825               		.cfi_def_cfa_offset 3
 826               		.cfi_offset 28, -2
 827               	/* prologue: function */
 828               	/* frame size = 0 */
 829               	/* stack size = 1 */
 830               	.L__stack_usage = 1
 831 04b4 C82F      		mov r28,r24
 501:fs.c          ****   memset(buf, 0, 512);
 832               		.loc 1 501 0
 833 04b6 20E0      		ldi r18,0
 834 04b8 32E0      		ldi r19,lo8(2)
 835 04ba E0E0      		ldi r30,lo8(buf)
 836 04bc F0E0      		ldi r31,hi8(buf)
 837 04be DF01      		movw r26,r30
 838 04c0 C901      		movw r24,r18
 839               	.LVL48:
 840               		0:
 841 04c2 1D92      		st X+,__zero_reg__
 842 04c4 0197      		sbiw r24,1
 843 04c6 01F4      		brne 0b
 844               	.L45:
 502:fs.c          ****   for(; i < fs_csize; ++i)
 845               		.loc 1 502 0 discriminator 1
 846 04c8 8091 0000 		lds r24,fs_csize
 847 04cc C817      		cp r28,r24
 848 04ce 00F4      		brsh .L49
 503:fs.c          ****     if(sd_writeBuf(fs_tmp + i)) return 1;
 849               		.loc 1 503 0
 850 04d0 6091 0000 		lds r22,fs_tmp
 851 04d4 7091 0000 		lds r23,fs_tmp+1
 852 04d8 8091 0000 		lds r24,fs_tmp+2
 853 04dc 9091 0000 		lds r25,fs_tmp+3
 854 04e0 6C0F      		add r22,r28
 855 04e2 711D      		adc r23,__zero_reg__
 856 04e4 811D      		adc r24,__zero_reg__
 857 04e6 911D      		adc r25,__zero_reg__
 858 04e8 0E94 0000 		call sd_writeBuf
 859               	.LVL49:
 860 04ec 8111      		cpse r24,__zero_reg__
 861 04ee 00C0      		rjmp .L48
 502:fs.c          ****   for(; i < fs_csize; ++i)
 862               		.loc 1 502 0
 863 04f0 CF5F      		subi r28,lo8(-(1))
 864               	.LVL50:
 865 04f2 00C0      		rjmp .L45
 866               	.L49:
 504:fs.c          ****   return 0;
 867               		.loc 1 504 0
 868 04f4 80E0      		ldi r24,0
 869 04f6 00C0      		rjmp .L46
 870               	.L48:
 503:fs.c          ****     if(sd_writeBuf(fs_tmp + i)) return 1;
 871               		.loc 1 503 0
 872 04f8 81E0      		ldi r24,lo8(1)
 873               	.L46:
 874               	/* epilogue start */
 505:fs.c          **** }
 875               		.loc 1 505 0
 876 04fa CF91      		pop r28
 877               	.LVL51:
 878 04fc 0895      		ret
 879               		.cfi_endproc
 880               	.LFE15:
 883               	fs_nextCluster:
 884               	.LFB6:
 244:fs.c          **** static uint8_t fs_nextCluster(void) {
 885               		.loc 1 244 0
 886               		.cfi_startproc
 887 04fe 0F93      		push r16
 888               	.LCFI34:
 889               		.cfi_def_cfa_offset 3
 890               		.cfi_offset 16, -2
 891 0500 1F93      		push r17
 892               	.LCFI35:
 893               		.cfi_def_cfa_offset 4
 894               		.cfi_offset 17, -3
 895               	/* prologue: function */
 896               	/* frame size = 0 */
 897               	/* stack size = 2 */
 898               	.L__stack_usage = 2
 245:fs.c          ****   if(fs_type == FS_FAT16) {                                                                        
 899               		.loc 1 245 0
 900 0502 4091 0000 		lds r20,fs_type
 901 0506 8091 0000 		lds r24,fs_tmp
 902 050a 9091 0000 		lds r25,fs_tmp+1
 903 050e A091 0000 		lds r26,fs_tmp+2
 904 0512 B091 0000 		lds r27,fs_tmp+3
 905 0516 0091 0000 		lds r16,fs_fatbase
 906 051a 1091 0000 		lds r17,fs_fatbase+1
 907 051e 2091 0000 		lds r18,fs_fatbase+2
 908 0522 3091 0000 		lds r19,fs_fatbase+3
 246:fs.c          ****     if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto ab
 909               		.loc 1 246 0
 910 0526 E82F      		mov r30,r24
 245:fs.c          ****   if(fs_type == FS_FAT16) {                                                                        
 911               		.loc 1 245 0
 912 0528 4111      		cpse r20,__zero_reg__
 913 052a 00C0      		rjmp .L51
 246:fs.c          ****     if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto ab
 914               		.loc 1 246 0
 915 052c F0E0      		ldi r31,0
 916 052e EE0F      		lsl r30
 917 0530 FF1F      		rol r31
 918 0532 492F      		mov r20,r25
 919 0534 5A2F      		mov r21,r26
 920 0536 6B2F      		mov r22,r27
 921 0538 7727      		clr r23
 922 053a 400F      		add r20,r16
 923 053c 511F      		adc r21,r17
 924 053e 621F      		adc r22,r18
 925 0540 731F      		adc r23,r19
 926 0542 02E0      		ldi r16,lo8(2)
 927 0544 10E0      		ldi r17,0
 928 0546 9F01      		movw r18,r30
 929 0548 80E0      		ldi r24,lo8(fs_tmp)
 930 054a 90E0      		ldi r25,hi8(fs_tmp)
 931 054c 0E94 0000 		call sd_read
 932               	.LVL52:
 933 0550 8823      		tst r24
 934 0552 01F0      		breq .L52
 935               	.L55:
 257:fs.c          ****   return 1;
 936               		.loc 1 257 0
 937 0554 81E0      		ldi r24,lo8(1)
 938 0556 00C0      		rjmp .L53
 939               	.L52:
 247:fs.c          ****     fs_tmp &= 0xFFFF;
 940               		.loc 1 247 0
 941 0558 8091 0000 		lds r24,fs_tmp
 942 055c 9091 0000 		lds r25,fs_tmp+1
 943 0560 A091 0000 		lds r26,fs_tmp+2
 944 0564 B091 0000 		lds r27,fs_tmp+3
 945 0568 AA27      		clr r26
 946 056a BB27      		clr r27
 947 056c 00C0      		rjmp .L58
 948               	.L51:
 249:fs.c          ****     if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 128, (WORD)((uint8_t)fs_tmp % 128) * 4, 4))
 949               		.loc 1 249 0
 950 056e EF77      		andi r30,lo8(127)
 951 0570 44E0      		ldi r20,lo8(4)
 952 0572 E49F      		mul r30,r20
 953 0574 F001      		movw r30,r0
 954 0576 1124      		clr __zero_reg__
 955 0578 AC01      		movw r20,r24
 956 057a BD01      		movw r22,r26
 957 057c A7E0      		ldi r26,7
 958               		1:
 959 057e 7695      		lsr r23
 960 0580 6795      		ror r22
 961 0582 5795      		ror r21
 962 0584 4795      		ror r20
 963 0586 AA95      		dec r26
 964 0588 01F4      		brne 1b
 965 058a 400F      		add r20,r16
 966 058c 511F      		adc r21,r17
 967 058e 621F      		adc r22,r18
 968 0590 731F      		adc r23,r19
 969 0592 04E0      		ldi r16,lo8(4)
 970 0594 10E0      		ldi r17,0
 971 0596 9F01      		movw r18,r30
 972 0598 80E0      		ldi r24,lo8(fs_tmp)
 973 059a 90E0      		ldi r25,hi8(fs_tmp)
 974 059c 0E94 0000 		call sd_read
 975               	.LVL53:
 976 05a0 8111      		cpse r24,__zero_reg__
 977 05a2 00C0      		rjmp .L55
 250:fs.c          ****     fs_tmp &= 0x0FFFFFFF;
 978               		.loc 1 250 0
 979 05a4 8091 0000 		lds r24,fs_tmp
 980 05a8 9091 0000 		lds r25,fs_tmp+1
 981 05ac A091 0000 		lds r26,fs_tmp+2
 982 05b0 B091 0000 		lds r27,fs_tmp+3
 983 05b4 BF70      		andi r27,15
 984               	.L58:
 985 05b6 8093 0000 		sts fs_tmp,r24
 986 05ba 9093 0000 		sts fs_tmp+1,r25
 987 05be A093 0000 		sts fs_tmp+2,r26
 988 05c2 B093 0000 		sts fs_tmp+3,r27
 989               	.LBB19:
 253:fs.c          ****   if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
 990               		.loc 1 253 0
 991 05c6 8091 0000 		lds r24,fs_tmp
 992 05ca 9091 0000 		lds r25,fs_tmp+1
 993 05ce A091 0000 		lds r26,fs_tmp+2
 994 05d2 B091 0000 		lds r27,fs_tmp+3
 995 05d6 8230      		cpi r24,2
 996 05d8 9105      		cpc r25,__zero_reg__
 997 05da A105      		cpc r26,__zero_reg__
 998 05dc B105      		cpc r27,__zero_reg__
 999 05de 00F0      		brlo .L56
 1000 05e0 4091 0000 		lds r20,fs_n_fatent
 1001 05e4 5091 0000 		lds r21,fs_n_fatent+1
 1002 05e8 6091 0000 		lds r22,fs_n_fatent+2
 1003 05ec 7091 0000 		lds r23,fs_n_fatent+3
 1004 05f0 8417      		cp r24,r20
 1005 05f2 9507      		cpc r25,r21
 1006 05f4 A607      		cpc r26,r22
 1007 05f6 B707      		cpc r27,r23
 1008 05f8 00F0      		brlo .L57
 1009               	.L56:
 254:fs.c          ****     fs_tmp = 0;
 1010               		.loc 1 254 0
 1011 05fa 1092 0000 		sts fs_tmp,__zero_reg__
 1012 05fe 1092 0000 		sts fs_tmp+1,__zero_reg__
 1013 0602 1092 0000 		sts fs_tmp+2,__zero_reg__
 1014 0606 1092 0000 		sts fs_tmp+3,__zero_reg__
 1015               	.L57:
 253:fs.c          ****   if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
 1016               		.loc 1 253 0
 1017 060a 80E0      		ldi r24,0
 1018               	.L53:
 1019               	/* epilogue start */
 1020               	.LBE19:
 258:fs.c          **** }
 1021               		.loc 1 258 0
 1022 060c 1F91      		pop r17
 1023 060e 0F91      		pop r16
 1024 0610 0895      		ret
 1025               		.cfi_endproc
 1026               	.LFE6:
 1029               	fs_readdirInt:
 1030               	.LFB8:
 280:fs.c          **** static uint8_t fs_readdirInt(void) {
 1031               		.loc 1 280 0
 1032               		.cfi_startproc
 1033 0612 0F93      		push r16
 1034               	.LCFI36:
 1035               		.cfi_def_cfa_offset 3
 1036               		.cfi_offset 16, -2
 1037 0614 1F93      		push r17
 1038               	.LCFI37:
 1039               		.cfi_def_cfa_offset 4
 1040               		.cfi_offset 17, -3
 1041               	/* prologue: function */
 1042               	/* frame size = 0 */
 1043               	/* stack size = 2 */
 1044               	.L__stack_usage = 2
 281:fs.c          ****   if(fs_file.entry_able) {
 1045               		.loc 1 281 0
 1046 0616 8091 0000 		lds r24,fs_file+1
 1047 061a 8823      		tst r24
 1048 061c 01F4      		brne .+2
 1049 061e 00C0      		rjmp .L60
 282:fs.c          ****     fs_file.entry_index++;
 1050               		.loc 1 282 0
 1051 0620 8091 0000 		lds r24,fs_file+2
 1052 0624 9091 0000 		lds r25,fs_file+2+1
 1053 0628 0196      		adiw r24,1
 1054 062a 9093 0000 		sts fs_file+2+1,r25
 1055 062e 8093 0000 		sts fs_file+2,r24
 285:fs.c          ****     if(fs_file.entry_index == 0 || (fs_file.entry_cluster == 0 && fs_file.entry_index == fs_n_rootd
 1056               		.loc 1 285 0
 1057 0632 0097      		sbiw r24,0
 1058 0634 01F0      		breq .L61
 285:fs.c          ****     if(fs_file.entry_index == 0 || (fs_file.entry_cluster == 0 && fs_file.entry_index == fs_n_rootd
 1059               		.loc 1 285 0 is_stmt 0 discriminator 1
 1060 0636 0091 0000 		lds r16,fs_file+4
 1061 063a 1091 0000 		lds r17,fs_file+4+1
 1062 063e 2091 0000 		lds r18,fs_file+4+2
 1063 0642 3091 0000 		lds r19,fs_file+4+3
 1064 0646 0115      		cp r16,__zero_reg__
 1065 0648 1105      		cpc r17,__zero_reg__
 1066 064a 2105      		cpc r18,__zero_reg__
 1067 064c 3105      		cpc r19,__zero_reg__
 1068 064e 01F4      		brne .L62
 1069 0650 4091 0000 		lds r20,fs_n_rootdir
 1070 0654 5091 0000 		lds r21,fs_n_rootdir+1
 1071 0658 8417      		cp r24,r20
 1072 065a 9507      		cpc r25,r21
 1073 065c 01F4      		brne .L62
 1074               	.L61:
 286:fs.c          ****       fs_file.entry_index = 0;
 1075               		.loc 1 286 0 is_stmt 1
 1076 065e 1092 0000 		sts fs_file+2+1,__zero_reg__
 1077 0662 1092 0000 		sts fs_file+2,__zero_reg__
 1078               	.L63:
 288:fs.c          ****       FS_DIRENTRY[DIR_Name] = 0; /* –ü—Ä–∏–∑–Ω–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–
 1079               		.loc 1 288 0
 1080 0666 1092 0000 		sts buf+480,__zero_reg__
 289:fs.c          ****       fs_file.entry_able = 0; 
 1081               		.loc 1 289 0
 1082 066a 1092 0000 		sts fs_file+1,__zero_reg__
 290:fs.c          ****       return 0; 
 1083               		.loc 1 290 0
 1084 066e 80E0      		ldi r24,0
 1085 0670 00C0      		rjmp .L64
 1086               	.L62:
 294:fs.c          ****     if(fs_file.entry_index % 16 == 0) {        
 1087               		.loc 1 294 0
 1088 0672 AC01      		movw r20,r24
 1089 0674 4F70      		andi r20,15
 1090 0676 5527      		clr r21
 1091 0678 452B      		or r20,r21
 1092 067a 01F0      		breq .+2
 1093 067c 00C0      		rjmp .L66
 295:fs.c          ****       fs_file.entry_sector++;		
 1094               		.loc 1 295 0
 1095 067e 4091 0000 		lds r20,fs_file+8
 1096 0682 5091 0000 		lds r21,fs_file+8+1
 1097 0686 6091 0000 		lds r22,fs_file+8+2
 1098 068a 7091 0000 		lds r23,fs_file+8+3
 1099 068e 4F5F      		subi r20,-1
 1100 0690 5F4F      		sbci r21,-1
 1101 0692 6F4F      		sbci r22,-1
 1102 0694 7F4F      		sbci r23,-1
 1103 0696 4093 0000 		sts fs_file+8,r20
 1104 069a 5093 0000 		sts fs_file+8+1,r21
 1105 069e 6093 0000 		sts fs_file+8+2,r22
 1106 06a2 7093 0000 		sts fs_file+8+3,r23
 298:fs.c          ****       if(fs_file.entry_cluster != 0 && ((fs_file.entry_index / 16) % fs_csize) == 0) {
 1107               		.loc 1 298 0
 1108 06a6 0115      		cp r16,__zero_reg__
 1109 06a8 1105      		cpc r17,__zero_reg__
 1110 06aa 2105      		cpc r18,__zero_reg__
 1111 06ac 3105      		cpc r19,__zero_reg__
 1112 06ae 01F4      		brne .+2
 1113 06b0 00C0      		rjmp .L66
 298:fs.c          ****       if(fs_file.entry_cluster != 0 && ((fs_file.entry_index / 16) % fs_csize) == 0) {
 1114               		.loc 1 298 0 is_stmt 0 discriminator 1
 1115 06b2 74E0      		ldi r23,4
 1116               		1:
 1117 06b4 9695      		lsr r25
 1118 06b6 8795      		ror r24
 1119 06b8 7A95      		dec r23
 1120 06ba 01F4      		brne 1b
 1121 06bc 6091 0000 		lds r22,fs_csize
 1122 06c0 70E0      		ldi r23,0
 1123 06c2 0E94 0000 		call __udivmodhi4
 1124 06c6 892B      		or r24,r25
 1125 06c8 01F0      		breq .+2
 1126 06ca 00C0      		rjmp .L66
 301:fs.c          ****         fs_tmp = fs_file.entry_cluster;
 1127               		.loc 1 301 0 is_stmt 1
 1128 06cc 0093 0000 		sts fs_tmp,r16
 1129 06d0 1093 0000 		sts fs_tmp+1,r17
 1130 06d4 2093 0000 		sts fs_tmp+2,r18
 1131 06d8 3093 0000 		sts fs_tmp+3,r19
 302:fs.c          ****         if(fs_nextCluster()) return 1;
 1132               		.loc 1 302 0
 1133 06dc 0E94 0000 		call fs_nextCluster
 1134               	.LVL54:
 1135 06e0 8111      		cpse r24,__zero_reg__
 1136 06e2 00C0      		rjmp .L68
 303:fs.c          ****         if(fs_tmp == 0) goto retEnd; /* –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä, —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ–º
 1137               		.loc 1 303 0
 1138 06e4 8091 0000 		lds r24,fs_tmp
 1139 06e8 9091 0000 		lds r25,fs_tmp+1
 1140 06ec A091 0000 		lds r26,fs_tmp+2
 1141 06f0 B091 0000 		lds r27,fs_tmp+3
 1142 06f4 0097      		sbiw r24,0
 1143 06f6 A105      		cpc r26,__zero_reg__
 1144 06f8 B105      		cpc r27,__zero_reg__
 1145 06fa 01F4      		brne .+2
 1146 06fc 00C0      		rjmp .L63
 306:fs.c          ****         fs_file.entry_cluster = fs_tmp;
 1147               		.loc 1 306 0
 1148 06fe 8093 0000 		sts fs_file+4,r24
 1149 0702 9093 0000 		sts fs_file+4+1,r25
 1150 0706 A093 0000 		sts fs_file+4+2,r26
 1151 070a B093 0000 		sts fs_file+4+3,r27
 307:fs.c          ****         fs_clust2sect();
 1152               		.loc 1 307 0
 1153 070e 0E94 0000 		call fs_clust2sect
 1154               	.LVL55:
 308:fs.c          ****         fs_file.entry_sector = fs_tmp;
 1155               		.loc 1 308 0
 1156 0712 8091 0000 		lds r24,fs_tmp
 1157 0716 9091 0000 		lds r25,fs_tmp+1
 1158 071a A091 0000 		lds r26,fs_tmp+2
 1159 071e B091 0000 		lds r27,fs_tmp+3
 1160 0722 00C0      		rjmp .L78
 1161               	.L60:
 312:fs.c          ****     fs_file.entry_index = 0;
 1162               		.loc 1 312 0
 1163 0724 1092 0000 		sts fs_file+2+1,__zero_reg__
 1164 0728 1092 0000 		sts fs_file+2,__zero_reg__
 313:fs.c          ****     fs_file.entry_able  = 1;
 1165               		.loc 1 313 0
 1166 072c 81E0      		ldi r24,lo8(1)
 1167 072e 8093 0000 		sts fs_file+1,r24
 314:fs.c          ****     fs_tmp = fs_file.entry_start_cluster; 
 1168               		.loc 1 314 0
 1169 0732 8091 0000 		lds r24,fs_file+12
 1170 0736 9091 0000 		lds r25,fs_file+12+1
 1171 073a A091 0000 		lds r26,fs_file+12+2
 1172 073e B091 0000 		lds r27,fs_file+12+3
 1173 0742 8093 0000 		sts fs_tmp,r24
 1174 0746 9093 0000 		sts fs_tmp+1,r25
 1175 074a A093 0000 		sts fs_tmp+2,r26
 1176 074e B093 0000 		sts fs_tmp+3,r27
 319:fs.c          ****     fs_file.entry_cluster = fs_tmp;
 1177               		.loc 1 319 0
 1178 0752 8093 0000 		sts fs_file+4,r24
 1179 0756 9093 0000 		sts fs_file+4+1,r25
 1180 075a A093 0000 		sts fs_file+4+2,r26
 1181 075e B093 0000 		sts fs_file+4+3,r27
 320:fs.c          ****     fs_clust2sect();
 1182               		.loc 1 320 0
 1183 0762 0E94 0000 		call fs_clust2sect
 1184               	.LVL56:
 321:fs.c          ****     fs_file.entry_sector = fs_tmp;
 1185               		.loc 1 321 0
 1186 0766 8091 0000 		lds r24,fs_tmp
 1187 076a 9091 0000 		lds r25,fs_tmp+1
 1188 076e A091 0000 		lds r26,fs_tmp+2
 1189 0772 B091 0000 		lds r27,fs_tmp+3
 1190 0776 8093 0000 		sts fs_file+8,r24
 1191 077a 9093 0000 		sts fs_file+8+1,r25
 1192 077e A093 0000 		sts fs_file+8+2,r26
 1193 0782 B093 0000 		sts fs_file+8+3,r27
 324:fs.c          ****     if(fs_file.entry_cluster == 0) fs_file.entry_sector = fs_dirbase;
 1194               		.loc 1 324 0
 1195 0786 8091 0000 		lds r24,fs_file+4
 1196 078a 9091 0000 		lds r25,fs_file+4+1
 1197 078e A091 0000 		lds r26,fs_file+4+2
 1198 0792 B091 0000 		lds r27,fs_file+4+3
 1199 0796 892B      		or r24,r25
 1200 0798 8A2B      		or r24,r26
 1201 079a 8B2B      		or r24,r27
 1202 079c 01F4      		brne .L66
 324:fs.c          ****     if(fs_file.entry_cluster == 0) fs_file.entry_sector = fs_dirbase;
 1203               		.loc 1 324 0 is_stmt 0 discriminator 1
 1204 079e 8091 0000 		lds r24,fs_dirbase
 1205 07a2 9091 0000 		lds r25,fs_dirbase+1
 1206 07a6 A091 0000 		lds r26,fs_dirbase+2
 1207 07aa B091 0000 		lds r27,fs_dirbase+3
 1208               	.L78:
 1209 07ae 8093 0000 		sts fs_file+8,r24
 1210 07b2 9093 0000 		sts fs_file+8+1,r25
 1211 07b6 A093 0000 		sts fs_file+8+2,r26
 1212 07ba B093 0000 		sts fs_file+8+3,r27
 1213               	.L66:
 327:fs.c          ****   return sd_read(FS_DIRENTRY, fs_file.entry_sector, (WORD)((fs_file.entry_index % 16) * 32), 32);
 1214               		.loc 1 327 0 is_stmt 1
 1215 07be 2091 0000 		lds r18,fs_file+2
 1216 07c2 3091 0000 		lds r19,fs_file+2+1
 1217 07c6 2F70      		andi r18,15
 1218 07c8 3327      		clr r19
 1219 07ca 65E0      		ldi r22,5
 1220               		1:
 1221 07cc 220F      		lsl r18
 1222 07ce 331F      		rol r19
 1223 07d0 6A95      		dec r22
 1224 07d2 01F4      		brne 1b
 1225 07d4 4091 0000 		lds r20,fs_file+8
 1226 07d8 5091 0000 		lds r21,fs_file+8+1
 1227 07dc 6091 0000 		lds r22,fs_file+8+2
 1228 07e0 7091 0000 		lds r23,fs_file+8+3
 1229 07e4 00E2      		ldi r16,lo8(32)
 1230 07e6 10E0      		ldi r17,0
 1231 07e8 80E0      		ldi r24,lo8(buf+480)
 1232 07ea 90E0      		ldi r25,hi8(buf+480)
 1233 07ec 0E94 0000 		call sd_read
 1234               	.LVL57:
 1235 07f0 00C0      		rjmp .L64
 1236               	.L68:
 302:fs.c          ****         if(fs_nextCluster()) return 1;
 1237               		.loc 1 302 0
 1238 07f2 81E0      		ldi r24,lo8(1)
 1239               	.L64:
 1240               	/* epilogue start */
 328:fs.c          **** }
 1241               		.loc 1 328 0
 1242 07f4 1F91      		pop r17
 1243 07f6 0F91      		pop r16
 1244 07f8 0895      		ret
 1245               		.cfi_endproc
 1246               	.LFE8:
 1249               	fs_nextRWSector:
 1250               	.LFB23:
 823:fs.c          **** static uint8_t fs_nextRWSector(void) {
 1251               		.loc 1 823 0
 1252               		.cfi_startproc
 1253 07fa 0F93      		push r16
 1254               	.LCFI38:
 1255               		.cfi_def_cfa_offset 3
 1256               		.cfi_offset 16, -2
 1257 07fc 1F93      		push r17
 1258               	.LCFI39:
 1259               		.cfi_def_cfa_offset 4
 1260               		.cfi_offset 17, -3
 1261               	/* prologue: function */
 1262               	/* frame size = 0 */
 1263               	/* stack size = 2 */
 1264               	.L__stack_usage = 2
 824:fs.c          ****   if(fs_file.ptr == 0) {
 1265               		.loc 1 824 0
 1266 07fe 8091 0000 		lds r24,fs_file+16
 1267 0802 9091 0000 		lds r25,fs_file+16+1
 1268 0806 A091 0000 		lds r26,fs_file+16+2
 1269 080a B091 0000 		lds r27,fs_file+16+3
 1270 080e 0097      		sbiw r24,0
 1271 0810 A105      		cpc r26,__zero_reg__
 1272 0812 B105      		cpc r27,__zero_reg__
 1273 0814 01F4      		brne .L80
 826:fs.c          ****     fs_tmp = fs_file.entry_start_cluster;
 1274               		.loc 1 826 0
 1275 0816 8091 0000 		lds r24,fs_file+12
 1276 081a 9091 0000 		lds r25,fs_file+12+1
 1277 081e A091 0000 		lds r26,fs_file+12+2
 1278 0822 B091 0000 		lds r27,fs_file+12+3
 1279 0826 8093 0000 		sts fs_tmp,r24
 1280 082a 9093 0000 		sts fs_tmp+1,r25
 1281 082e A093 0000 		sts fs_tmp+2,r26
 1282 0832 B093 0000 		sts fs_tmp+3,r27
 1283 0836 00C0      		rjmp .L81
 1284               	.L80:
 829:fs.c          ****     if((WORD)fs_file.ptr % 512) return 0;
 1285               		.loc 1 829 0
 1286 0838 9170      		andi r25,1
 1287 083a 892B      		or r24,r25
 1288 083c 01F0      		breq .+2
 1289 083e 00C0      		rjmp .L90
 832:fs.c          ****     fs_file.sector++;
 1290               		.loc 1 832 0
 1291 0840 8091 0000 		lds r24,fs_file+28
 1292 0844 9091 0000 		lds r25,fs_file+28+1
 1293 0848 A091 0000 		lds r26,fs_file+28+2
 1294 084c B091 0000 		lds r27,fs_file+28+3
 1295 0850 0196      		adiw r24,1
 1296 0852 A11D      		adc r26,__zero_reg__
 1297 0854 B11D      		adc r27,__zero_reg__
 1298 0856 8093 0000 		sts fs_file+28,r24
 1299 085a 9093 0000 		sts fs_file+28+1,r25
 1300 085e A093 0000 		sts fs_file+28+2,r26
 1301 0862 B093 0000 		sts fs_file+28+3,r27
 835:fs.c          ****     if(((fs_file.sector - fs_database) % fs_csize) != 0) return 0;
 1302               		.loc 1 835 0
 1303 0866 4091 0000 		lds r20,fs_database
 1304 086a 5091 0000 		lds r21,fs_database+1
 1305 086e 6091 0000 		lds r22,fs_database+2
 1306 0872 7091 0000 		lds r23,fs_database+3
 1307 0876 8C01      		movw r16,r24
 1308 0878 9D01      		movw r18,r26
 1309 087a 041B      		sub r16,r20
 1310 087c 150B      		sbc r17,r21
 1311 087e 260B      		sbc r18,r22
 1312 0880 370B      		sbc r19,r23
 1313 0882 C901      		movw r24,r18
 1314 0884 B801      		movw r22,r16
 1315 0886 2091 0000 		lds r18,fs_csize
 1316 088a 30E0      		ldi r19,0
 1317 088c 40E0      		ldi r20,0
 1318 088e 50E0      		ldi r21,0
 1319 0890 0E94 0000 		call __udivmodsi4
 1320 0894 672B      		or r22,r23
 1321 0896 682B      		or r22,r24
 1322 0898 692B      		or r22,r25
 1323 089a 01F0      		breq .+2
 1324 089c 00C0      		rjmp .L90
 838:fs.c          ****     fs_tmp = fs_file.cluster;
 1325               		.loc 1 838 0
 1326 089e 8091 0000 		lds r24,fs_file+24
 1327 08a2 9091 0000 		lds r25,fs_file+24+1
 1328 08a6 A091 0000 		lds r26,fs_file+24+2
 1329 08aa B091 0000 		lds r27,fs_file+24+3
 1330 08ae 8093 0000 		sts fs_tmp,r24
 1331 08b2 9093 0000 		sts fs_tmp+1,r25
 1332 08b6 A093 0000 		sts fs_tmp+2,r26
 1333 08ba B093 0000 		sts fs_tmp+3,r27
 839:fs.c          ****     if(fs_nextCluster()) return 1;
 1334               		.loc 1 839 0
 1335 08be 0E94 0000 		call fs_nextCluster
 1336               	.LVL58:
 1337 08c2 8111      		cpse r24,__zero_reg__
 1338 08c4 00C0      		rjmp .L88
 1339               	.L81:
 1340               	.LBB22:
 1341               	.LBB23:
 843:fs.c          ****   if(fs_tmp == 0) {                
 1342               		.loc 1 843 0
 1343 08c6 8091 0000 		lds r24,fs_tmp
 1344 08ca 9091 0000 		lds r25,fs_tmp+1
 1345 08ce A091 0000 		lds r26,fs_tmp+2
 1346 08d2 B091 0000 		lds r27,fs_tmp+3
 1347 08d6 892B      		or r24,r25
 1348 08d8 8A2B      		or r24,r26
 1349 08da 8B2B      		or r24,r27
 1350 08dc 01F4      		brne .L85
 844:fs.c          ****     if(fs_allocCluster(ALLOCCLUSTER)) return 1;
 1351               		.loc 1 844 0
 1352 08de 80E0      		ldi r24,0
 1353 08e0 0E94 0000 		call fs_allocCluster
 1354               	.LVL59:
 1355 08e4 8111      		cpse r24,__zero_reg__
 1356 08e6 00C0      		rjmp .L88
 845:fs.c          ****     if(fs_file.ptr == 0) fs_file.entry_start_cluster = fs_tmp;
 1357               		.loc 1 845 0
 1358 08e8 8091 0000 		lds r24,fs_file+16
 1359 08ec 9091 0000 		lds r25,fs_file+16+1
 1360 08f0 A091 0000 		lds r26,fs_file+16+2
 1361 08f4 B091 0000 		lds r27,fs_file+16+3
 1362 08f8 892B      		or r24,r25
 1363 08fa 8A2B      		or r24,r26
 1364 08fc 8B2B      		or r24,r27
 1365 08fe 01F4      		brne .L87
 1366 0900 8091 0000 		lds r24,fs_tmp
 1367 0904 9091 0000 		lds r25,fs_tmp+1
 1368 0908 A091 0000 		lds r26,fs_tmp+2
 1369 090c B091 0000 		lds r27,fs_tmp+3
 1370 0910 8093 0000 		sts fs_file+12,r24
 1371 0914 9093 0000 		sts fs_file+12+1,r25
 1372 0918 A093 0000 		sts fs_file+12+2,r26
 1373 091c B093 0000 		sts fs_file+12+3,r27
 1374 0920 00C0      		rjmp .L85
 1375               	.L87:
 846:fs.c          ****                     else fs_setNextCluster(fs_file.cluster); /* fs_tmp —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —Ç–∞–∫
 1376               		.loc 1 846 0
 1377 0922 6091 0000 		lds r22,fs_file+24
 1378 0926 7091 0000 		lds r23,fs_file+24+1
 1379 092a 8091 0000 		lds r24,fs_file+24+2
 1380 092e 9091 0000 		lds r25,fs_file+24+3
 1381 0932 0E94 0000 		call fs_setNextCluster
 1382               	.LVL60:
 1383               	.L85:
 850:fs.c          ****   fs_file.cluster = fs_tmp;
 1384               		.loc 1 850 0
 1385 0936 8091 0000 		lds r24,fs_tmp
 1386 093a 9091 0000 		lds r25,fs_tmp+1
 1387 093e A091 0000 		lds r26,fs_tmp+2
 1388 0942 B091 0000 		lds r27,fs_tmp+3
 1389 0946 8093 0000 		sts fs_file+24,r24
 1390 094a 9093 0000 		sts fs_file+24+1,r25
 1391 094e A093 0000 		sts fs_file+24+2,r26
 1392 0952 B093 0000 		sts fs_file+24+3,r27
 851:fs.c          ****   fs_clust2sect();
 1393               		.loc 1 851 0
 1394 0956 0E94 0000 		call fs_clust2sect
 1395               	.LVL61:
 852:fs.c          ****   fs_file.sector  = fs_tmp;
 1396               		.loc 1 852 0
 1397 095a 8091 0000 		lds r24,fs_tmp
 1398 095e 9091 0000 		lds r25,fs_tmp+1
 1399 0962 A091 0000 		lds r26,fs_tmp+2
 1400 0966 B091 0000 		lds r27,fs_tmp+3
 1401 096a 8093 0000 		sts fs_file+28,r24
 1402 096e 9093 0000 		sts fs_file+28+1,r25
 1403 0972 A093 0000 		sts fs_file+28+2,r26
 1404 0976 B093 0000 		sts fs_file+28+3,r27
 1405               	.L90:
 853:fs.c          ****   return 0;
 1406               		.loc 1 853 0
 1407 097a 80E0      		ldi r24,0
 1408 097c 00C0      		rjmp .L83
 1409               	.L88:
 1410               	.LBE23:
 1411               	.LBE22:
 839:fs.c          ****     if(fs_nextCluster()) return 1;
 1412               		.loc 1 839 0
 1413 097e 81E0      		ldi r24,lo8(1)
 1414               	.L83:
 1415               	/* epilogue start */
 854:fs.c          **** }
 1416               		.loc 1 854 0
 1417 0980 1F91      		pop r17
 1418 0982 0F91      		pop r16
 1419 0984 0895      		ret
 1420               		.cfi_endproc
 1421               	.LFE23:
 1424               	fs_saveFileLength:
 1425               	.LFB26:
 928:fs.c          **** static char fs_saveFileLength(void) {
 1426               		.loc 1 928 0
 1427               		.cfi_startproc
 1428               	/* prologue: function */
 1429               	/* frame size = 0 */
 1430               	/* stack size = 0 */
 1431               	.L__stack_usage = 0
 931:fs.c          ****   if(fs_file.changed == 0) return 0;
 1432               		.loc 1 931 0
 1433 0986 8091 0000 		lds r24,fs_file+32
 1434 098a 8823      		tst r24
 1435 098c 01F0      		breq .L93
 932:fs.c          ****   fs_file.changed = 0;
 1436               		.loc 1 932 0
 1437 098e 1092 0000 		sts fs_file+32,__zero_reg__
 935:fs.c          ****   if(sd_readBuf(fs_file.entry_sector)) return 1;
 1438               		.loc 1 935 0
 1439 0992 6091 0000 		lds r22,fs_file+8
 1440 0996 7091 0000 		lds r23,fs_file+8+1
 1441 099a 8091 0000 		lds r24,fs_file+8+2
 1442 099e 9091 0000 		lds r25,fs_file+8+3
 1443 09a2 0E94 0000 		call sd_readBuf
 1444               	.LVL62:
 1445 09a6 8111      		cpse r24,__zero_reg__
 1446 09a8 00C0      		rjmp .L94
 1447               	.LBB28:
 1448               	.LBB29:
 937:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
 1449               		.loc 1 937 0
 1450 09aa E091 0000 		lds r30,fs_file+2
 1451 09ae F091 0000 		lds r31,fs_file+2+1
 1452 09b2 EF70      		andi r30,15
 1453 09b4 FF27      		clr r31
 1454 09b6 A5E0      		ldi r26,5
 1455               		1:
 1456 09b8 EE0F      		lsl r30
 1457 09ba FF1F      		rol r31
 1458 09bc AA95      		dec r26
 1459 09be 01F4      		brne 1b
 1460 09c0 E050      		subi r30,lo8(-(buf))
 1461 09c2 F040      		sbci r31,hi8(-(buf))
 1462               	.LVL63:
 938:fs.c          ****   LD_DWORD(entry + DIR_FileSize) = fs_file.size;  
 1463               		.loc 1 938 0
 1464 09c4 8091 0000 		lds r24,fs_file+20
 1465 09c8 9091 0000 		lds r25,fs_file+20+1
 1466 09cc A091 0000 		lds r26,fs_file+20+2
 1467 09d0 B091 0000 		lds r27,fs_file+20+3
 1468 09d4 848F      		std Z+28,r24
 1469 09d6 958F      		std Z+29,r25
 1470 09d8 A68F      		std Z+30,r26
 1471 09da B78F      		std Z+31,r27
 939:fs.c          ****   fs_setEntryCluster(entry, fs_file.entry_start_cluster);
 1472               		.loc 1 939 0
 1473 09dc 8091 0000 		lds r24,fs_file+12
 1474 09e0 9091 0000 		lds r25,fs_file+12+1
 1475 09e4 A091 0000 		lds r26,fs_file+12+2
 1476 09e8 B091 0000 		lds r27,fs_file+12+3
 1477               	.LVL64:
 1478               	.LBB30:
 1479               	.LBB31:
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 1480               		.loc 1 492 0
 1481 09ec 938F      		std Z+27,r25
 1482 09ee 828F      		std Z+26,r24
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 1483               		.loc 1 493 0
 1484 09f0 B58B      		std Z+21,r27
 1485 09f2 A48B      		std Z+20,r26
 1486               	.LBE31:
 1487               	.LBE30:
 941:fs.c          ****   return sd_writeBuf(fs_file.entry_sector);
 1488               		.loc 1 941 0
 1489 09f4 6091 0000 		lds r22,fs_file+8
 1490 09f8 7091 0000 		lds r23,fs_file+8+1
 1491 09fc 8091 0000 		lds r24,fs_file+8+2
 1492 0a00 9091 0000 		lds r25,fs_file+8+3
 1493 0a04 0C94 0000 		jmp sd_writeBuf
 1494               	.LVL65:
 1495               	.L93:
 1496               	.LBE29:
 1497               	.LBE28:
 931:fs.c          ****   if(fs_file.changed == 0) return 0;
 1498               		.loc 1 931 0
 1499 0a08 80E0      		ldi r24,0
 1500 0a0a 0895      		ret
 1501               	.L94:
 935:fs.c          ****   if(sd_readBuf(fs_file.entry_sector)) return 1;
 1502               		.loc 1 935 0
 1503 0a0c 81E0      		ldi r24,lo8(1)
 942:fs.c          **** }
 1504               		.loc 1 942 0
 1505 0a0e 0895      		ret
 1506               		.cfi_endproc
 1507               	.LFE26:
 1509               	.global	fs_init
 1511               	fs_init:
 1512               	.LFB3:
 128:fs.c          **** uint8_t fs_init(void) {
 1513               		.loc 1 128 0
 1514               		.cfi_startproc
 1515 0a10 2F92      		push r2
 1516               	.LCFI40:
 1517               		.cfi_def_cfa_offset 3
 1518               		.cfi_offset 2, -2
 1519 0a12 3F92      		push r3
 1520               	.LCFI41:
 1521               		.cfi_def_cfa_offset 4
 1522               		.cfi_offset 3, -3
 1523 0a14 4F92      		push r4
 1524               	.LCFI42:
 1525               		.cfi_def_cfa_offset 5
 1526               		.cfi_offset 4, -4
 1527 0a16 5F92      		push r5
 1528               	.LCFI43:
 1529               		.cfi_def_cfa_offset 6
 1530               		.cfi_offset 5, -5
 1531 0a18 6F92      		push r6
 1532               	.LCFI44:
 1533               		.cfi_def_cfa_offset 7
 1534               		.cfi_offset 6, -6
 1535 0a1a 7F92      		push r7
 1536               	.LCFI45:
 1537               		.cfi_def_cfa_offset 8
 1538               		.cfi_offset 7, -7
 1539 0a1c 8F92      		push r8
 1540               	.LCFI46:
 1541               		.cfi_def_cfa_offset 9
 1542               		.cfi_offset 8, -8
 1543 0a1e 9F92      		push r9
 1544               	.LCFI47:
 1545               		.cfi_def_cfa_offset 10
 1546               		.cfi_offset 9, -9
 1547 0a20 AF92      		push r10
 1548               	.LCFI48:
 1549               		.cfi_def_cfa_offset 11
 1550               		.cfi_offset 10, -10
 1551 0a22 BF92      		push r11
 1552               	.LCFI49:
 1553               		.cfi_def_cfa_offset 12
 1554               		.cfi_offset 11, -11
 1555 0a24 CF92      		push r12
 1556               	.LCFI50:
 1557               		.cfi_def_cfa_offset 13
 1558               		.cfi_offset 12, -12
 1559 0a26 DF92      		push r13
 1560               	.LCFI51:
 1561               		.cfi_def_cfa_offset 14
 1562               		.cfi_offset 13, -13
 1563 0a28 EF92      		push r14
 1564               	.LCFI52:
 1565               		.cfi_def_cfa_offset 15
 1566               		.cfi_offset 14, -14
 1567 0a2a FF92      		push r15
 1568               	.LCFI53:
 1569               		.cfi_def_cfa_offset 16
 1570               		.cfi_offset 15, -15
 1571 0a2c 1F93      		push r17
 1572               	.LCFI54:
 1573               		.cfi_def_cfa_offset 17
 1574               		.cfi_offset 17, -16
 1575 0a2e CF93      		push r28
 1576               	.LCFI55:
 1577               		.cfi_def_cfa_offset 18
 1578               		.cfi_offset 28, -17
 1579 0a30 DF93      		push r29
 1580               	.LCFI56:
 1581               		.cfi_def_cfa_offset 19
 1582               		.cfi_offset 29, -18
 1583 0a32 CDB7      		in r28,__SP_L__
 1584 0a34 DEB7      		in r29,__SP_H__
 1585               	.LCFI57:
 1586               		.cfi_def_cfa_register 28
 1587 0a36 2E97      		sbiw r28,14
 1588               	.LCFI58:
 1589               		.cfi_def_cfa_offset 33
 1590 0a38 0FB6      		in __tmp_reg__,__SREG__
 1591 0a3a F894      		cli
 1592 0a3c DEBF      		out __SP_H__,r29
 1593 0a3e 0FBE      		out __SREG__,__tmp_reg__
 1594 0a40 CDBF      		out __SP_L__,r28
 1595               	/* prologue: function */
 1596               	/* frame size = 14 */
 1597               	/* stack size = 31 */
 1598               	.L__stack_usage = 31
 132:fs.c          ****   fs_fatoptim = 2;
 1599               		.loc 1 132 0
 1600 0a42 82E0      		ldi r24,lo8(2)
 1601 0a44 90E0      		ldi r25,0
 1602 0a46 A0E0      		ldi r26,0
 1603 0a48 B0E0      		ldi r27,0
 1604 0a4a 8093 0000 		sts fs_fatoptim,r24
 1605 0a4e 9093 0000 		sts fs_fatoptim+1,r25
 1606 0a52 A093 0000 		sts fs_fatoptim+2,r26
 1607 0a56 B093 0000 		sts fs_fatoptim+3,r27
 136:fs.c          ****   fs_file.opened = OPENED_NONE;
 1608               		.loc 1 136 0
 1609 0a5a 1092 0000 		sts fs_file,__zero_reg__
 138:fs.c          ****   fs_secondFile.opened = OPENED_NONE;
 1610               		.loc 1 138 0
 1611 0a5e 1092 0000 		sts fs_secondFile,__zero_reg__
 140:fs.c          ****   fs_type = FS_ERROR;
 1612               		.loc 1 140 0
 1613 0a62 8093 0000 		sts fs_type,r24
 144:fs.c          ****   if(sd_init()) return 1;
 1614               		.loc 1 144 0
 1615 0a66 0E94 0000 		call sd_init
 1616               	.LVL66:
 1617 0a6a 8823      		tst r24
 1618 0a6c 01F0      		breq .L96
 1619               	.L98:
 1620 0a6e 81E0      		ldi r24,lo8(1)
 1621 0a70 00C0      		rjmp .L97
 1622               	.L96:
 1623 0a72 C12C      		mov r12,__zero_reg__
 1624 0a74 D12C      		mov r13,__zero_reg__
 1625 0a76 7601      		movw r14,r12
 1626               	.L102:
 1627               	.LVL67:
 149:fs.c          ****     if(sd_readBuf(bsect)) return 1;
 1628               		.loc 1 149 0
 1629 0a78 C701      		movw r24,r14
 1630 0a7a B601      		movw r22,r12
 1631 0a7c 0E94 0000 		call sd_readBuf
 1632               	.LVL68:
 1633 0a80 8111      		cpse r24,__zero_reg__
 1634 0a82 00C0      		rjmp .L98
 150:fs.c          ****     if(LD_WORD(buf + 510) == 0xAA55) {
 1635               		.loc 1 150 0
 1636 0a84 8091 0000 		lds r24,buf+510
 1637 0a88 9091 0000 		lds r25,buf+510+1
 1638 0a8c 8535      		cpi r24,85
 1639 0a8e 9A4A      		sbci r25,-86
 1640 0a90 01F0      		breq .L99
 1641               	.L101:
 1642               	.LDL1:
 160:fs.c          ****     lastError = ERR_NO_FILESYSTEM; return 1;
 1643               		.loc 1 160 0
 1644 0a92 81E0      		ldi r24,lo8(1)
 1645 0a94 8093 0000 		sts lastError,r24
 1646 0a98 00C0      		rjmp .L97
 1647               	.L99:
 151:fs.c          ****       if(LD_WORD(buf + BS_FilSysType  ) == 0x4146) break;
 1648               		.loc 1 151 0
 1649 0a9a 8091 0000 		lds r24,buf+54
 1650 0a9e 9091 0000 		lds r25,buf+54+1
 1651 0aa2 8634      		cpi r24,70
 1652 0aa4 9144      		sbci r25,65
 1653 0aa6 01F0      		breq .L100
 152:fs.c          ****       if(LD_WORD(buf + BS_FilSysType32) == 0x4146) break;
 1654               		.loc 1 152 0
 1655 0aa8 8091 0000 		lds r24,buf+82
 1656 0aac 9091 0000 		lds r25,buf+82+1
 1657 0ab0 8634      		cpi r24,70
 1658 0ab2 9144      		sbci r25,65
 1659 0ab4 01F0      		breq .L100
 154:fs.c          ****       if(bsect == 0 && buf[MBR_Table+4]) { 
 1660               		.loc 1 154 0
 1661 0ab6 CD28      		or r12,r13
 1662 0ab8 CE28      		or r12,r14
 1663 0aba CF28      		or r12,r15
 1664 0abc 01F4      		brne .L101
 154:fs.c          ****       if(bsect == 0 && buf[MBR_Table+4]) { 
 1665               		.loc 1 154 0 is_stmt 0 discriminator 1
 1666 0abe 8091 0000 		lds r24,buf+450
 1667 0ac2 8823      		tst r24
 1668 0ac4 01F0      		breq .L101
 155:fs.c          ****         bsect = LD_DWORD(buf + (MBR_Table + 8));
 1669               		.loc 1 155 0 is_stmt 1
 1670 0ac6 C090 0000 		lds r12,buf+454
 1671 0aca D090 0000 		lds r13,buf+454+1
 1672 0ace E090 0000 		lds r14,buf+454+2
 1673 0ad2 F090 0000 		lds r15,buf+454+3
 1674               	.LVL69:
 156:fs.c          ****         if(bsect != 0) continue;
 1675               		.loc 1 156 0
 1676 0ad6 C114      		cp r12,__zero_reg__
 1677 0ad8 D104      		cpc r13,__zero_reg__
 1678 0ada E104      		cpc r14,__zero_reg__
 1679 0adc F104      		cpc r15,__zero_reg__
 1680 0ade 01F4      		brne .L102
 1681 0ae0 00C0      		rjmp .L101
 1682               	.L100:
 164:fs.c          ****   fsize = LD_WORD(buf + BPB_FATSz16);
 1683               		.loc 1 164 0
 1684 0ae2 2091 0000 		lds r18,buf+22
 1685 0ae6 3091 0000 		lds r19,buf+22+1
 1686 0aea 40E0      		ldi r20,0
 1687 0aec 50E0      		ldi r21,0
 1688               	.LVL70:
 165:fs.c          ****   if(fsize == 0) fsize = LD_DWORD(buf + BPB_FATSz32);
 1689               		.loc 1 165 0
 1690 0aee 2115      		cp r18,__zero_reg__
 1691 0af0 3105      		cpc r19,__zero_reg__
 1692 0af2 4105      		cpc r20,__zero_reg__
 1693 0af4 5105      		cpc r21,__zero_reg__
 1694 0af6 01F4      		brne .L103
 165:fs.c          ****   if(fsize == 0) fsize = LD_DWORD(buf + BPB_FATSz32);
 1695               		.loc 1 165 0 is_stmt 0 discriminator 1
 1696 0af8 2091 0000 		lds r18,buf+36
 1697 0afc 3091 0000 		lds r19,buf+36+1
 1698 0b00 4091 0000 		lds r20,buf+36+2
 1699 0b04 5091 0000 		lds r21,buf+36+3
 1700               	.LVL71:
 1701               	.L103:
 168:fs.c          ****   tsect = LD_WORD( buf + BPB_TotSec16);  
 1702               		.loc 1 168 0 is_stmt 1
 1703 0b08 4090 0000 		lds r4,buf+19
 1704 0b0c 5090 0000 		lds r5,buf+19+1
 1705 0b10 612C      		mov r6,__zero_reg__
 1706 0b12 712C      		mov r7,__zero_reg__
 1707               	.LVL72:
 169:fs.c          ****   if(tsect == 0) tsect = LD_DWORD(buf + BPB_TotSec32);
 1708               		.loc 1 169 0
 1709 0b14 4114      		cp r4,__zero_reg__
 1710 0b16 5104      		cpc r5,__zero_reg__
 1711 0b18 6104      		cpc r6,__zero_reg__
 1712 0b1a 7104      		cpc r7,__zero_reg__
 1713 0b1c 01F4      		brne .L104
 169:fs.c          ****   if(tsect == 0) tsect = LD_DWORD(buf + BPB_TotSec32);
 1714               		.loc 1 169 0 is_stmt 0 discriminator 1
 1715 0b1e 4090 0000 		lds r4,buf+32
 1716 0b22 5090 0000 		lds r5,buf+32+1
 1717 0b26 6090 0000 		lds r6,buf+32+2
 1718 0b2a 7090 0000 		lds r7,buf+32+3
 1719               	.LVL73:
 1720               	.L104:
 172:fs.c          ****   fs_n_rootdir = LD_WORD(buf + BPB_RootEntCnt);
 1721               		.loc 1 172 0 is_stmt 1
 1722 0b2e 2090 0000 		lds r2,buf+17
 1723 0b32 3090 0000 		lds r3,buf+17+1
 1724 0b36 3092 0000 		sts fs_n_rootdir+1,r3
 1725 0b3a 2092 0000 		sts fs_n_rootdir,r2
 175:fs.c          ****   fs_fatbase  = bsect + LD_WORD(buf + BPB_RsvdSecCnt);
 1726               		.loc 1 175 0
 1727 0b3e 8091 0000 		lds r24,buf+14
 1728 0b42 9091 0000 		lds r25,buf+14+1
 1729 0b46 9E87      		std Y+14,r25
 1730 0b48 8D87      		std Y+13,r24
 1731 0b4a A0E0      		ldi r26,0
 1732 0b4c B0E0      		ldi r27,0
 1733 0b4e 8983      		std Y+1,r24
 1734 0b50 9A83      		std Y+2,r25
 1735 0b52 AB83      		std Y+3,r26
 1736 0b54 BC83      		std Y+4,r27
 1737 0b56 4C01      		movw r8,r24
 1738 0b58 5D01      		movw r10,r26
 1739 0b5a 8C0C      		add r8,r12
 1740 0b5c 9D1C      		adc r9,r13
 1741 0b5e AE1C      		adc r10,r14
 1742 0b60 BF1C      		adc r11,r15
 1743 0b62 8092 0000 		sts fs_fatbase,r8
 1744 0b66 9092 0000 		sts fs_fatbase+1,r9
 1745 0b6a A092 0000 		sts fs_fatbase+2,r10
 1746 0b6e B092 0000 		sts fs_fatbase+3,r11
 176:fs.c          ****   fs_fatbase2 = 0;
 1747               		.loc 1 176 0
 1748 0b72 1092 0000 		sts fs_fatbase2,__zero_reg__
 1749 0b76 1092 0000 		sts fs_fatbase2+1,__zero_reg__
 1750 0b7a 1092 0000 		sts fs_fatbase2+2,__zero_reg__
 1751 0b7e 1092 0000 		sts fs_fatbase2+3,__zero_reg__
 177:fs.c          ****   if(buf[BPB_NumFATs] >= 2) fs_fatbase2 = fs_fatbase + fsize;
 1752               		.loc 1 177 0
 1753 0b82 6091 0000 		lds r22,buf+16
 1754 0b86 6230      		cpi r22,lo8(2)
 1755 0b88 00F0      		brlo .L105
 177:fs.c          ****   if(buf[BPB_NumFATs] >= 2) fs_fatbase2 = fs_fatbase + fsize;
 1756               		.loc 1 177 0 is_stmt 0 discriminator 1
 1757 0b8a DA01      		movw r26,r20
 1758 0b8c C901      		movw r24,r18
 1759 0b8e 880D      		add r24,r8
 1760 0b90 991D      		adc r25,r9
 1761 0b92 AA1D      		adc r26,r10
 1762 0b94 BB1D      		adc r27,r11
 1763 0b96 8093 0000 		sts fs_fatbase2,r24
 1764 0b9a 9093 0000 		sts fs_fatbase2+1,r25
 1765 0b9e A093 0000 		sts fs_fatbase2+2,r26
 1766 0ba2 B093 0000 		sts fs_fatbase2+3,r27
 1767               	.L105:
 180:fs.c          ****   fs_csize = buf[BPB_SecPerClus];
 1768               		.loc 1 180 0 is_stmt 1
 1769 0ba6 1091 0000 		lds r17,buf+13
 1770 0baa 1093 0000 		sts fs_csize,r17
 183:fs.c          ****   fsize *= buf[BPB_NumFATs];
 1771               		.loc 1 183 0
 1772 0bae A62F      		mov r26,r22
 1773 0bb0 B0E0      		ldi r27,0
 1774 0bb2 0E94 0000 		call __muluhisi3
 1775 0bb6 6D83      		std Y+5,r22
 1776 0bb8 7E83      		std Y+6,r23
 1777 0bba 8F83      		std Y+7,r24
 1778 0bbc 9887      		std Y+8,r25
 1779               	.LVL74:
 184:fs.c          ****   fs_n_fatent = (tsect - LD_WORD(buf + BPB_RsvdSecCnt) - fsize - fs_n_rootdir / 16) / fs_csize + 2;
 1780               		.loc 1 184 0
 1781 0bbe B4E0      		ldi r27,4
 1782               		1:
 1783 0bc0 3694      		lsr r3
 1784 0bc2 2794      		ror r2
 1785 0bc4 BA95      		dec r27
 1786 0bc6 01F4      		brne 1b
 1787 0bc8 9101      		movw r18,r2
 1788 0bca 40E0      		ldi r20,0
 1789 0bcc 50E0      		ldi r21,0
 1790 0bce 2987      		std Y+9,r18
 1791 0bd0 3A87      		std Y+10,r19
 1792 0bd2 4B87      		std Y+11,r20
 1793 0bd4 5C87      		std Y+12,r21
 1794 0bd6 C301      		movw r24,r6
 1795 0bd8 B201      		movw r22,r4
 1796               	.LVL75:
 1797 0bda 2981      		ldd r18,Y+1
 1798 0bdc 3A81      		ldd r19,Y+2
 1799 0bde 4B81      		ldd r20,Y+3
 1800 0be0 5C81      		ldd r21,Y+4
 1801 0be2 621B      		sub r22,r18
 1802 0be4 730B      		sbc r23,r19
 1803 0be6 840B      		sbc r24,r20
 1804 0be8 950B      		sbc r25,r21
 1805 0bea 2D81      		ldd r18,Y+5
 1806 0bec 3E81      		ldd r19,Y+6
 1807 0bee 4F81      		ldd r20,Y+7
 1808 0bf0 5885      		ldd r21,Y+8
 1809 0bf2 621B      		sub r22,r18
 1810 0bf4 730B      		sbc r23,r19
 1811 0bf6 840B      		sbc r24,r20
 1812 0bf8 950B      		sbc r25,r21
 1813 0bfa 2985      		ldd r18,Y+9
 1814 0bfc 3A85      		ldd r19,Y+10
 1815 0bfe 4B85      		ldd r20,Y+11
 1816 0c00 5C85      		ldd r21,Y+12
 1817 0c02 621B      		sub r22,r18
 1818 0c04 730B      		sbc r23,r19
 1819 0c06 840B      		sbc r24,r20
 1820 0c08 950B      		sbc r25,r21
 1821 0c0a 212F      		mov r18,r17
 1822 0c0c 30E0      		ldi r19,0
 1823 0c0e 40E0      		ldi r20,0
 1824 0c10 50E0      		ldi r21,0
 1825 0c12 0E94 0000 		call __udivmodsi4
 1826 0c16 2E5F      		subi r18,-2
 1827 0c18 3F4F      		sbci r19,-1
 1828 0c1a 4F4F      		sbci r20,-1
 1829 0c1c 5F4F      		sbci r21,-1
 1830 0c1e 2093 0000 		sts fs_n_fatent,r18
 1831 0c22 3093 0000 		sts fs_n_fatent+1,r19
 1832 0c26 4093 0000 		sts fs_n_fatent+2,r20
 1833 0c2a 5093 0000 		sts fs_n_fatent+3,r21
 187:fs.c          ****   fs_database = fs_fatbase + fsize + fs_n_rootdir / 16;
 1834               		.loc 1 187 0
 1835 0c2e 8D81      		ldd r24,Y+5
 1836 0c30 9E81      		ldd r25,Y+6
 1837 0c32 AF81      		ldd r26,Y+7
 1838 0c34 B885      		ldd r27,Y+8
 1839 0c36 880E      		add r8,r24
 1840 0c38 991E      		adc r9,r25
 1841 0c3a AA1E      		adc r10,r26
 1842 0c3c BB1E      		adc r11,r27
 1843 0c3e 8985      		ldd r24,Y+9
 1844 0c40 9A85      		ldd r25,Y+10
 1845 0c42 AB85      		ldd r26,Y+11
 1846 0c44 BC85      		ldd r27,Y+12
 1847 0c46 880D      		add r24,r8
 1848 0c48 991D      		adc r25,r9
 1849 0c4a AA1D      		adc r26,r10
 1850 0c4c BB1D      		adc r27,r11
 1851 0c4e 8093 0000 		sts fs_database,r24
 1852 0c52 9093 0000 		sts fs_database+1,r25
 1853 0c56 A093 0000 		sts fs_database+2,r26
 1854 0c5a B093 0000 		sts fs_database+3,r27
 192:fs.c          ****   if(fs_n_fatent < 0xFF7) goto abort_noFS; 
 1855               		.loc 1 192 0
 1856 0c5e 273F      		cpi r18,-9
 1857 0c60 9FE0      		ldi r25,15
 1858 0c62 3907      		cpc r19,r25
 1859 0c64 4105      		cpc r20,__zero_reg__
 1860 0c66 5105      		cpc r21,__zero_reg__
 1861 0c68 00F4      		brsh .+2
 1862 0c6a 00C0      		rjmp .L101
 195:fs.c          ****   if(fs_n_fatent < 0xFFF7) {
 1863               		.loc 1 195 0
 1864 0c6c 273F      		cpi r18,-9
 1865 0c6e 3F4F      		sbci r19,-1
 1866 0c70 4105      		cpc r20,__zero_reg__
 1867 0c72 5105      		cpc r21,__zero_reg__
 1868 0c74 00F4      		brsh .L106
 196:fs.c          ****     fs_dirbase = fs_fatbase + fsize; 
 1869               		.loc 1 196 0
 1870 0c76 8092 0000 		sts fs_dirbase,r8
 1871 0c7a 9092 0000 		sts fs_dirbase+1,r9
 1872 0c7e A092 0000 		sts fs_dirbase+2,r10
 1873 0c82 B092 0000 		sts fs_dirbase+3,r11
 197:fs.c          ****     fs_type = FS_FAT16;
 1874               		.loc 1 197 0
 1875 0c86 1092 0000 		sts fs_type,__zero_reg__
 1876 0c8a 00C0      		rjmp .L121
 1877               	.L106:
 202:fs.c          ****   fs_dirbase = LD_DWORD(buf + BPB_RootClus);
 1878               		.loc 1 202 0
 1879 0c8c 8091 0000 		lds r24,buf+44
 1880 0c90 9091 0000 		lds r25,buf+44+1
 1881 0c94 A091 0000 		lds r26,buf+44+2
 1882 0c98 B091 0000 		lds r27,buf+44+3
 1883 0c9c 8093 0000 		sts fs_dirbase,r24
 1884 0ca0 9093 0000 		sts fs_dirbase+1,r25
 1885 0ca4 A093 0000 		sts fs_dirbase+2,r26
 1886 0ca8 B093 0000 		sts fs_dirbase+3,r27
 205:fs.c          ****   if(LD_WORD(buf + BPB_RsvdSecCnt)>0) {
 1887               		.loc 1 205 0
 1888 0cac ED85      		ldd r30,Y+13
 1889 0cae FE85      		ldd r31,Y+14
 1890 0cb0 EF2B      		or r30,r31
 1891 0cb2 01F4      		brne .L107
 1892               	.L108:
 214:fs.c          ****   fs_type = FS_FAT32;
 1893               		.loc 1 214 0
 1894 0cb4 81E0      		ldi r24,lo8(1)
 1895 0cb6 8093 0000 		sts fs_type,r24
 1896               	.L121:
 216:fs.c          ****   return 0;
 1897               		.loc 1 216 0
 1898 0cba 80E0      		ldi r24,0
 1899 0cbc 00C0      		rjmp .L97
 1900               	.L107:
 206:fs.c          ****     bsect++;
 1901               		.loc 1 206 0
 1902 0cbe FFEF      		ldi r31,-1
 1903 0cc0 CF1A      		sub r12,r31
 1904 0cc2 DF0A      		sbc r13,r31
 1905 0cc4 EF0A      		sbc r14,r31
 1906 0cc6 FF0A      		sbc r15,r31
 1907               	.LVL76:
 207:fs.c          ****     if(sd_readBuf(bsect)) return 1;
 1908               		.loc 1 207 0
 1909 0cc8 C701      		movw r24,r14
 1910 0cca B601      		movw r22,r12
 1911 0ccc 0E94 0000 		call sd_readBuf
 1912               	.LVL77:
 1913 0cd0 8111      		cpse r24,__zero_reg__
 1914 0cd2 00C0      		rjmp .L98
 208:fs.c          ****     if(LD_DWORD(buf) == 0x41615252 && LD_DWORD(buf + 0x1E4) == 0x61417272 && LD_DWORD(buf + 0x1FC) 
 1915               		.loc 1 208 0
 1916 0cd4 8091 0000 		lds r24,buf
 1917 0cd8 9091 0000 		lds r25,buf+1
 1918 0cdc A091 0000 		lds r26,buf+2
 1919 0ce0 B091 0000 		lds r27,buf+3
 1920 0ce4 8235      		cpi r24,82
 1921 0ce6 9245      		sbci r25,82
 1922 0ce8 A146      		sbci r26,97
 1923 0cea B144      		sbci r27,65
 1924 0cec 01F4      		brne .L108
 208:fs.c          ****     if(LD_DWORD(buf) == 0x41615252 && LD_DWORD(buf + 0x1E4) == 0x61417272 && LD_DWORD(buf + 0x1FC) 
 1925               		.loc 1 208 0 is_stmt 0 discriminator 1
 1926 0cee 8091 0000 		lds r24,buf+484
 1927 0cf2 9091 0000 		lds r25,buf+484+1
 1928 0cf6 A091 0000 		lds r26,buf+484+2
 1929 0cfa B091 0000 		lds r27,buf+484+3
 1930 0cfe 8237      		cpi r24,114
 1931 0d00 9247      		sbci r25,114
 1932 0d02 A144      		sbci r26,65
 1933 0d04 B146      		sbci r27,97
 1934 0d06 01F4      		brne .L108
 1935 0d08 8091 0000 		lds r24,buf+508
 1936 0d0c 9091 0000 		lds r25,buf+508+1
 1937 0d10 A091 0000 		lds r26,buf+508+2
 1938 0d14 B091 0000 		lds r27,buf+508+3
 1939 0d18 0097      		sbiw r24,0
 1940 0d1a A545      		sbci r26,85
 1941 0d1c BA4A      		sbci r27,-86
 1942 0d1e 01F4      		brne .L108
 209:fs.c          ****       LD_DWORD(buf + 0x1E8) = 0xFFFFFFFF;
 1943               		.loc 1 209 0 is_stmt 1
 1944 0d20 8FEF      		ldi r24,lo8(-1)
 1945 0d22 9FEF      		ldi r25,lo8(-1)
 1946 0d24 DC01      		movw r26,r24
 1947 0d26 8093 0000 		sts buf+488,r24
 1948 0d2a 9093 0000 		sts buf+488+1,r25
 1949 0d2e A093 0000 		sts buf+488+2,r26
 1950 0d32 B093 0000 		sts buf+488+3,r27
 210:fs.c          ****       LD_DWORD(buf + 0x1EC) = 0xFFFFFFFF;
 1951               		.loc 1 210 0
 1952 0d36 8093 0000 		sts buf+492,r24
 1953 0d3a 9093 0000 		sts buf+492+1,r25
 1954 0d3e A093 0000 		sts buf+492+2,r26
 1955 0d42 B093 0000 		sts buf+492+3,r27
 211:fs.c          ****       if(sd_writeBuf(bsect)) return 1;
 1956               		.loc 1 211 0
 1957 0d46 C701      		movw r24,r14
 1958 0d48 B601      		movw r22,r12
 1959 0d4a 0E94 0000 		call sd_writeBuf
 1960               	.LVL78:
 1961 0d4e 8823      		tst r24
 1962 0d50 01F4      		brne .+2
 1963 0d52 00C0      		rjmp .L108
 1964 0d54 00C0      		rjmp .L98
 1965               	.LVL79:
 1966               	.L97:
 1967               	/* epilogue start */
 217:fs.c          **** }
 1968               		.loc 1 217 0
 1969 0d56 2E96      		adiw r28,14
 1970 0d58 0FB6      		in __tmp_reg__,__SREG__
 1971 0d5a F894      		cli
 1972 0d5c DEBF      		out __SP_H__,r29
 1973 0d5e 0FBE      		out __SREG__,__tmp_reg__
 1974 0d60 CDBF      		out __SP_L__,r28
 1975 0d62 DF91      		pop r29
 1976 0d64 CF91      		pop r28
 1977 0d66 1F91      		pop r17
 1978 0d68 FF90      		pop r15
 1979 0d6a EF90      		pop r14
 1980 0d6c DF90      		pop r13
 1981 0d6e CF90      		pop r12
 1982 0d70 BF90      		pop r11
 1983 0d72 AF90      		pop r10
 1984 0d74 9F90      		pop r9
 1985 0d76 8F90      		pop r8
 1986 0d78 7F90      		pop r7
 1987 0d7a 6F90      		pop r6
 1988 0d7c 5F90      		pop r5
 1989 0d7e 4F90      		pop r4
 1990 0d80 3F90      		pop r3
 1991 0d82 2F90      		pop r2
 1992 0d84 0895      		ret
 1993               		.cfi_endproc
 1994               	.LFE3:
 1996               	.global	fs_check
 1998               	fs_check:
 1999               	.LFB4:
 223:fs.c          **** uint8_t fs_check(void) {
 2000               		.loc 1 223 0
 2001               		.cfi_startproc
 2002               	/* prologue: function */
 2003               	/* frame size = 0 */
 2004               	/* stack size = 0 */
 2005               	.L__stack_usage = 0
 224:fs.c          ****   if(!sd_check()) return 0;
 2006               		.loc 1 224 0
 2007 0d86 0E94 0000 		call sd_check
 2008               	.LVL80:
 2009 0d8a 8111      		cpse r24,__zero_reg__
 225:fs.c          ****   return fs_init();
 2010               		.loc 1 225 0
 2011 0d8c 0C94 0000 		jmp fs_init
 2012               	.LVL81:
 2013               	.L123:
 226:fs.c          **** }
 2014               		.loc 1 226 0
 2015 0d90 80E0      		ldi r24,0
 2016 0d92 0895      		ret
 2017               		.cfi_endproc
 2018               	.LFE4:
 2020               	.global	fs_readdir_nocheck
 2022               	fs_readdir_nocheck:
 2023               	.LFB9:
 353:fs.c          **** uint8_t fs_readdir_nocheck(void) {
 2024               		.loc 1 353 0
 2025               		.cfi_startproc
 2026               	/* prologue: function */
 2027               	/* frame size = 0 */
 2028               	/* stack size = 0 */
 2029               	.L__stack_usage = 0
 2030               	.L125:
 354:fs.c          ****   while(!fs_readdirInt()) {
 2031               		.loc 1 354 0 discriminator 1
 2032 0d94 0E94 0000 		call fs_readdirInt
 2033               	.LVL82:
 2034 0d98 8111      		cpse r24,__zero_reg__
 2035 0d9a 00C0      		rjmp .L138
 355:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == 0) fs_file.entry_able = 0;
 2036               		.loc 1 355 0
 2037 0d9c 8091 0000 		lds r24,buf+480
 2038 0da0 8111      		cpse r24,__zero_reg__
 2039 0da2 00C0      		rjmp .L126
 355:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == 0) fs_file.entry_able = 0;
 2040               		.loc 1 355 0 is_stmt 0 discriminator 1
 2041 0da4 1092 0000 		sts fs_file+1,__zero_reg__
 2042               	.L126:
 356:fs.c          ****     if(fs_file.entry_able == 0) return 0;
 2043               		.loc 1 356 0 is_stmt 1
 2044 0da8 9091 0000 		lds r25,fs_file+1
 2045 0dac 9923      		tst r25
 2046 0dae 01F0      		breq .L131
 357:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == 0xE5) continue; /*  –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ 0x05 */
 2047               		.loc 1 357 0
 2048 0db0 853E      		cpi r24,lo8(-27)
 2049 0db2 01F0      		breq .L125
 358:fs.c          ****     if(FS_DIRENTRY[DIR_Name] == '.') continue;
 2050               		.loc 1 358 0
 2051 0db4 8E32      		cpi r24,lo8(46)
 2052 0db6 01F0      		breq .L125
 359:fs.c          ****     if((FS_DIRENTRY[DIR_Attr] & AM_VOL) == 0) return 0;
 2053               		.loc 1 359 0
 2054 0db8 8091 0000 		lds r24,buf+491
 2055 0dbc 83FD      		sbrc r24,3
 2056 0dbe 00C0      		rjmp .L125
 2057 0dc0 00C0      		rjmp .L131
 2058               	.L138:
 361:fs.c          ****   return 1;
 2059               		.loc 1 361 0
 2060 0dc2 81E0      		ldi r24,lo8(1)
 2061 0dc4 0895      		ret
 2062               	.L131:
 356:fs.c          ****     if(fs_file.entry_able == 0) return 0;
 2063               		.loc 1 356 0
 2064 0dc6 80E0      		ldi r24,0
 362:fs.c          **** }
 2065               		.loc 1 362 0
 2066 0dc8 0895      		ret
 2067               		.cfi_endproc
 2068               	.LFE9:
 2070               	.global	fs_readdir
 2072               	fs_readdir:
 2073               	.LFB10:
 364:fs.c          **** uint8_t fs_readdir() {
 2074               		.loc 1 364 0
 2075               		.cfi_startproc
 2076               	/* prologue: function */
 2077               	/* frame size = 0 */
 2078               	/* stack size = 0 */
 2079               	.L__stack_usage = 0
 367:fs.c          ****   if(fs_file.opened != OPENED_DIR) { lastError = ERR_NOT_OPENED; return 1; }
 2080               		.loc 1 367 0
 2081 0dca 8091 0000 		lds r24,fs_file
 2082 0dce 8230      		cpi r24,lo8(2)
 2083 0dd0 01F4      		brne .L143
 369:fs.c          ****   return fs_readdir_nocheck();
 2084               		.loc 1 369 0
 2085 0dd2 0C94 0000 		jmp fs_readdir_nocheck
 2086               	.LVL83:
 2087               	.L143:
 367:fs.c          ****   if(fs_file.opened != OPENED_DIR) { lastError = ERR_NOT_OPENED; return 1; }
 2088               		.loc 1 367 0 discriminator 1
 2089 0dd6 83E0      		ldi r24,lo8(3)
 2090 0dd8 8093 0000 		sts lastError,r24
 370:fs.c          **** }
 2091               		.loc 1 370 0 discriminator 1
 2092 0ddc 81E0      		ldi r24,lo8(1)
 2093 0dde 0895      		ret
 2094               		.cfi_endproc
 2095               	.LFE10:
 2097               	.global	fs_open0
 2099               	fs_open0:
 2100               	.LFB17:
 586:fs.c          **** uint8_t fs_open0(uint8_t what) {
 2101               		.loc 1 586 0
 2102               		.cfi_startproc
 2103               	.LVL84:
 2104 0de0 8F92      		push r8
 2105               	.LCFI59:
 2106               		.cfi_def_cfa_offset 3
 2107               		.cfi_offset 8, -2
 2108 0de2 9F92      		push r9
 2109               	.LCFI60:
 2110               		.cfi_def_cfa_offset 4
 2111               		.cfi_offset 9, -3
 2112 0de4 AF92      		push r10
 2113               	.LCFI61:
 2114               		.cfi_def_cfa_offset 5
 2115               		.cfi_offset 10, -4
 2116 0de6 BF92      		push r11
 2117               	.LCFI62:
 2118               		.cfi_def_cfa_offset 6
 2119               		.cfi_offset 11, -5
 2120 0de8 CF92      		push r12
 2121               	.LCFI63:
 2122               		.cfi_def_cfa_offset 7
 2123               		.cfi_offset 12, -6
 2124 0dea DF92      		push r13
 2125               	.LCFI64:
 2126               		.cfi_def_cfa_offset 8
 2127               		.cfi_offset 13, -7
 2128 0dec EF92      		push r14
 2129               	.LCFI65:
 2130               		.cfi_def_cfa_offset 9
 2131               		.cfi_offset 14, -8
 2132 0dee FF92      		push r15
 2133               	.LCFI66:
 2134               		.cfi_def_cfa_offset 10
 2135               		.cfi_offset 15, -9
 2136 0df0 0F93      		push r16
 2137               	.LCFI67:
 2138               		.cfi_def_cfa_offset 11
 2139               		.cfi_offset 16, -10
 2140 0df2 1F93      		push r17
 2141               	.LCFI68:
 2142               		.cfi_def_cfa_offset 12
 2143               		.cfi_offset 17, -11
 2144 0df4 CF93      		push r28
 2145               	.LCFI69:
 2146               		.cfi_def_cfa_offset 13
 2147               		.cfi_offset 28, -12
 2148 0df6 DF93      		push r29
 2149               	.LCFI70:
 2150               		.cfi_def_cfa_offset 14
 2151               		.cfi_offset 29, -13
 2152 0df8 CDB7      		in r28,__SP_L__
 2153 0dfa DEB7      		in r29,__SP_H__
 2154               	.LCFI71:
 2155               		.cfi_def_cfa_register 28
 2156 0dfc 2B97      		sbiw r28,11
 2157               	.LCFI72:
 2158               		.cfi_def_cfa_offset 25
 2159 0dfe 0FB6      		in __tmp_reg__,__SREG__
 2160 0e00 F894      		cli
 2161 0e02 DEBF      		out __SP_H__,r29
 2162 0e04 0FBE      		out __SREG__,__tmp_reg__
 2163 0e06 CDBF      		out __SP_L__,r28
 2164               	/* prologue: function */
 2165               	/* frame size = 11 */
 2166               	/* stack size = 23 */
 2167               	.L__stack_usage = 23
 592:fs.c          ****   if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; goto abort; }  
 2168               		.loc 1 592 0
 2169 0e08 9091 0000 		lds r25,fs_type
 2170 0e0c 9230      		cpi r25,lo8(2)
 2171 0e0e 01F4      		brne .L145
 592:fs.c          ****   if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; goto abort; }  
 2172               		.loc 1 592 0 is_stmt 0 discriminator 1
 2173 0e10 81E0      		ldi r24,lo8(1)
 2174               	.LVL85:
 2175 0e12 8093 0000 		sts lastError,r24
 2176 0e16 00C0      		rjmp .L241
 2177               	.LVL86:
 2178               	.L145:
 593:fs.c          ****   fs_file.opened = OPENED_NONE;
 2179               		.loc 1 593 0 is_stmt 1
 2180 0e18 1092 0000 		sts fs_file,__zero_reg__
 2181               	.LVL87:
 597:fs.c          ****   r = what & 0x80; what &= 0x7F;
 2182               		.loc 1 597 0
 2183 0e1c 282F      		mov r18,r24
 2184 0e1e 2F77      		andi r18,lo8(127)
 2185 0e20 B22E      		mov r11,r18
 2186               	.LVL88:
 598:fs.c          ****   fs_parent_dir_cluster = fs_file.entry_start_cluster;
 2187               		.loc 1 598 0
 2188 0e22 4091 0000 		lds r20,fs_file+12
 2189 0e26 5091 0000 		lds r21,fs_file+12+1
 2190 0e2a 6091 0000 		lds r22,fs_file+12+2
 2191 0e2e 7091 0000 		lds r23,fs_file+12+3
 2192 0e32 4093 0000 		sts fs_file+28,r20
 2193 0e36 5093 0000 		sts fs_file+28+1,r21
 2194 0e3a 6093 0000 		sts fs_file+28+2,r22
 2195 0e3e 7093 0000 		sts fs_file+28+3,r23
 601:fs.c          ****   fs_notrootdir = 0;
 2196               		.loc 1 601 0
 2197 0e42 1092 0000 		sts fs_file+20,__zero_reg__
 602:fs.c          ****   fs_file.entry_start_cluster = fs_dirbase;
 2198               		.loc 1 602 0
 2199 0e46 4091 0000 		lds r20,fs_dirbase
 2200 0e4a 5091 0000 		lds r21,fs_dirbase+1
 2201 0e4e 6091 0000 		lds r22,fs_dirbase+2
 2202 0e52 7091 0000 		lds r23,fs_dirbase+3
 603:fs.c          ****   if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             
 2203               		.loc 1 603 0
 2204 0e56 9923      		tst r25
 2205 0e58 01F0      		breq .L147
 602:fs.c          ****   fs_file.entry_start_cluster = fs_dirbase;
 2206               		.loc 1 602 0
 2207 0e5a 4093 0000 		sts fs_file+12,r20
 2208 0e5e 5093 0000 		sts fs_file+12+1,r21
 2209 0e62 6093 0000 		sts fs_file+12+2,r22
 2210 0e66 7093 0000 		sts fs_file+12+3,r23
 2211 0e6a 00C0      		rjmp .L148
 2212               	.L147:
 603:fs.c          ****   if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             
 2213               		.loc 1 603 0 discriminator 1
 2214 0e6c 1092 0000 		sts fs_file+12,__zero_reg__
 2215 0e70 1092 0000 		sts fs_file+12+1,__zero_reg__
 2216 0e74 1092 0000 		sts fs_file+12+2,__zero_reg__
 2217 0e78 1092 0000 		sts fs_file+12+3,__zero_reg__
 2218               	.L148:
 606:fs.c          ****   if(buf[0] == 0) {	
 2219               		.loc 1 606 0
 2220 0e7c 9091 0000 		lds r25,buf
 2221 0e80 9111      		cpse r25,__zero_reg__
 2222 0e82 00C0      		rjmp .L149
 607:fs.c          ****     if(what) goto abort_noPath;		
 2223               		.loc 1 607 0
 2224 0e84 B110      		cpse r11,__zero_reg__
 2225 0e86 00C0      		rjmp .L150
 608:fs.c          ****     FS_DIRENTRY[0] = 0;             /* –ü—Ä–∏–∑–Ω–∞–∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ */
 2226               		.loc 1 608 0
 2227 0e88 1092 0000 		sts buf+480,__zero_reg__
 609:fs.c          ****     FS_DIRENTRY[DIR_Attr] = AM_DIR; /* –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª/–ø
 2228               		.loc 1 609 0
 2229 0e8c 80E1      		ldi r24,lo8(16)
 2230               	.LVL89:
 2231 0e8e 8093 0000 		sts buf+491,r24
 2232 0e92 00C0      		rjmp .L151
 2233               	.LVL90:
 2234               	.L149:
 606:fs.c          ****   if(buf[0] == 0) {	
 2235               		.loc 1 606 0
 2236 0e94 00E0      		ldi r16,lo8(buf)
 2237 0e96 10E0      		ldi r17,hi8(buf)
 597:fs.c          ****   r = what & 0x80; what &= 0x7F;
 2238               		.loc 1 597 0
 2239 0e98 8078      		andi r24,lo8(-128)
 2240               	.LVL91:
 2241 0e9a A82E      		mov r10,r24
 642:fs.c          ****       fs_notrootdir = 1;
 2242               		.loc 1 642 0
 2243 0e9c 9924      		clr r9
 2244 0e9e 9394      		inc r9
 2245               	.L183:
 2246               	.LVL92:
 2247               	.LBB52:
 2248               	.LBB53:
 682:fs.c          ****   memset(FS_DIRFIND, ' ', 11);    
 2249               		.loc 1 682 0
 2250 0ea0 4BE0      		ldi r20,lo8(11)
 2251 0ea2 50E0      		ldi r21,0
 2252 0ea4 60E2      		ldi r22,lo8(32)
 2253 0ea6 70E0      		ldi r23,0
 2254 0ea8 80E0      		ldi r24,lo8(buf+469)
 2255 0eaa 90E0      		ldi r25,hi8(buf+469)
 2256 0eac 0E94 0000 		call memset
 2257               	.LVL93:
 2258 0eb0 F801      		movw r30,r16
 683:fs.c          ****   i = 0; ni = 8;
 2259               		.loc 1 683 0
 2260 0eb2 70E0      		ldi r23,0
 2261 0eb4 A8E0      		ldi r26,lo8(8)
 2262               	.LVL94:
 2263               	.L152:
 2264 0eb6 9F01      		movw r18,r30
 2265 0eb8 2F5F      		subi r18,-1
 2266 0eba 3F4F      		sbci r19,-1
 2267 0ebc 8901      		movw r16,r18
 2268               	.LVL95:
 685:fs.c          ****     c = *p++;
 2269               		.loc 1 685 0
 2270 0ebe 6081      		ld r22,Z
 2271               	.LVL96:
 686:fs.c          ****     if(c == 0) {
 2272               		.loc 1 686 0
 2273 0ec0 6111      		cpse r22,__zero_reg__
 2274 0ec2 00C0      		rjmp .L153
 687:fs.c          ****       if(i == 0) break; /* –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ */
 2275               		.loc 1 687 0
 2276 0ec4 91E0      		ldi r25,lo8(1)
 2277 0ec6 80E0      		ldi r24,0
 2278 0ec8 7111      		cpse r23,__zero_reg__
 2279 0eca 90E0      		ldi r25,0
 2280               	.L154:
 688:fs.c          ****       return 0;
 2281               		.loc 1 688 0
 2282 0ecc 092F      		mov r16,r25
 2283               	.LVL97:
 2284 0ece 182F      		mov r17,r24
 2285 0ed0 00C0      		rjmp .L155
 2286               	.LVL98:
 2287               	.L153:
 690:fs.c          ****     if(c == '/') return p;
 2288               		.loc 1 690 0
 2289 0ed2 6F32      		cpi r22,lo8(47)
 2290 0ed4 01F0      		breq .L155
 691:fs.c          ****     if(c == '.') {
 2291               		.loc 1 691 0
 2292 0ed6 6E32      		cpi r22,lo8(46)
 2293 0ed8 01F4      		brne .L156
 692:fs.c          ****       if(i == 0) break; /* –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ */
 2294               		.loc 1 692 0
 2295 0eda 7723      		tst r23
 2296 0edc 01F4      		brne .+2
 2297 0ede 00C0      		rjmp .L150
 694:fs.c          ****       if(ni != 8) break; /* –í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞ */
 2298               		.loc 1 694 0
 2299 0ee0 A830      		cpi r26,lo8(8)
 2300 0ee2 01F0      		breq .+2
 2301 0ee4 00C0      		rjmp .L150
 696:fs.c          ****       i = 8; ni = 11;
 2302               		.loc 1 696 0
 2303 0ee6 78E0      		ldi r23,lo8(8)
 2304               	.LVL99:
 2305 0ee8 ABE0      		ldi r26,lo8(11)
 2306               	.LVL100:
 2307               	.L157:
 2308 0eea F901      		movw r30,r18
 2309 0eec 00C0      		rjmp .L152
 2310               	.LVL101:
 2311               	.L156:
 700:fs.c          ****     if(i == ni) break;
 2312               		.loc 1 700 0
 2313 0eee 7A17      		cp r23,r26
 2314 0ef0 01F4      		brne .+2
 2315 0ef2 00C0      		rjmp .L150
 2316 0ef4 80E0      		ldi r24,lo8(__c.1955)
 2317 0ef6 90E0      		ldi r25,hi8(__c.1955)
 2318               	.L158:
 2319               	.LVL102:
 2320               	.LBB54:
 2321               	.LBB55:
 2322               	.LBB56:
 671:fs.c          ****   while (pgm_read_byte(str) != 0x00) {
 2323               		.loc 1 671 0
 2324 0ef8 AC01      		movw r20,r24
 2325               	.LVL103:
 2326 0efa FC01      		movw r30,r24
 2327               	/* #APP */
 2328               	 ;  671 "fs.c" 1
 2329 0efc B491      		lpm r27, Z
 2330               		
 2331               	 ;  0 "" 2
 2332               	.LVL104:
 2333               	/* #NOAPP */
 2334               	.LBE56:
 2335 0efe BB23      		tst r27
 2336 0f00 01F4      		brne .+2
 2337 0f02 00C0      		rjmp .L245
 2338               	.LBB57:
 2339               	.LBB58:
 672:fs.c          ****     uint8_t x = pgm_read_byte(str++);
 2340               		.loc 1 672 0
 2341 0f04 0196      		adiw r24,1
 2342               	.LVL105:
 2343 0f06 FA01      		movw r30,r20
 2344               	/* #APP */
 2345               	 ;  672 "fs.c" 1
 2346 0f08 4491      		lpm r20, Z
 2347               		
 2348               	 ;  0 "" 2
 2349               	.LVL106:
 2350               	/* #NOAPP */
 2351               	.LBE58:
 673:fs.c          ****     if (x == c) 
 2352               		.loc 1 673 0
 2353 0f0a 4613      		cpse r20,r22
 2354 0f0c 00C0      		rjmp .L158
 2355 0f0e 00C0      		rjmp .L150
 2356               	.LVL107:
 2357               	.L155:
 2358               	.LBE57:
 2359               	.LBE55:
 2360               	.LBE54:
 2361               	.LBE53:
 2362               	.LBE52:
 615:fs.c          ****       if(path == (CONST uint8_t*)1) goto abort_noPath;      	
 2363               		.loc 1 615 0
 2364 0f10 0130      		cpi r16,1
 2365 0f12 1105      		cpc r17,__zero_reg__
 2366 0f14 01F4      		brne .+2
 2367 0f16 00C0      		rjmp .L150
 617:fs.c          ****       fs_file.entry_able = 0;
 2368               		.loc 1 617 0
 2369 0f18 1092 0000 		sts fs_file+1,__zero_reg__
 2370               	.LVL108:
 2371               	.L163:
 619:fs.c          ****         if(fs_readdir_nocheck()) return 1;    
 2372               		.loc 1 619 0
 2373 0f1c 0E94 0000 		call fs_readdir_nocheck
 2374               	.LVL109:
 2375 0f20 8111      		cpse r24,__zero_reg__
 2376 0f22 00C0      		rjmp .L187
 620:fs.c          ****         if(fs_file.entry_able == 0) break;
 2377               		.loc 1 620 0
 2378 0f24 F090 0000 		lds r15,fs_file+1
 2379 0f28 FF20      		tst r15
 2380 0f2a 01F0      		breq .L162
 621:fs.c          ****         if(!memcmp(FS_DIRENTRY, FS_DIRFIND, 11)) break;
 2381               		.loc 1 621 0
 2382 0f2c 4BE0      		ldi r20,lo8(11)
 2383 0f2e 50E0      		ldi r21,0
 2384 0f30 60E0      		ldi r22,lo8(buf+469)
 2385 0f32 70E0      		ldi r23,hi8(buf+469)
 2386 0f34 80E0      		ldi r24,lo8(buf+480)
 2387 0f36 90E0      		ldi r25,hi8(buf+480)
 2388 0f38 0E94 0000 		call memcmp
 2389               	.LVL110:
 2390 0f3c 892B      		or r24,r25
 2391 0f3e 01F4      		brne .L163
 2392               	.L162:
 624:fs.c          ****       if(what && path == 0) {                        
 2393               		.loc 1 624 0
 2394 0f40 BB20      		tst r11
 2395 0f42 01F4      		brne .+2
 2396 0f44 00C0      		rjmp .L164
 624:fs.c          ****       if(what && path == 0) {                        
 2397               		.loc 1 624 0 is_stmt 0 discriminator 1
 2398 0f46 0115      		cp r16,__zero_reg__
 2399 0f48 1105      		cpc r17,__zero_reg__
 2400 0f4a 01F0      		breq .+2
 2401 0f4c 00C0      		rjmp .L164
 625:fs.c          ****         fs_parent_dir_cluster = fs_file.entry_start_cluster; /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —ç—Ç–æ–π –ø–µ
 2402               		.loc 1 625 0 is_stmt 1
 2403 0f4e 8091 0000 		lds r24,fs_file+12
 2404 0f52 9091 0000 		lds r25,fs_file+12+1
 2405 0f56 A091 0000 		lds r26,fs_file+12+2
 2406 0f5a B091 0000 		lds r27,fs_file+12+3
 2407 0f5e 8093 0000 		sts fs_file+28,r24
 2408 0f62 9093 0000 		sts fs_file+28+1,r25
 2409 0f66 A093 0000 		sts fs_file+28+2,r26
 2410 0f6a B093 0000 		sts fs_file+28+3,r27
 626:fs.c          ****         if(fs_type == FS_FAT32 && fs_parent_dir_cluster == fs_dirbase) fs_parent_dir_cluster = 0; 
 2411               		.loc 1 626 0
 2412 0f6e 2091 0000 		lds r18,fs_type
 2413 0f72 2130      		cpi r18,lo8(1)
 2414 0f74 01F4      		brne .L165
 626:fs.c          ****         if(fs_type == FS_FAT32 && fs_parent_dir_cluster == fs_dirbase) fs_parent_dir_cluster = 0; 
 2415               		.loc 1 626 0 is_stmt 0 discriminator 1
 2416 0f76 4091 0000 		lds r20,fs_dirbase
 2417 0f7a 5091 0000 		lds r21,fs_dirbase+1
 2418 0f7e 6091 0000 		lds r22,fs_dirbase+2
 2419 0f82 7091 0000 		lds r23,fs_dirbase+3
 2420 0f86 8417      		cp r24,r20
 2421 0f88 9507      		cpc r25,r21
 2422 0f8a A607      		cpc r26,r22
 2423 0f8c B707      		cpc r27,r23
 2424 0f8e 01F4      		brne .L165
 2425 0f90 1092 0000 		sts fs_file+28,__zero_reg__
 2426 0f94 1092 0000 		sts fs_file+28+1,__zero_reg__
 2427 0f98 1092 0000 		sts fs_file+28+2,__zero_reg__
 2428 0f9c 1092 0000 		sts fs_file+28+3,__zero_reg__
 2429               	.L165:
 627:fs.c          ****         if(fs_file.entry_able == 0) return fs_open0_create(what-1); /* –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º */
 2430               		.loc 1 627 0 is_stmt 1
 2431 0fa0 F110      		cpse r15,__zero_reg__
 2432 0fa2 00C0      		rjmp .L166
 627:fs.c          ****         if(fs_file.entry_able == 0) return fs_open0_create(what-1); /* –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º */
 2433               		.loc 1 627 0 is_stmt 0 discriminator 1
 2434 0fa4 BA94      		dec r11
 2435               	.LVL111:
 2436               	.LBB61:
 2437               	.LBB62:
 722:fs.c          ****   memcpy(new_name, FS_DIRFIND, 11); 
 2438               		.loc 1 722 0 is_stmt 1 discriminator 1
 2439 0fa6 8BE0      		ldi r24,lo8(11)
 2440 0fa8 E0E0      		ldi r30,lo8(buf+469)
 2441 0faa F0E0      		ldi r31,hi8(buf+469)
 2442 0fac DE01      		movw r26,r28
 2443 0fae 1196      		adiw r26,1
 2444               		0:
 2445 0fb0 0190      		ld r0,Z+
 2446 0fb2 0D92      		st X+,r0
 2447 0fb4 8A95      		dec r24
 2448 0fb6 01F4      		brne 0b
 725:fs.c          ****   if(dir) {
 2449               		.loc 1 725 0 discriminator 1
 2450 0fb8 BB20      		tst r11
 2451 0fba 01F0      		breq .L188
 726:fs.c          ****     if(fs_allocCluster(ALLOCCLUSTER)) goto abort; /* fs_file.entry_start_cluster –∏–∑–º–µ–Ω–µ–Ω –Ω–
 2452               		.loc 1 726 0
 2453 0fbc 80E0      		ldi r24,0
 2454 0fbe 0E94 0000 		call fs_allocCluster
 2455               	.LVL112:
 2456 0fc2 8111      		cpse r24,__zero_reg__
 2457 0fc4 00C0      		rjmp .L187
 727:fs.c          ****     allocatedCluster = fs_tmp;
 2458               		.loc 1 727 0
 2459 0fc6 C090 0000 		lds r12,fs_tmp
 2460 0fca D090 0000 		lds r13,fs_tmp+1
 2461 0fce E090 0000 		lds r14,fs_tmp+2
 2462 0fd2 F090 0000 		lds r15,fs_tmp+3
 2463               	.LVL113:
 2464 0fd6 00C0      		rjmp .L173
 2465               	.LVL114:
 2466               	.L188:
 718:fs.c          ****   unsigned long allocatedCluster = 0;
 2467               		.loc 1 718 0
 2468 0fd8 C12C      		mov r12,__zero_reg__
 2469 0fda D12C      		mov r13,__zero_reg__
 2470 0fdc 7601      		movw r14,r12
 2471               	.LVL115:
 2472               	.L173:
 2473               	.LBB63:
 2474               	.LBB64:
 517:fs.c          ****     if(fs_readdirInt()) return 0;
 2475               		.loc 1 517 0
 2476 0fde 0E94 0000 		call fs_readdirInt
 2477               	.LVL116:
 2478 0fe2 8111      		cpse r24,__zero_reg__
 2479 0fe4 00C0      		rjmp .L186
 520:fs.c          ****     if(!fs_file.entry_able) break;
 2480               		.loc 1 520 0
 2481 0fe6 8091 0000 		lds r24,fs_file+1
 2482 0fea 8823      		tst r24
 2483 0fec 01F0      		breq .L171
 523:fs.c          ****     if(FS_DIRENTRY[0] == 0xE5 || FS_DIRENTRY[0] == 0) { /* –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ 0x05 */
 2484               		.loc 1 523 0
 2485 0fee 8091 0000 		lds r24,buf+480
 2486 0ff2 853E      		cpi r24,lo8(-27)
 2487 0ff4 01F0      		breq .L172
 2488 0ff6 8111      		cpse r24,__zero_reg__
 2489 0ff8 00C0      		rjmp .L173
 2490               	.L172:
 526:fs.c          ****       if(sd_readBuf(fs_file.entry_sector)) return 0; 
 2491               		.loc 1 526 0
 2492 0ffa 6091 0000 		lds r22,fs_file+8
 2493 0ffe 7091 0000 		lds r23,fs_file+8+1
 2494 1002 8091 0000 		lds r24,fs_file+8+2
 2495 1006 9091 0000 		lds r25,fs_file+8+3
 2496 100a 0E94 0000 		call sd_readBuf
 2497               	.LVL117:
 2498 100e 8111      		cpse r24,__zero_reg__
 2499 1010 00C0      		rjmp .L186
 529:fs.c          ****       return buf + (fs_file.entry_index % 16) * 32;
 2500               		.loc 1 529 0
 2501 1012 4091 0000 		lds r20,fs_file+2
 2502 1016 5091 0000 		lds r21,fs_file+2+1
 2503 101a 4F70      		andi r20,15
 2504 101c 5527      		clr r21
 2505 101e 65E0      		ldi r22,5
 2506               		1:
 2507 1020 440F      		lsl r20
 2508 1022 551F      		rol r21
 2509 1024 6A95      		dec r22
 2510 1026 01F4      		brne 1b
 2511 1028 4050      		subi r20,lo8(-(buf))
 2512 102a 5040      		sbci r21,hi8(-(buf))
 2513 102c 00C0      		rjmp .L174
 2514               	.L171:
 535:fs.c          ****   if(fs_file.entry_index == 0) { lastError = ERR_DIR_FULL; return 0; }
 2515               		.loc 1 535 0
 2516 102e 8091 0000 		lds r24,fs_file+2
 2517 1032 9091 0000 		lds r25,fs_file+2+1
 2518 1036 892B      		or r24,r25
 2519 1038 01F4      		brne .L175
 2520 103a 85E0      		ldi r24,lo8(5)
 2521 103c 8093 0000 		sts lastError,r24
 2522 1040 00C0      		rjmp .L186
 2523               	.L175:
 538:fs.c          ****   if(fs_allocCluster(ALLOCCLUSTER)) return 0;
 2524               		.loc 1 538 0
 2525 1042 80E0      		ldi r24,0
 2526 1044 0E94 0000 		call fs_allocCluster
 2527               	.LVL118:
 2528 1048 8111      		cpse r24,__zero_reg__
 2529 104a 00C0      		rjmp .L186
 541:fs.c          ****   if(fs_setNextCluster(fs_file.entry_cluster)) return 0; /* fs_tmp —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —Ç–∞–∫ –∫–
 2530               		.loc 1 541 0
 2531 104c 6091 0000 		lds r22,fs_file+4
 2532 1050 7091 0000 		lds r23,fs_file+4+1
 2533 1054 8091 0000 		lds r24,fs_file+4+2
 2534 1058 9091 0000 		lds r25,fs_file+4+3
 2535 105c 0E94 0000 		call fs_setNextCluster
 2536               	.LVL119:
 2537 1060 8111      		cpse r24,__zero_reg__
 2538 1062 00C0      		rjmp .L186
 544:fs.c          ****   fs_file.entry_cluster = fs_tmp;
 2539               		.loc 1 544 0
 2540 1064 8091 0000 		lds r24,fs_tmp
 2541 1068 9091 0000 		lds r25,fs_tmp+1
 2542 106c A091 0000 		lds r26,fs_tmp+2
 2543 1070 B091 0000 		lds r27,fs_tmp+3
 2544 1074 8093 0000 		sts fs_file+4,r24
 2545 1078 9093 0000 		sts fs_file+4+1,r25
 2546 107c A093 0000 		sts fs_file+4+2,r26
 2547 1080 B093 0000 		sts fs_file+4+3,r27
 545:fs.c          ****   fs_clust2sect();   
 2548               		.loc 1 545 0
 2549 1084 0E94 0000 		call fs_clust2sect
 2550               	.LVL120:
 546:fs.c          ****   fs_file.entry_sector  = fs_tmp;
 2551               		.loc 1 546 0
 2552 1088 8091 0000 		lds r24,fs_tmp
 2553 108c 9091 0000 		lds r25,fs_tmp+1
 2554 1090 A091 0000 		lds r26,fs_tmp+2
 2555 1094 B091 0000 		lds r27,fs_tmp+3
 2556 1098 8093 0000 		sts fs_file+8,r24
 2557 109c 9093 0000 		sts fs_file+8+1,r25
 2558 10a0 A093 0000 		sts fs_file+8+2,r26
 2559 10a4 B093 0000 		sts fs_file+8+3,r27
 549:fs.c          ****   fs_eraseCluster(0);
 2560               		.loc 1 549 0
 2561 10a8 80E0      		ldi r24,0
 2562 10aa 0E94 0000 		call fs_eraseCluster
 2563               	.LVL121:
 552:fs.c          ****   return buf;
 2564               		.loc 1 552 0
 2565 10ae 40E0      		ldi r20,lo8(buf)
 2566 10b0 50E0      		ldi r21,hi8(buf)
 2567               	.L174:
 2568               	.LBE64:
 2569               	.LBE63:
 732:fs.c          ****   if(allocatedEntry == 0) {       
 2570               		.loc 1 732 0
 2571 10b2 4115      		cp r20,__zero_reg__
 2572 10b4 5105      		cpc r21,__zero_reg__
 2573 10b6 01F4      		brne .L177
 2574               	.L186:
 735:fs.c          ****     fs_tmp = FREE_CLUSTER; 
 2575               		.loc 1 735 0
 2576 10b8 1092 0000 		sts fs_tmp,__zero_reg__
 2577 10bc 1092 0000 		sts fs_tmp+1,__zero_reg__
 2578 10c0 1092 0000 		sts fs_tmp+2,__zero_reg__
 2579 10c4 1092 0000 		sts fs_tmp+3,__zero_reg__
 736:fs.c          ****     fs_setNextCluster(allocatedCluster);
 2580               		.loc 1 736 0
 2581 10c8 C701      		movw r24,r14
 2582 10ca B601      		movw r22,r12
 2583 10cc 0E94 0000 		call fs_setNextCluster
 2584               	.LVL122:
 2585 10d0 00C0      		rjmp .L187
 2586               	.L177:
 741:fs.c          ****   memset(allocatedEntry, 0, 32);
 2587               		.loc 1 741 0
 2588 10d2 20E2      		ldi r18,lo8(32)
 2589 10d4 FA01      		movw r30,r20
 2590               		0:
 2591 10d6 1192      		st Z+,__zero_reg__
 2592 10d8 2A95      		dec r18
 2593 10da 01F4      		brne 0b
 742:fs.c          ****   memcpy(allocatedEntry, new_name, 11);        
 2594               		.loc 1 742 0
 2595 10dc 2BE0      		ldi r18,lo8(11)
 2596 10de FE01      		movw r30,r28
 2597 10e0 3196      		adiw r30,1
 2598 10e2 DA01      		movw r26,r20
 2599               		0:
 2600 10e4 0190      		ld r0,Z+
 2601 10e6 0D92      		st X+,r0
 2602 10e8 2A95      		dec r18
 2603 10ea 01F4      		brne 0b
 2604 10ec 6091 0000 		lds r22,fs_file+8
 2605 10f0 7091 0000 		lds r23,fs_file+8+1
 2606 10f4 8091 0000 		lds r24,fs_file+8+2
 2607 10f8 9091 0000 		lds r25,fs_file+8+3
 744:fs.c          ****   if(!dir) {    
 2608               		.loc 1 744 0
 2609 10fc B110      		cpse r11,__zero_reg__
 2610 10fe 00C0      		rjmp .L178
 746:fs.c          ****     if(sd_writeBuf(fs_file.entry_sector)) goto abort;
 2611               		.loc 1 746 0
 2612 1100 0E94 0000 		call sd_writeBuf
 2613               	.LVL123:
 2614 1104 8111      		cpse r24,__zero_reg__
 2615 1106 00C0      		rjmp .L187
 748:fs.c          ****     fs_file.entry_start_cluster = 0; 
 2616               		.loc 1 748 0
 2617 1108 1092 0000 		sts fs_file+12,__zero_reg__
 2618 110c 1092 0000 		sts fs_file+12+1,__zero_reg__
 2619 1110 1092 0000 		sts fs_file+12+2,__zero_reg__
 2620 1114 1092 0000 		sts fs_file+12+3,__zero_reg__
 749:fs.c          ****     fs_file.size           = 0;
 2621               		.loc 1 749 0
 2622 1118 1092 0000 		sts fs_file+20,__zero_reg__
 2623 111c 1092 0000 		sts fs_file+20+1,__zero_reg__
 2624 1120 1092 0000 		sts fs_file+20+2,__zero_reg__
 2625 1124 1092 0000 		sts fs_file+20+3,__zero_reg__
 750:fs.c          ****     fs_file.ptr            = 0;
 2626               		.loc 1 750 0
 2627 1128 1092 0000 		sts fs_file+16,__zero_reg__
 2628 112c 1092 0000 		sts fs_file+16+1,__zero_reg__
 2629 1130 1092 0000 		sts fs_file+16+2,__zero_reg__
 2630 1134 1092 0000 		sts fs_file+16+3,__zero_reg__
 752:fs.c          ****     fs_file.opened              = OPENED_FILE;
 2631               		.loc 1 752 0
 2632 1138 81E0      		ldi r24,lo8(1)
 2633 113a 8093 0000 		sts fs_file,r24
 2634 113e 00C0      		rjmp .L192
 2635               	.L178:
 758:fs.c          ****   allocatedEntry[DIR_Attr] = AM_DIR;
 2636               		.loc 1 758 0
 2637 1140 10E1      		ldi r17,lo8(16)
 2638 1142 FA01      		movw r30,r20
 2639 1144 1387      		std Z+11,r17
 2640               	.LVL124:
 2641               	.LBB65:
 2642               	.LBB66:
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 2643               		.loc 1 492 0
 2644 1146 D38E      		std Z+27,r13
 2645 1148 C28E      		std Z+26,r12
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 2646               		.loc 1 493 0
 2647 114a 4701      		movw r8,r14
 2648 114c AA24      		clr r10
 2649 114e BB24      		clr r11
 2650 1150 958A      		std Z+21,r9
 2651 1152 848A      		std Z+20,r8
 2652               	.LBE66:
 2653               	.LBE65:
 762:fs.c          ****   if(sd_writeBuf(fs_file.entry_sector)) goto abort;
 2654               		.loc 1 762 0
 2655 1154 0E94 0000 		call sd_writeBuf
 2656               	.LVL125:
 2657 1158 8111      		cpse r24,__zero_reg__
 2658 115a 00C0      		rjmp .L187
 765:fs.c          ****   fs_tmp = allocatedCluster;
 2659               		.loc 1 765 0
 2660 115c C092 0000 		sts fs_tmp,r12
 2661 1160 D092 0000 		sts fs_tmp+1,r13
 2662 1164 E092 0000 		sts fs_tmp+2,r14
 2663 1168 F092 0000 		sts fs_tmp+3,r15
 766:fs.c          ****   fs_clust2sect();
 2664               		.loc 1 766 0
 2665 116c 0E94 0000 		call fs_clust2sect
 2666               	.LVL126:
 769:fs.c          ****   fs_eraseCluster(1); 
 2667               		.loc 1 769 0
 2668 1170 81E0      		ldi r24,lo8(1)
 2669 1172 0E94 0000 		call fs_eraseCluster
 2670               	.LVL127:
 772:fs.c          ****   memset(buf, ' ', 11); buf[0] = '.'; buf[11] = 0x10;
 2671               		.loc 1 772 0
 2672 1176 4BE0      		ldi r20,lo8(11)
 2673 1178 50E0      		ldi r21,0
 2674 117a 60E2      		ldi r22,lo8(32)
 2675 117c 70E0      		ldi r23,0
 2676 117e 80E0      		ldi r24,lo8(buf)
 2677 1180 90E0      		ldi r25,hi8(buf)
 2678 1182 0E94 0000 		call memset
 2679               	.LVL128:
 2680 1186 0EE2      		ldi r16,lo8(46)
 2681 1188 0093 0000 		sts buf,r16
 2682 118c 1093 0000 		sts buf+11,r17
 2683               	.LVL129:
 2684               	.LBB67:
 2685               	.LBB68:
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 2686               		.loc 1 492 0
 2687 1190 D092 0000 		sts buf+26+1,r13
 2688 1194 C092 0000 		sts buf+26,r12
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 2689               		.loc 1 493 0
 2690 1198 9092 0000 		sts buf+20+1,r9
 2691 119c 8092 0000 		sts buf+20,r8
 2692               	.LBE68:
 2693               	.LBE67:
 775:fs.c          ****   memset(buf+32, ' ', 11); buf[32] = '.'; buf[33] = '.'; buf[32+11] = 0x10;
 2694               		.loc 1 775 0
 2695 11a0 4BE0      		ldi r20,lo8(11)
 2696 11a2 50E0      		ldi r21,0
 2697 11a4 60E2      		ldi r22,lo8(32)
 2698 11a6 70E0      		ldi r23,0
 2699 11a8 80E0      		ldi r24,lo8(buf+32)
 2700 11aa 90E0      		ldi r25,hi8(buf+32)
 2701 11ac 0E94 0000 		call memset
 2702               	.LVL130:
 2703 11b0 0093 0000 		sts buf+32,r16
 2704 11b4 0093 0000 		sts buf+33,r16
 2705 11b8 1093 0000 		sts buf+43,r17
 776:fs.c          ****   if(fs_notrootdir) fs_setEntryCluster(buf + 32, fs_file.entry_start_cluster); /* –°–µ–π—á–∞—Å –≤ f
 2706               		.loc 1 776 0
 2707 11bc 8091 0000 		lds r24,fs_file+20
 2708 11c0 8823      		tst r24
 2709 11c2 01F0      		breq .L180
 2710 11c4 8091 0000 		lds r24,fs_file+12
 2711 11c8 9091 0000 		lds r25,fs_file+12+1
 2712 11cc A091 0000 		lds r26,fs_file+12+2
 2713 11d0 B091 0000 		lds r27,fs_file+12+3
 2714               	.LVL131:
 2715               	.LBB69:
 2716               	.LBB70:
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 2717               		.loc 1 492 0
 2718 11d4 9093 0000 		sts buf+58+1,r25
 2719 11d8 8093 0000 		sts buf+58,r24
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 2720               		.loc 1 493 0
 2721 11dc B093 0000 		sts buf+52+1,r27
 2722 11e0 A093 0000 		sts buf+52,r26
 2723               	.LVL132:
 2724               	.L180:
 2725               	.LBE70:
 2726               	.LBE69:
 779:fs.c          ****   return sd_writeBuf(fs_tmp);      
 2727               		.loc 1 779 0
 2728 11e4 6091 0000 		lds r22,fs_tmp
 2729 11e8 7091 0000 		lds r23,fs_tmp+1
 2730 11ec 8091 0000 		lds r24,fs_tmp+2
 2731 11f0 9091 0000 		lds r25,fs_tmp+3
 2732               	/* epilogue start */
 2733               	.LBE62:
 2734               	.LBE61:
 668:fs.c          **** }
 2735               		.loc 1 668 0
 2736 11f4 2B96      		adiw r28,11
 2737 11f6 0FB6      		in __tmp_reg__,__SREG__
 2738 11f8 F894      		cli
 2739 11fa DEBF      		out __SP_H__,r29
 2740 11fc 0FBE      		out __SREG__,__tmp_reg__
 2741 11fe CDBF      		out __SP_L__,r28
 2742 1200 DF91      		pop r29
 2743 1202 CF91      		pop r28
 2744 1204 1F91      		pop r17
 2745 1206 0F91      		pop r16
 2746 1208 FF90      		pop r15
 2747 120a EF90      		pop r14
 2748 120c DF90      		pop r13
 2749 120e CF90      		pop r12
 2750 1210 BF90      		pop r11
 2751               	.LVL133:
 2752 1212 AF90      		pop r10
 2753 1214 9F90      		pop r9
 2754 1216 8F90      		pop r8
 2755               	.LBB72:
 2756               	.LBB71:
 779:fs.c          ****   return sd_writeBuf(fs_tmp);      
 2757               		.loc 1 779 0
 2758 1218 0C94 0000 		jmp sd_writeBuf
 2759               	.LVL134:
 2760               	.L166:
 2761               	.LBE71:
 2762               	.LBE72:
 628:fs.c          ****         lastError = ERR_FILE_EXISTS; goto abort; 
 2763               		.loc 1 628 0
 2764 121c 88E0      		ldi r24,lo8(8)
 2765 121e 00C0      		rjmp .L244
 2766               	.L164:
 631:fs.c          ****       if(fs_file.entry_able == 0) goto abort_noPath;
 2767               		.loc 1 631 0
 2768 1220 FF20      		tst r15
 2769 1222 01F4      		brne .+2
 2770 1224 00C0      		rjmp .L150
 2771               	.LBB73:
 2772               	.LBB74:
 234:fs.c          ****   unsigned long c = LD_WORD(FS_DIRENTRY + DIR_FstClusLO);
 2773               		.loc 1 234 0
 2774 1226 4091 0000 		lds r20,buf+506
 2775 122a 5091 0000 		lds r21,buf+506+1
 2776 122e 60E0      		ldi r22,0
 2777 1230 70E0      		ldi r23,0
 2778               	.LVL135:
 235:fs.c          ****   if(fs_type != FS_FAT16) c |= ((unsigned long)LD_WORD(FS_DIRENTRY + DIR_FstClusHI)) << 16;  
 2779               		.loc 1 235 0
 2780 1232 8091 0000 		lds r24,fs_type
 2781 1236 8823      		tst r24
 2782 1238 01F0      		breq .L181
 2783 123a 8091 0000 		lds r24,buf+500
 2784 123e 9091 0000 		lds r25,buf+500+1
 2785 1242 A0E0      		ldi r26,0
 2786 1244 B0E0      		ldi r27,0
 2787 1246 DC01      		movw r26,r24
 2788 1248 9927      		clr r25
 2789 124a 8827      		clr r24
 2790 124c 482B      		or r20,r24
 2791 124e 592B      		or r21,r25
 2792 1250 6A2B      		or r22,r26
 2793 1252 7B2B      		or r23,r27
 2794               	.LVL136:
 2795               	.L181:
 2796               	.LBE74:
 2797               	.LBE73:
 634:fs.c          ****       fs_file.entry_start_cluster = fs_getEntryCluster();
 2798               		.loc 1 634 0
 2799 1254 4093 0000 		sts fs_file+12,r20
 2800 1258 5093 0000 		sts fs_file+12+1,r21
 2801 125c 6093 0000 		sts fs_file+12+2,r22
 2802 1260 7093 0000 		sts fs_file+12+3,r23
 636:fs.c          ****       if(path == 0) break;                      
 2803               		.loc 1 636 0
 2804 1264 0115      		cp r16,__zero_reg__
 2805 1266 1105      		cpc r17,__zero_reg__
 2806 1268 01F0      		breq .L151
 638:fs.c          ****       if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) goto abort_noPath;
 2807               		.loc 1 638 0
 2808 126a 8091 0000 		lds r24,buf+491
 2809 126e 84FF      		sbrs r24,4
 2810 1270 00C0      		rjmp .L150
 640:fs.c          ****       if(r && fs_file.entry_start_cluster == fs_parent_dir_cluster) goto abort_noPath;
 2811               		.loc 1 640 0
 2812 1272 AA20      		tst r10
 2813 1274 01F0      		breq .L182
 640:fs.c          ****       if(r && fs_file.entry_start_cluster == fs_parent_dir_cluster) goto abort_noPath;
 2814               		.loc 1 640 0 is_stmt 0 discriminator 1
 2815 1276 C090 0000 		lds r12,fs_file+28
 2816 127a D090 0000 		lds r13,fs_file+28+1
 2817 127e E090 0000 		lds r14,fs_file+28+2
 2818 1282 F090 0000 		lds r15,fs_file+28+3
 2819 1286 4C15      		cp r20,r12
 2820 1288 5D05      		cpc r21,r13
 2821 128a 6E05      		cpc r22,r14
 2822 128c 7F05      		cpc r23,r15
 2823 128e 01F4      		brne .+2
 2824 1290 00C0      		rjmp .L150
 2825               	.L182:
 642:fs.c          ****       fs_notrootdir = 1;
 2826               		.loc 1 642 0 is_stmt 1
 2827 1292 9092 0000 		sts fs_file+20,r9
 643:fs.c          ****     }
 2828               		.loc 1 643 0
 2829 1296 00C0      		rjmp .L183
 2830               	.LVL137:
 2831               	.L151:
 646:fs.c          ****   fs_file.entry_able = 0;
 2832               		.loc 1 646 0
 2833 1298 1092 0000 		sts fs_file+1,__zero_reg__
 647:fs.c          ****   fs_file.size  = LD_DWORD(FS_DIRENTRY + DIR_FileSize);
 2834               		.loc 1 647 0
 2835 129c 8091 0000 		lds r24,buf+508
 2836 12a0 9091 0000 		lds r25,buf+508+1
 2837 12a4 A091 0000 		lds r26,buf+508+2
 2838 12a8 B091 0000 		lds r27,buf+508+3
 2839 12ac 8093 0000 		sts fs_file+20,r24
 2840 12b0 9093 0000 		sts fs_file+20+1,r25
 2841 12b4 A093 0000 		sts fs_file+20+2,r26
 2842 12b8 B093 0000 		sts fs_file+20+3,r27
 648:fs.c          ****   fs_file.ptr   = 0;  
 2843               		.loc 1 648 0
 2844 12bc 1092 0000 		sts fs_file+16,__zero_reg__
 2845 12c0 1092 0000 		sts fs_file+16+1,__zero_reg__
 2846 12c4 1092 0000 		sts fs_file+16+2,__zero_reg__
 2847 12c8 1092 0000 		sts fs_file+16+3,__zero_reg__
 650:fs.c          ****   fs_file.opened     = OPENED_FILE;
 2848               		.loc 1 650 0
 2849 12cc 81E0      		ldi r24,lo8(1)
 2850 12ce 8093 0000 		sts fs_file,r24
 651:fs.c          ****   if(FS_DIRENTRY[DIR_Attr] & AM_DIR) fs_file.opened = OPENED_DIR; 
 2851               		.loc 1 651 0
 2852 12d2 8091 0000 		lds r24,buf+491
 2853 12d6 84FF      		sbrs r24,4
 2854 12d8 00C0      		rjmp .L184
 651:fs.c          ****   if(FS_DIRENTRY[DIR_Attr] & AM_DIR) fs_file.opened = OPENED_DIR; 
 2855               		.loc 1 651 0 is_stmt 0 discriminator 1
 2856 12da 82E0      		ldi r24,lo8(2)
 2857 12dc 8093 0000 		sts fs_file,r24
 2858               	.L184:
 657:fs.c          ****   if(fs_secondFile.opened==OPENED_FILE && fs_file.opened==OPENED_FILE && fs_secondFile.entry_sector
 2859               		.loc 1 657 0 is_stmt 1
 2860 12e0 8091 0000 		lds r24,fs_secondFile
 2861 12e4 8130      		cpi r24,lo8(1)
 2862 12e6 01F4      		brne .L192
 657:fs.c          ****   if(fs_secondFile.opened==OPENED_FILE && fs_file.opened==OPENED_FILE && fs_secondFile.entry_sector
 2863               		.loc 1 657 0 is_stmt 0 discriminator 1
 2864 12e8 8091 0000 		lds r24,fs_file
 2865 12ec 8130      		cpi r24,lo8(1)
 2866 12ee 01F4      		brne .L192
 2867 12f0 4091 0000 		lds r20,fs_secondFile+8
 2868 12f4 5091 0000 		lds r21,fs_secondFile+8+1
 2869 12f8 6091 0000 		lds r22,fs_secondFile+8+2
 2870 12fc 7091 0000 		lds r23,fs_secondFile+8+3
 2871 1300 8091 0000 		lds r24,fs_file+8
 2872 1304 9091 0000 		lds r25,fs_file+8+1
 2873 1308 A091 0000 		lds r26,fs_file+8+2
 2874 130c B091 0000 		lds r27,fs_file+8+3
 2875 1310 4817      		cp r20,r24
 2876 1312 5907      		cpc r21,r25
 2877 1314 6A07      		cpc r22,r26
 2878 1316 7B07      		cpc r23,r27
 2879 1318 01F4      		brne .L192
 2880 131a 2091 0000 		lds r18,fs_secondFile+2
 2881 131e 3091 0000 		lds r19,fs_secondFile+2+1
 2882 1322 8091 0000 		lds r24,fs_file+2
 2883 1326 9091 0000 		lds r25,fs_file+2+1
 2884 132a 2817      		cp r18,r24
 2885 132c 3907      		cpc r19,r25
 2886 132e 01F4      		brne .L192
 658:fs.c          ****     fs_secondFile.opened = OPENED_NONE; //!9-05-2014 –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª
 2887               		.loc 1 658 0 is_stmt 1
 2888 1330 1092 0000 		sts fs_secondFile,__zero_reg__
 2889 1334 00C0      		rjmp .L192
 2890               	.LVL138:
 2891               	.L245:
 2892               	.LBB75:
 2893               	.LBB59:
 704:fs.c          ****     if(c <= 0x20) break;
 2894               		.loc 1 704 0
 2895 1336 8FED      		ldi r24,lo8(-33)
 2896 1338 860F      		add r24,r22
 2897 133a 8F35      		cpi r24,lo8(95)
 2898 133c 00F0      		brlo .L243
 2899               	.LVL139:
 2900               	.L150:
 2901               	.LDL2:
 2902               	.LBE59:
 2903               	.LBE75:
 665:fs.c          ****   lastError = ERR_NO_PATH;
 2904               		.loc 1 665 0
 2905 133e 84E0      		ldi r24,lo8(4)
 2906               	.L244:
 2907 1340 8093 0000 		sts lastError,r24
 2908               	.LVL140:
 2909               	.L187:
 619:fs.c          ****         if(fs_readdir_nocheck()) return 1;    
 2910               		.loc 1 619 0
 2911 1344 81E0      		ldi r24,lo8(1)
 2912 1346 00C0      		rjmp .L241
 2913               	.L192:
 663:fs.c          ****   return 0;
 2914               		.loc 1 663 0
 2915 1348 80E0      		ldi r24,0
 2916 134a 00C0      		rjmp .L241
 2917               	.LVL141:
 2918               	.L243:
 2919               	.LBB76:
 2920               	.LBB60:
 708:fs.c          ****     if(c >= 'a' && c <= 'z') c -= 0x20;
 2921               		.loc 1 708 0
 2922 134c 8FE9      		ldi r24,lo8(-97)
 2923 134e 860F      		add r24,r22
 2924 1350 8A31      		cpi r24,lo8(26)
 2925 1352 00F4      		brsh .L161
 2926 1354 6052      		subi r22,lo8(-(-32))
 2927               	.LVL142:
 2928               	.L161:
 710:fs.c          ****     FS_DIRFIND[i++] = c;
 2929               		.loc 1 710 0
 2930 1356 E72F      		mov r30,r23
 2931 1358 F0E0      		ldi r31,0
 2932 135a E050      		subi r30,lo8(-(buf+469))
 2933 135c F040      		sbci r31,hi8(-(buf+469))
 2934 135e 6083      		st Z,r22
 2935 1360 7F5F      		subi r23,lo8(-(1))
 2936               	.LVL143:
 2937 1362 00C0      		rjmp .L157
 2938               	.LVL144:
 2939               	.L241:
 2940               	/* epilogue start */
 2941               	.LBE60:
 2942               	.LBE76:
 668:fs.c          **** }
 2943               		.loc 1 668 0
 2944 1364 2B96      		adiw r28,11
 2945 1366 0FB6      		in __tmp_reg__,__SREG__
 2946 1368 F894      		cli
 2947 136a DEBF      		out __SP_H__,r29
 2948 136c 0FBE      		out __SREG__,__tmp_reg__
 2949 136e CDBF      		out __SP_L__,r28
 2950 1370 DF91      		pop r29
 2951 1372 CF91      		pop r28
 2952 1374 1F91      		pop r17
 2953 1376 0F91      		pop r16
 2954 1378 FF90      		pop r15
 2955 137a EF90      		pop r14
 2956 137c DF90      		pop r13
 2957 137e CF90      		pop r12
 2958 1380 BF90      		pop r11
 2959 1382 AF90      		pop r10
 2960 1384 9F90      		pop r9
 2961 1386 8F90      		pop r8
 2962 1388 0895      		ret
 2963               		.cfi_endproc
 2964               	.LFE17:
 2966               	.global	fs_open
 2968               	fs_open:
 2969               	.LFB21:
 788:fs.c          **** uint8_t fs_open(void) {
 2970               		.loc 1 788 0
 2971               		.cfi_startproc
 2972               	/* prologue: function */
 2973               	/* frame size = 0 */
 2974               	/* stack size = 0 */
 2975               	.L__stack_usage = 0
 789:fs.c          ****   if(fs_openany()) goto abort;
 2976               		.loc 1 789 0
 2977 138a 80E0      		ldi r24,0
 2978 138c 0E94 0000 		call fs_open0
 2979               	.LVL145:
 2980 1390 8111      		cpse r24,__zero_reg__
 2981 1392 00C0      		rjmp .L248
 791:fs.c          ****   if(fs_file.opened == OPENED_FILE) return 0;
 2982               		.loc 1 791 0
 2983 1394 8091 0000 		lds r24,fs_file
 2984 1398 8130      		cpi r24,lo8(1)
 2985 139a 01F0      		breq .L249
 792:fs.c          ****   fs_file.opened = OPENED_NONE;
 2986               		.loc 1 792 0
 2987 139c 1092 0000 		sts fs_file,__zero_reg__
 796:fs.c          ****   lastError = ERR_NO_PATH;
 2988               		.loc 1 796 0
 2989 13a0 84E0      		ldi r24,lo8(4)
 2990 13a2 8093 0000 		sts lastError,r24
 2991               	.L248:
 798:fs.c          ****   return 1;
 2992               		.loc 1 798 0
 2993 13a6 81E0      		ldi r24,lo8(1)
 2994 13a8 0895      		ret
 2995               	.L249:
 791:fs.c          ****   if(fs_file.opened == OPENED_FILE) return 0;
 2996               		.loc 1 791 0
 2997 13aa 80E0      		ldi r24,0
 799:fs.c          **** }
 2998               		.loc 1 799 0
 2999 13ac 0895      		ret
 3000               		.cfi_endproc
 3001               	.LFE21:
 3003               	.global	fs_opendir
 3005               	fs_opendir:
 3006               	.LFB22:
 805:fs.c          **** uint8_t fs_opendir(void) {
 3007               		.loc 1 805 0
 3008               		.cfi_startproc
 3009               	/* prologue: function */
 3010               	/* frame size = 0 */
 3011               	/* stack size = 0 */
 3012               	.L__stack_usage = 0
 806:fs.c          ****   if(fs_openany()) goto abort;
 3013               		.loc 1 806 0
 3014 13ae 80E0      		ldi r24,0
 3015 13b0 0E94 0000 		call fs_open0
 3016               	.LVL146:
 3017 13b4 8111      		cpse r24,__zero_reg__
 3018 13b6 00C0      		rjmp .L252
 808:fs.c          ****   if(fs_file.opened == OPENED_DIR) return 0;
 3019               		.loc 1 808 0
 3020 13b8 8091 0000 		lds r24,fs_file
 3021 13bc 8230      		cpi r24,lo8(2)
 3022 13be 01F0      		breq .L253
 809:fs.c          ****   fs_file.opened = OPENED_NONE;
 3023               		.loc 1 809 0
 3024 13c0 1092 0000 		sts fs_file,__zero_reg__
 813:fs.c          ****   lastError = ERR_NO_PATH;
 3025               		.loc 1 813 0
 3026 13c4 84E0      		ldi r24,lo8(4)
 3027 13c6 8093 0000 		sts lastError,r24
 3028               	.L252:
 815:fs.c          ****   return 1;
 3029               		.loc 1 815 0
 3030 13ca 81E0      		ldi r24,lo8(1)
 3031 13cc 0895      		ret
 3032               	.L253:
 808:fs.c          ****   if(fs_file.opened == OPENED_DIR) return 0;
 3033               		.loc 1 808 0
 3034 13ce 80E0      		ldi r24,0
 816:fs.c          **** }
 3035               		.loc 1 816 0
 3036 13d0 0895      		ret
 3037               		.cfi_endproc
 3038               	.LFE22:
 3040               	.global	fs_read0
 3042               	fs_read0:
 3043               	.LFB24:
 867:fs.c          **** uint8_t fs_read0(uint8_t* ptr, WORD len) {
 3044               		.loc 1 867 0
 3045               		.cfi_startproc
 3046               	.LVL147:
 3047 13d2 AF92      		push r10
 3048               	.LCFI73:
 3049               		.cfi_def_cfa_offset 3
 3050               		.cfi_offset 10, -2
 3051 13d4 BF92      		push r11
 3052               	.LCFI74:
 3053               		.cfi_def_cfa_offset 4
 3054               		.cfi_offset 11, -3
 3055 13d6 CF92      		push r12
 3056               	.LCFI75:
 3057               		.cfi_def_cfa_offset 5
 3058               		.cfi_offset 12, -4
 3059 13d8 DF92      		push r13
 3060               	.LCFI76:
 3061               		.cfi_def_cfa_offset 6
 3062               		.cfi_offset 13, -5
 3063 13da EF92      		push r14
 3064               	.LCFI77:
 3065               		.cfi_def_cfa_offset 7
 3066               		.cfi_offset 14, -6
 3067 13dc FF92      		push r15
 3068               	.LCFI78:
 3069               		.cfi_def_cfa_offset 8
 3070               		.cfi_offset 15, -7
 3071 13de 0F93      		push r16
 3072               	.LCFI79:
 3073               		.cfi_def_cfa_offset 9
 3074               		.cfi_offset 16, -8
 3075 13e0 1F93      		push r17
 3076               	.LCFI80:
 3077               		.cfi_def_cfa_offset 10
 3078               		.cfi_offset 17, -9
 3079 13e2 CF93      		push r28
 3080               	.LCFI81:
 3081               		.cfi_def_cfa_offset 11
 3082               		.cfi_offset 28, -10
 3083 13e4 DF93      		push r29
 3084               	.LCFI82:
 3085               		.cfi_def_cfa_offset 12
 3086               		.cfi_offset 29, -11
 3087               	/* prologue: function */
 3088               	/* frame size = 0 */
 3089               	/* stack size = 10 */
 3090               	.L__stack_usage = 10
 3091 13e6 6C01      		movw r12,r24
 3092 13e8 EB01      		movw r28,r22
 872:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3093               		.loc 1 872 0
 3094 13ea 8091 0000 		lds r24,fs_file
 3095               	.LVL148:
 3096 13ee 8130      		cpi r24,lo8(1)
 3097 13f0 01F4      		brne .L255
 880:fs.c          ****     sectorLen = 512 - ((WORD)fs_file.ptr % 512);
 3098               		.loc 1 880 0
 3099 13f2 A12C      		mov r10,__zero_reg__
 3100 13f4 72E0      		ldi r23,lo8(2)
 3101 13f6 B72E      		mov r11,r23
 3102 13f8 00C0      		rjmp .L256
 3103               	.L255:
 872:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3104               		.loc 1 872 0 discriminator 1
 3105 13fa 83E0      		ldi r24,lo8(3)
 3106 13fc 8093 0000 		sts lastError,r24
 3107 1400 00C0      		rjmp .L257
 3108               	.LVL149:
 3109               	.L261:
 877:fs.c          ****     if(fs_nextRWSector()) goto abort;
 3110               		.loc 1 877 0
 3111 1402 0E94 0000 		call fs_nextRWSector
 3112               	.LVL150:
 3113 1406 8111      		cpse r24,__zero_reg__
 3114 1408 00C0      		rjmp .L257
 880:fs.c          ****     sectorLen = 512 - ((WORD)fs_file.ptr % 512);
 3115               		.loc 1 880 0
 3116 140a 2091 0000 		lds r18,fs_file+16
 3117 140e 3091 0000 		lds r19,fs_file+16+1
 3118 1412 3170      		andi r19,1
 3119 1414 C501      		movw r24,r10
 3120 1416 821B      		sub r24,r18
 3121 1418 930B      		sbc r25,r19
 3122               	.LVL151:
 3123 141a 7E01      		movw r14,r28
 3124 141c 8C17      		cp r24,r28
 3125 141e 9D07      		cpc r25,r29
 3126 1420 00F4      		brsh .L259
 3127               	.LVL152:
 3128 1422 7C01      		movw r14,r24
 3129               	.LVL153:
 3130               	.L259:
 884:fs.c          ****     if(ptr) {
 3131               		.loc 1 884 0
 3132 1424 C114      		cp r12,__zero_reg__
 3133 1426 D104      		cpc r13,__zero_reg__
 3134 1428 01F4      		brne .L267
 3135               	.L260:
 890:fs.c          ****     fs_file.ptr += sectorLen;
 3136               		.loc 1 890 0
 3137 142a 8091 0000 		lds r24,fs_file+16
 3138 142e 9091 0000 		lds r25,fs_file+16+1
 3139 1432 A091 0000 		lds r26,fs_file+16+2
 3140 1436 B091 0000 		lds r27,fs_file+16+3
 3141 143a 8E0D      		add r24,r14
 3142 143c 9F1D      		adc r25,r15
 3143 143e A11D      		adc r26,__zero_reg__
 3144 1440 B11D      		adc r27,__zero_reg__
 3145 1442 8093 0000 		sts fs_file+16,r24
 3146 1446 9093 0000 		sts fs_file+16+1,r25
 3147 144a A093 0000 		sts fs_file+16+2,r26
 3148 144e B093 0000 		sts fs_file+16+3,r27
 3149               	.LVL154:
 891:fs.c          ****     len -= sectorLen;
 3150               		.loc 1 891 0
 3151 1452 CE19      		sub r28,r14
 3152 1454 DF09      		sbc r29,r15
 3153               	.LVL155:
 3154               	.L256:
 875:fs.c          ****   while(len) {
 3155               		.loc 1 875 0 discriminator 1
 3156 1456 2097      		sbiw r28,0
 3157 1458 01F4      		brne .L261
 3158 145a 00C0      		rjmp .L268
 3159               	.LVL156:
 3160               	.L267:
 885:fs.c          ****       if(sd_read(ptr, fs_file.sector, (WORD)fs_file.ptr % 512, sectorLen)) goto abort;
 3161               		.loc 1 885 0
 3162 145c 4091 0000 		lds r20,fs_file+28
 3163 1460 5091 0000 		lds r21,fs_file+28+1
 3164 1464 6091 0000 		lds r22,fs_file+28+2
 3165 1468 7091 0000 		lds r23,fs_file+28+3
 3166 146c 8701      		movw r16,r14
 3167 146e C601      		movw r24,r12
 3168 1470 0E94 0000 		call sd_read
 3169               	.LVL157:
 3170 1474 8111      		cpse r24,__zero_reg__
 3171 1476 00C0      		rjmp .L257
 3172               	.LVL158:
 886:fs.c          ****       ptr += sectorLen;         
 3173               		.loc 1 886 0
 3174 1478 CE0C      		add r12,r14
 3175 147a DF1C      		adc r13,r15
 3176               	.LVL159:
 3177 147c 00C0      		rjmp .L260
 3178               	.LVL160:
 3179               	.L268:
 3180               	.LBB79:
 3181               	.LBB80:
 895:fs.c          ****   if(fs_file.ptr > fs_file.size) fs_file.size = fs_file.ptr, fs_file.changed = 1;
 3182               		.loc 1 895 0
 3183 147e 8091 0000 		lds r24,fs_file+16
 3184 1482 9091 0000 		lds r25,fs_file+16+1
 3185 1486 A091 0000 		lds r26,fs_file+16+2
 3186 148a B091 0000 		lds r27,fs_file+16+3
 3187 148e 4091 0000 		lds r20,fs_file+20
 3188 1492 5091 0000 		lds r21,fs_file+20+1
 3189 1496 6091 0000 		lds r22,fs_file+20+2
 3190 149a 7091 0000 		lds r23,fs_file+20+3
 3191 149e 4817      		cp r20,r24
 3192 14a0 5907      		cpc r21,r25
 3193 14a2 6A07      		cpc r22,r26
 3194 14a4 7B07      		cpc r23,r27
 3195 14a6 00F4      		brsh .L263
 3196 14a8 8093 0000 		sts fs_file+20,r24
 3197 14ac 9093 0000 		sts fs_file+20+1,r25
 3198 14b0 A093 0000 		sts fs_file+20+2,r26
 3199 14b4 B093 0000 		sts fs_file+20+3,r27
 3200 14b8 81E0      		ldi r24,lo8(1)
 3201 14ba 8093 0000 		sts fs_file+32,r24
 3202 14be 00C0      		rjmp .L263
 3203               	.LVL161:
 3204               	.L257:
 3205               	.LBE80:
 3206               	.LBE79:
 900:fs.c          ****   fs_file.opened = OPENED_NONE;
 3207               		.loc 1 900 0
 3208 14c0 1092 0000 		sts fs_file,__zero_reg__
 902:fs.c          ****   return 1;
 3209               		.loc 1 902 0
 3210 14c4 81E0      		ldi r24,lo8(1)
 3211 14c6 00C0      		rjmp .L262
 3212               	.LVL162:
 3213               	.L263:
 3214               	.LBB82:
 3215               	.LBB81:
 895:fs.c          ****   if(fs_file.ptr > fs_file.size) fs_file.size = fs_file.ptr, fs_file.changed = 1;
 3216               		.loc 1 895 0
 3217 14c8 80E0      		ldi r24,0
 3218               	.LVL163:
 3219               	.L262:
 3220               	/* epilogue start */
 3221               	.LBE81:
 3222               	.LBE82:
 903:fs.c          **** }
 3223               		.loc 1 903 0
 3224 14ca DF91      		pop r29
 3225 14cc CF91      		pop r28
 3226 14ce 1F91      		pop r17
 3227 14d0 0F91      		pop r16
 3228 14d2 FF90      		pop r15
 3229 14d4 EF90      		pop r14
 3230 14d6 DF90      		pop r13
 3231 14d8 CF90      		pop r12
 3232 14da BF90      		pop r11
 3233 14dc AF90      		pop r10
 3234 14de 0895      		ret
 3235               		.cfi_endproc
 3236               	.LFE24:
 3238               	.global	fs_read
 3240               	fs_read:
 3241               	.LFB25:
 914:fs.c          **** uint8_t fs_read(uint8_t* ptr, WORD len, WORD* readed) {
 3242               		.loc 1 914 0
 3243               		.cfi_startproc
 3244               	.LVL164:
 3245 14e0 4F92      		push r4
 3246               	.LCFI83:
 3247               		.cfi_def_cfa_offset 3
 3248               		.cfi_offset 4, -2
 3249 14e2 5F92      		push r5
 3250               	.LCFI84:
 3251               		.cfi_def_cfa_offset 4
 3252               		.cfi_offset 5, -3
 3253 14e4 6F92      		push r6
 3254               	.LCFI85:
 3255               		.cfi_def_cfa_offset 5
 3256               		.cfi_offset 6, -4
 3257 14e6 7F92      		push r7
 3258               	.LCFI86:
 3259               		.cfi_def_cfa_offset 6
 3260               		.cfi_offset 7, -5
 3261 14e8 8F92      		push r8
 3262               	.LCFI87:
 3263               		.cfi_def_cfa_offset 7
 3264               		.cfi_offset 8, -6
 3265 14ea 9F92      		push r9
 3266               	.LCFI88:
 3267               		.cfi_def_cfa_offset 8
 3268               		.cfi_offset 9, -7
 3269 14ec AF92      		push r10
 3270               	.LCFI89:
 3271               		.cfi_def_cfa_offset 9
 3272               		.cfi_offset 10, -8
 3273 14ee BF92      		push r11
 3274               	.LCFI90:
 3275               		.cfi_def_cfa_offset 10
 3276               		.cfi_offset 11, -9
 3277 14f0 CF92      		push r12
 3278               	.LCFI91:
 3279               		.cfi_def_cfa_offset 11
 3280               		.cfi_offset 12, -10
 3281 14f2 DF92      		push r13
 3282               	.LCFI92:
 3283               		.cfi_def_cfa_offset 12
 3284               		.cfi_offset 13, -11
 3285 14f4 EF92      		push r14
 3286               	.LCFI93:
 3287               		.cfi_def_cfa_offset 13
 3288               		.cfi_offset 14, -12
 3289 14f6 FF92      		push r15
 3290               	.LCFI94:
 3291               		.cfi_def_cfa_offset 14
 3292               		.cfi_offset 15, -13
 3293 14f8 0F93      		push r16
 3294               	.LCFI95:
 3295               		.cfi_def_cfa_offset 15
 3296               		.cfi_offset 16, -14
 3297 14fa 1F93      		push r17
 3298               	.LCFI96:
 3299               		.cfi_def_cfa_offset 16
 3300               		.cfi_offset 17, -15
 3301               	/* prologue: function */
 3302               	/* frame size = 0 */
 3303               	/* stack size = 14 */
 3304               	.L__stack_usage = 14
 916:fs.c          ****   if(len > fs_file.size - fs_file.ptr) len = (WORD)(fs_file.size - fs_file.ptr);
 3305               		.loc 1 916 0
 3306 14fc C090 0000 		lds r12,fs_file+20
 3307 1500 D090 0000 		lds r13,fs_file+20+1
 3308 1504 E090 0000 		lds r14,fs_file+20+2
 3309 1508 F090 0000 		lds r15,fs_file+20+3
 3310 150c 0091 0000 		lds r16,fs_file+16
 3311 1510 1091 0000 		lds r17,fs_file+16+1
 3312 1514 2091 0000 		lds r18,fs_file+16+2
 3313 1518 3091 0000 		lds r19,fs_file+16+3
 3314 151c 2B01      		movw r4,r22
 3315 151e 612C      		mov r6,__zero_reg__
 3316 1520 712C      		mov r7,__zero_reg__
 3317 1522 4601      		movw r8,r12
 3318 1524 5701      		movw r10,r14
 3319 1526 801A      		sub r8,r16
 3320 1528 910A      		sbc r9,r17
 3321 152a A20A      		sbc r10,r18
 3322 152c B30A      		sbc r11,r19
 3323 152e 8414      		cp r8,r4
 3324 1530 9504      		cpc r9,r5
 3325 1532 A604      		cpc r10,r6
 3326 1534 B704      		cpc r11,r7
 3327 1536 00F4      		brsh .L270
 916:fs.c          ****   if(len > fs_file.size - fs_file.ptr) len = (WORD)(fs_file.size - fs_file.ptr);
 3328               		.loc 1 916 0 is_stmt 0 discriminator 1
 3329 1538 B601      		movw r22,r12
 3330               	.LVL165:
 3331 153a 601B      		sub r22,r16
 3332 153c 710B      		sbc r23,r17
 3333               	.LVL166:
 3334               	.L270:
 917:fs.c          ****   *readed = len; 
 3335               		.loc 1 917 0 is_stmt 1
 3336 153e FA01      		movw r30,r20
 3337 1540 7183      		std Z+1,r23
 3338 1542 6083      		st Z,r22
 3339               	/* epilogue start */
 921:fs.c          **** }
 3340               		.loc 1 921 0
 3341 1544 1F91      		pop r17
 3342 1546 0F91      		pop r16
 3343 1548 FF90      		pop r15
 3344 154a EF90      		pop r14
 3345 154c DF90      		pop r13
 3346 154e CF90      		pop r12
 3347 1550 BF90      		pop r11
 3348 1552 AF90      		pop r10
 3349 1554 9F90      		pop r9
 3350 1556 8F90      		pop r8
 3351 1558 7F90      		pop r7
 3352 155a 6F90      		pop r6
 3353 155c 5F90      		pop r5
 3354 155e 4F90      		pop r4
 920:fs.c          ****   return fs_read0(ptr, len);
 3355               		.loc 1 920 0
 3356 1560 0C94 0000 		jmp fs_read0
 3357               	.LVL167:
 3358               		.cfi_endproc
 3359               	.LFE25:
 3361               	.global	fs_lseek
 3363               	fs_lseek:
 3364               	.LFB27:
 950:fs.c          **** uint8_t fs_lseek(unsigned long off, uint8_t mode) {
 3365               		.loc 1 950 0
 3366               		.cfi_startproc
 3367               	.LVL168:
 3368 1564 8F92      		push r8
 3369               	.LCFI97:
 3370               		.cfi_def_cfa_offset 3
 3371               		.cfi_offset 8, -2
 3372 1566 9F92      		push r9
 3373               	.LCFI98:
 3374               		.cfi_def_cfa_offset 4
 3375               		.cfi_offset 9, -3
 3376 1568 AF92      		push r10
 3377               	.LCFI99:
 3378               		.cfi_def_cfa_offset 5
 3379               		.cfi_offset 10, -4
 3380 156a BF92      		push r11
 3381               	.LCFI100:
 3382               		.cfi_def_cfa_offset 6
 3383               		.cfi_offset 11, -5
 3384 156c CF92      		push r12
 3385               	.LCFI101:
 3386               		.cfi_def_cfa_offset 7
 3387               		.cfi_offset 12, -6
 3388 156e DF92      		push r13
 3389               	.LCFI102:
 3390               		.cfi_def_cfa_offset 8
 3391               		.cfi_offset 13, -7
 3392 1570 EF92      		push r14
 3393               	.LCFI103:
 3394               		.cfi_def_cfa_offset 9
 3395               		.cfi_offset 14, -8
 3396 1572 FF92      		push r15
 3397               	.LCFI104:
 3398               		.cfi_def_cfa_offset 10
 3399               		.cfi_offset 15, -9
 3400               	/* prologue: function */
 3401               	/* frame size = 0 */
 3402               	/* stack size = 8 */
 3403               	.L__stack_usage = 8
 3404 1574 6B01      		movw r12,r22
 3405 1576 7C01      		movw r14,r24
 3406 1578 8091 0000 		lds r24,fs_file+16
 3407 157c 9091 0000 		lds r25,fs_file+16+1
 3408 1580 A091 0000 		lds r26,fs_file+16+2
 3409 1584 B091 0000 		lds r27,fs_file+16+3
 954:fs.c          ****   if(mode==1) off += fs_file.ptr; else
 3410               		.loc 1 954 0
 3411 1588 4130      		cpi r20,lo8(1)
 3412 158a 01F4      		brne .L272
 954:fs.c          ****   if(mode==1) off += fs_file.ptr; else
 3413               		.loc 1 954 0 is_stmt 0 discriminator 1
 3414 158c C80E      		add r12,r24
 3415 158e D91E      		adc r13,r25
 3416 1590 EA1E      		adc r14,r26
 3417 1592 FB1E      		adc r15,r27
 3418               	.LVL169:
 3419 1594 00C0      		rjmp .L273
 3420               	.L272:
 955:fs.c          ****   if(mode==2) off += fs_file.size;                        
 3421               		.loc 1 955 0 is_stmt 1
 3422 1596 4230      		cpi r20,lo8(2)
 3423 1598 01F4      		brne .L273
 955:fs.c          ****   if(mode==2) off += fs_file.size;                        
 3424               		.loc 1 955 0 is_stmt 0 discriminator 1
 3425 159a 4091 0000 		lds r20,fs_file+20
 3426 159e 5091 0000 		lds r21,fs_file+20+1
 3427 15a2 6091 0000 		lds r22,fs_file+20+2
 3428 15a6 7091 0000 		lds r23,fs_file+20+3
 3429               	.LVL170:
 3430 15aa C40E      		add r12,r20
 3431 15ac D51E      		adc r13,r21
 3432 15ae E61E      		adc r14,r22
 3433 15b0 F71E      		adc r15,r23
 3434               	.LVL171:
 3435               	.L273:
 958:fs.c          ****   if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
 3436               		.loc 1 958 0 is_stmt 1
 3437 15b2 C816      		cp r12,r24
 3438 15b4 D906      		cpc r13,r25
 3439 15b6 EA06      		cpc r14,r26
 3440 15b8 FB06      		cpc r15,r27
 3441 15ba 00F0      		brlo .L274
 958:fs.c          ****   if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
 3442               		.loc 1 958 0 is_stmt 0 discriminator 1
 3443 15bc C81A      		sub r12,r24
 3444 15be D90A      		sbc r13,r25
 3445 15c0 EA0A      		sbc r14,r26
 3446 15c2 FB0A      		sbc r15,r27
 3447               	.LVL172:
 3448 15c4 00C0      		rjmp .L279
 3449               	.L274:
 958:fs.c          ****   if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
 3450               		.loc 1 958 0 discriminator 2
 3451 15c6 1092 0000 		sts fs_file+16,__zero_reg__
 3452 15ca 1092 0000 		sts fs_file+16+1,__zero_reg__
 3453 15ce 1092 0000 		sts fs_file+16+2,__zero_reg__
 3454 15d2 1092 0000 		sts fs_file+16+3,__zero_reg__
 3455               	.L279:
 3456               	.LVL173:
 3457 15d6 4601      		movw r8,r12
 3458 15d8 5701      		movw r10,r14
 3459 15da 81E0      		ldi r24,1
 3460 15dc C816      		cp r12,r24
 3461 15de 80E8      		ldi r24,-128
 3462 15e0 D806      		cpc r13,r24
 3463 15e2 E104      		cpc r14,__zero_reg__
 3464 15e4 F104      		cpc r15,__zero_reg__
 3465 15e6 00F0      		brlo .L276
 3466               	.LVL174:
 3467 15e8 812C      		mov r8,__zero_reg__
 3468 15ea E0E8      		ldi r30,lo8(-128)
 3469 15ec 9E2E      		mov r9,r30
 3470 15ee A12C      		mov r10,__zero_reg__
 3471 15f0 B12C      		mov r11,__zero_reg__
 3472               	.LVL175:
 3473               	.L276:
 963:fs.c          ****     if(fs_read0(0, (WORD)l)) return 1;
 3474               		.loc 1 963 0 is_stmt 1
 3475 15f2 B401      		movw r22,r8
 3476 15f4 80E0      		ldi r24,0
 3477 15f6 90E0      		ldi r25,0
 3478 15f8 0E94 0000 		call fs_read0
 3479               	.LVL176:
 3480 15fc 8111      		cpse r24,__zero_reg__
 3481 15fe 00C0      		rjmp .L280
 964:fs.c          ****     off -= l;
 3482               		.loc 1 964 0
 3483 1600 C818      		sub r12,r8
 3484 1602 D908      		sbc r13,r9
 3485 1604 EA08      		sbc r14,r10
 3486 1606 FB08      		sbc r15,r11
 3487               	.LVL177:
 965:fs.c          ****   } while(off);
 3488               		.loc 1 965 0
 3489 1608 01F4      		brne .L279
 968:fs.c          ****   fs_saveFileLength();
 3490               		.loc 1 968 0
 3491 160a 0E94 0000 		call fs_saveFileLength
 3492               	.LVL178:
 971:fs.c          ****   fs_tmp = fs_file.ptr;
 3493               		.loc 1 971 0
 3494 160e 8091 0000 		lds r24,fs_file+16
 3495 1612 9091 0000 		lds r25,fs_file+16+1
 3496 1616 A091 0000 		lds r26,fs_file+16+2
 3497 161a B091 0000 		lds r27,fs_file+16+3
 3498 161e 8093 0000 		sts fs_tmp,r24
 3499 1622 9093 0000 		sts fs_tmp+1,r25
 3500 1626 A093 0000 		sts fs_tmp+2,r26
 3501 162a B093 0000 		sts fs_tmp+3,r27
 973:fs.c          ****   return 0;
 3502               		.loc 1 973 0
 3503 162e 80E0      		ldi r24,0
 3504 1630 00C0      		rjmp .L277
 3505               	.L280:
 963:fs.c          ****     if(fs_read0(0, (WORD)l)) return 1;
 3506               		.loc 1 963 0
 3507 1632 81E0      		ldi r24,lo8(1)
 3508               	.L277:
 3509               	/* epilogue start */
 974:fs.c          **** }
 3510               		.loc 1 974 0
 3511 1634 FF90      		pop r15
 3512 1636 EF90      		pop r14
 3513 1638 DF90      		pop r13
 3514 163a CF90      		pop r12
 3515               	.LVL179:
 3516 163c BF90      		pop r11
 3517 163e AF90      		pop r10
 3518 1640 9F90      		pop r9
 3519 1642 8F90      		pop r8
 3520               	.LVL180:
 3521 1644 0895      		ret
 3522               		.cfi_endproc
 3523               	.LFE27:
 3525               	.global	fs_write_start
 3527               	fs_write_start:
 3528               	.LFB28:
 980:fs.c          **** uint8_t fs_write_start(void) {
 3529               		.loc 1 980 0
 3530               		.cfi_startproc
 3531 1646 CF92      		push r12
 3532               	.LCFI105:
 3533               		.cfi_def_cfa_offset 3
 3534               		.cfi_offset 12, -2
 3535 1648 DF92      		push r13
 3536               	.LCFI106:
 3537               		.cfi_def_cfa_offset 4
 3538               		.cfi_offset 13, -3
 3539 164a EF92      		push r14
 3540               	.LCFI107:
 3541               		.cfi_def_cfa_offset 5
 3542               		.cfi_offset 14, -4
 3543 164c FF92      		push r15
 3544               	.LCFI108:
 3545               		.cfi_def_cfa_offset 6
 3546               		.cfi_offset 15, -5
 3547 164e 0F93      		push r16
 3548               	.LCFI109:
 3549               		.cfi_def_cfa_offset 7
 3550               		.cfi_offset 16, -6
 3551 1650 1F93      		push r17
 3552               	.LCFI110:
 3553               		.cfi_def_cfa_offset 8
 3554               		.cfi_offset 17, -7
 3555 1652 CF93      		push r28
 3556               	.LCFI111:
 3557               		.cfi_def_cfa_offset 9
 3558               		.cfi_offset 28, -8
 3559 1654 DF93      		push r29
 3560               	.LCFI112:
 3561               		.cfi_def_cfa_offset 10
 3562               		.cfi_offset 29, -9
 3563               	/* prologue: function */
 3564               	/* frame size = 0 */
 3565               	/* stack size = 8 */
 3566               	.L__stack_usage = 8
 985:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3567               		.loc 1 985 0
 3568 1656 8091 0000 		lds r24,fs_file
 3569 165a 8130      		cpi r24,lo8(1)
 3570 165c 01F0      		breq .L282
 985:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3571               		.loc 1 985 0 is_stmt 0 discriminator 1
 3572 165e 83E0      		ldi r24,lo8(3)
 3573 1660 00C0      		rjmp .L294
 3574               	.L282:
 986:fs.c          ****   if(fs_wtotal == 0) { lastError = ERR_NO_DATA; goto abort; }
 3575               		.loc 1 986 0 is_stmt 1
 3576 1662 0091 0000 		lds r16,fs_wtotal
 3577 1666 1091 0000 		lds r17,fs_wtotal+1
 3578 166a 0115      		cp r16,__zero_reg__
 3579 166c 1105      		cpc r17,__zero_reg__
 3580 166e 01F4      		brne .L284
 986:fs.c          ****   if(fs_wtotal == 0) { lastError = ERR_NO_DATA; goto abort; }
 3581               		.loc 1 986 0 is_stmt 0 discriminator 1
 3582 1670 89E0      		ldi r24,lo8(9)
 3583               	.L294:
 3584 1672 8093 0000 		sts lastError,r24
 3585 1676 00C0      		rjmp .L283
 3586               	.L284:
 990:fs.c          ****   len = 512 - (WORD)fs_file.ptr % 512;
 3587               		.loc 1 990 0 is_stmt 1
 3588 1678 C090 0000 		lds r12,fs_file+16
 3589 167c D090 0000 		lds r13,fs_file+16+1
 3590 1680 E090 0000 		lds r14,fs_file+16+2
 3591 1684 F090 0000 		lds r15,fs_file+16+3
 3592               	.LVL181:
 996:fs.c          ****   if(fs_nextRWSector()) goto abort; /* –î–æ–ª–∂–Ω–æ –≤—ã–ª–µ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –æ—à–∏–±–∫–∞
 3593               		.loc 1 996 0
 3594 1688 0E94 0000 		call fs_nextRWSector
 3595               	.LVL182:
 3596 168c 8111      		cpse r24,__zero_reg__
 3597 168e 00C0      		rjmp .L283
 990:fs.c          ****   len = 512 - (WORD)fs_file.ptr % 512;
 3598               		.loc 1 990 0
 3599 1690 81E0      		ldi r24,1
 3600 1692 D822      		and r13,r24
 3601               	.LVL183:
 3602 1694 C0E0      		ldi r28,0
 3603 1696 D2E0      		ldi r29,lo8(2)
 3604 1698 CC19      		sub r28,r12
 3605 169a DD09      		sbc r29,r13
 3606 169c 0C17      		cp r16,r28
 3607 169e 1D07      		cpc r17,r29
 3608 16a0 00F4      		brsh .L286
 3609 16a2 E801      		movw r28,r16
 3610               	.L286:
 999:fs.c          ****   if(fs_file.size < fs_file.ptr + len) {
 3611               		.loc 1 999 0
 3612 16a4 8091 0000 		lds r24,fs_file+16
 3613 16a8 9091 0000 		lds r25,fs_file+16+1
 3614 16ac A091 0000 		lds r26,fs_file+16+2
 3615 16b0 B091 0000 		lds r27,fs_file+16+3
 3616 16b4 8C0F      		add r24,r28
 3617 16b6 9D1F      		adc r25,r29
 3618 16b8 A11D      		adc r26,__zero_reg__
 3619 16ba B11D      		adc r27,__zero_reg__
 3620 16bc 4091 0000 		lds r20,fs_file+20
 3621 16c0 5091 0000 		lds r21,fs_file+20+1
 3622 16c4 6091 0000 		lds r22,fs_file+20+2
 3623 16c8 7091 0000 		lds r23,fs_file+20+3
 3624 16cc 4817      		cp r20,r24
 3625 16ce 5907      		cpc r21,r25
 3626 16d0 6A07      		cpc r22,r26
 3627 16d2 7B07      		cpc r23,r27
 3628 16d4 00F4      		brsh .L287
1000:fs.c          ****     fs_file.size = fs_file.ptr + len;
 3629               		.loc 1 1000 0
 3630 16d6 8093 0000 		sts fs_file+20,r24
 3631 16da 9093 0000 		sts fs_file+20+1,r25
 3632 16de A093 0000 		sts fs_file+20+2,r26
 3633 16e2 B093 0000 		sts fs_file+20+3,r27
1001:fs.c          ****     fs_file.changed = 1;
 3634               		.loc 1 1001 0
 3635 16e6 81E0      		ldi r24,lo8(1)
 3636 16e8 8093 0000 		sts fs_file+32,r24
 3637               	.L287:
1005:fs.c          ****   if(len != 512) {      
 3638               		.loc 1 1005 0
 3639 16ec C115      		cp r28,__zero_reg__
 3640 16ee 82E0      		ldi r24,2
 3641 16f0 D807      		cpc r29,r24
 3642 16f2 01F4      		brne .L288
 3643               	.L290:
1009:fs.c          ****   fs_file_wlen = len;
 3644               		.loc 1 1009 0
 3645 16f4 D093 0000 		sts fs_tmp+1,r29
 3646 16f8 C093 0000 		sts fs_tmp,r28
1010:fs.c          ****   fs_file_woff = (WORD)fs_file.ptr % 512;
 3647               		.loc 1 1010 0
 3648 16fc 8091 0000 		lds r24,fs_file+16
 3649 1700 9091 0000 		lds r25,fs_file+16+1
 3650 1704 9170      		andi r25,1
 3651 1706 9093 0000 		sts fs_tmp+2+1,r25
 3652 170a 8093 0000 		sts fs_tmp+2,r24
1011:fs.c          ****   return 0;
 3653               		.loc 1 1011 0
 3654 170e 80E0      		ldi r24,0
 3655 1710 00C0      		rjmp .L289
 3656               	.L288:
1006:fs.c          ****     if(sd_readBuf(fs_file.sector)) goto abort;
 3657               		.loc 1 1006 0
 3658 1712 6091 0000 		lds r22,fs_file+28
 3659 1716 7091 0000 		lds r23,fs_file+28+1
 3660 171a 8091 0000 		lds r24,fs_file+28+2
 3661 171e 9091 0000 		lds r25,fs_file+28+3
 3662 1722 0E94 0000 		call sd_readBuf
 3663               	.LVL184:
 3664 1726 8823      		tst r24
 3665 1728 01F0      		breq .L290
 3666               	.L283:
1015:fs.c          ****   fs_saveFileLength();
 3667               		.loc 1 1015 0
 3668 172a 0E94 0000 		call fs_saveFileLength
 3669               	.LVL185:
1018:fs.c          ****   fs_file.opened = OPENED_NONE;
 3670               		.loc 1 1018 0
 3671 172e 1092 0000 		sts fs_file,__zero_reg__
1020:fs.c          ****   return 1;
 3672               		.loc 1 1020 0
 3673 1732 81E0      		ldi r24,lo8(1)
 3674               	.L289:
 3675               	/* epilogue start */
1021:fs.c          **** }
 3676               		.loc 1 1021 0
 3677 1734 DF91      		pop r29
 3678 1736 CF91      		pop r28
 3679 1738 1F91      		pop r17
 3680 173a 0F91      		pop r16
 3681 173c FF90      		pop r15
 3682 173e EF90      		pop r14
 3683 1740 DF90      		pop r13
 3684 1742 CF90      		pop r12
 3685 1744 0895      		ret
 3686               		.cfi_endproc
 3687               	.LFE28:
 3689               	.global	fs_write_end
 3691               	fs_write_end:
 3692               	.LFB29:
1027:fs.c          **** uint8_t fs_write_end(void) {
 3693               		.loc 1 1027 0
 3694               		.cfi_startproc
 3695               	/* prologue: function */
 3696               	/* frame size = 0 */
 3697               	/* stack size = 0 */
 3698               	.L__stack_usage = 0
1029:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3699               		.loc 1 1029 0
 3700 1746 8091 0000 		lds r24,fs_file
 3701 174a 8130      		cpi r24,lo8(1)
 3702 174c 01F0      		breq .L296
1029:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
 3703               		.loc 1 1029 0 is_stmt 0 discriminator 1
 3704 174e 83E0      		ldi r24,lo8(3)
 3705 1750 8093 0000 		sts lastError,r24
 3706 1754 00C0      		rjmp .L297
 3707               	.L296:
1033:fs.c          ****   if(sd_writeBuf(fs_file.sector)) goto abort;
 3708               		.loc 1 1033 0 is_stmt 1
 3709 1756 6091 0000 		lds r22,fs_file+28
 3710 175a 7091 0000 		lds r23,fs_file+28+1
 3711 175e 8091 0000 		lds r24,fs_file+28+2
 3712 1762 9091 0000 		lds r25,fs_file+28+3
 3713 1766 0E94 0000 		call sd_writeBuf
 3714               	.LVL186:
 3715 176a 8111      		cpse r24,__zero_reg__
 3716 176c 00C0      		rjmp .L297
1040:fs.c          ****   fs_file.ptr += fs_file_wlen;
 3717               		.loc 1 1040 0
 3718 176e 2091 0000 		lds r18,fs_tmp
 3719 1772 3091 0000 		lds r19,fs_tmp+1
 3720 1776 8091 0000 		lds r24,fs_file+16
 3721 177a 9091 0000 		lds r25,fs_file+16+1
 3722 177e A091 0000 		lds r26,fs_file+16+2
 3723 1782 B091 0000 		lds r27,fs_file+16+3
 3724 1786 820F      		add r24,r18
 3725 1788 931F      		adc r25,r19
 3726 178a A11D      		adc r26,__zero_reg__
 3727 178c B11D      		adc r27,__zero_reg__
 3728 178e 8093 0000 		sts fs_file+16,r24
 3729 1792 9093 0000 		sts fs_file+16+1,r25
 3730 1796 A093 0000 		sts fs_file+16+2,r26
 3731 179a B093 0000 		sts fs_file+16+3,r27
1041:fs.c          ****   fs_wtotal   -= fs_file_wlen;
 3732               		.loc 1 1041 0
 3733 179e 8091 0000 		lds r24,fs_wtotal
 3734 17a2 9091 0000 		lds r25,fs_wtotal+1
 3735 17a6 821B      		sub r24,r18
 3736 17a8 930B      		sbc r25,r19
 3737 17aa 9093 0000 		sts fs_wtotal+1,r25
 3738 17ae 8093 0000 		sts fs_wtotal,r24
1044:fs.c          ****   if(fs_wtotal == 0) {
 3739               		.loc 1 1044 0
 3740 17b2 892B      		or r24,r25
 3741 17b4 01F0      		breq .L299
 3742               	.L302:
1049:fs.c          ****   return 0;  
 3743               		.loc 1 1049 0
 3744 17b6 80E0      		ldi r24,0
 3745 17b8 0895      		ret
 3746               	.L299:
1045:fs.c          ****     if(fs_saveFileLength()) goto abort;
 3747               		.loc 1 1045 0
 3748 17ba 0E94 0000 		call fs_saveFileLength
 3749               	.LVL187:
 3750 17be 8823      		tst r24
 3751 17c0 01F0      		breq .L302
 3752               	.L297:
1052:fs.c          ****     fs_file.opened = OPENED_NONE;
 3753               		.loc 1 1052 0
 3754 17c2 1092 0000 		sts fs_file,__zero_reg__
1054:fs.c          ****   return 1;
 3755               		.loc 1 1054 0
 3756 17c6 81E0      		ldi r24,lo8(1)
1055:fs.c          **** }
 3757               		.loc 1 1055 0
 3758 17c8 0895      		ret
 3759               		.cfi_endproc
 3760               	.LFE29:
 3762               	.global	fs_move0
 3764               	fs_move0:
 3765               	.LFB31:
1071:fs.c          **** 
1072:fs.c          **** /**************************************************************************
1073:fs.c          **** *  –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É                                                 *
1074:fs.c          **** **************************************************************************/
1075:fs.c          **** 
1076:fs.c          **** uint8_t fs_move0(void) {
 3766               		.loc 1 1076 0
 3767               		.cfi_startproc
 3768 17ca 8F92      		push r8
 3769               	.LCFI113:
 3770               		.cfi_def_cfa_offset 3
 3771               		.cfi_offset 8, -2
 3772 17cc 9F92      		push r9
 3773               	.LCFI114:
 3774               		.cfi_def_cfa_offset 4
 3775               		.cfi_offset 9, -3
 3776 17ce AF92      		push r10
 3777               	.LCFI115:
 3778               		.cfi_def_cfa_offset 5
 3779               		.cfi_offset 10, -4
 3780 17d0 BF92      		push r11
 3781               	.LCFI116:
 3782               		.cfi_def_cfa_offset 6
 3783               		.cfi_offset 11, -5
 3784 17d2 CF92      		push r12
 3785               	.LCFI117:
 3786               		.cfi_def_cfa_offset 7
 3787               		.cfi_offset 12, -6
 3788 17d4 DF92      		push r13
 3789               	.LCFI118:
 3790               		.cfi_def_cfa_offset 8
 3791               		.cfi_offset 13, -7
 3792 17d6 EF92      		push r14
 3793               	.LCFI119:
 3794               		.cfi_def_cfa_offset 9
 3795               		.cfi_offset 14, -8
 3796 17d8 FF92      		push r15
 3797               	.LCFI120:
 3798               		.cfi_def_cfa_offset 10
 3799               		.cfi_offset 15, -9
 3800 17da 0F93      		push r16
 3801               	.LCFI121:
 3802               		.cfi_def_cfa_offset 11
 3803               		.cfi_offset 16, -10
 3804 17dc 1F93      		push r17
 3805               	.LCFI122:
 3806               		.cfi_def_cfa_offset 12
 3807               		.cfi_offset 17, -11
 3808 17de CF93      		push r28
 3809               	.LCFI123:
 3810               		.cfi_def_cfa_offset 13
 3811               		.cfi_offset 28, -12
 3812 17e0 DF93      		push r29
 3813               	.LCFI124:
 3814               		.cfi_def_cfa_offset 14
 3815               		.cfi_offset 29, -13
 3816 17e2 CDB7      		in r28,__SP_L__
 3817 17e4 DEB7      		in r29,__SP_H__
 3818               	.LCFI125:
 3819               		.cfi_def_cfa_register 28
 3820 17e6 6597      		sbiw r28,21
 3821               	.LCFI126:
 3822               		.cfi_def_cfa_offset 35
 3823 17e8 0FB6      		in __tmp_reg__,__SREG__
 3824 17ea F894      		cli
 3825 17ec DEBF      		out __SP_H__,r29
 3826 17ee 0FBE      		out __SREG__,__tmp_reg__
 3827 17f0 CDBF      		out __SP_L__,r28
 3828               	/* prologue: function */
 3829               	/* frame size = 21 */
 3830               	/* stack size = 33 */
 3831               	.L__stack_usage = 33
1077:fs.c          ****   uint8_t* entry;
1078:fs.c          ****   uint8_t tmp[21];
1079:fs.c          ****   WORD old_index;
1080:fs.c          ****   unsigned long old_sector, old_start_cluster;
1081:fs.c          **** 
1082:fs.c          **** #ifndef FS_DISABLE_CHECK
1083:fs.c          ****   if(fs_file.opened == OPENED_NONE) { lastError = ERR_NOT_OPENED; goto abort; }
 3832               		.loc 1 1083 0
 3833 17f2 8091 0000 		lds r24,fs_file
 3834 17f6 8111      		cpse r24,__zero_reg__
 3835 17f8 00C0      		rjmp .L304
 3836               		.loc 1 1083 0 is_stmt 0 discriminator 1
 3837 17fa 83E0      		ldi r24,lo8(3)
 3838 17fc 8093 0000 		sts lastError,r24
 3839 1800 00C0      		rjmp .L307
 3840               	.L304:
1084:fs.c          **** #endif
1085:fs.c          **** 
1086:fs.c          ****   /* –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–ø–∏—Å–∞—Ç–µ–ª—å */
1087:fs.c          ****   old_index         = fs_file.entry_index;
 3841               		.loc 1 1087 0 is_stmt 1
 3842 1802 0091 0000 		lds r16,fs_file+2
 3843 1806 1091 0000 		lds r17,fs_file+2+1
 3844               	.LVL188:
1088:fs.c          ****   old_sector        = fs_file.entry_sector;
 3845               		.loc 1 1088 0
 3846 180a C090 0000 		lds r12,fs_file+8
 3847 180e D090 0000 		lds r13,fs_file+8+1
 3848 1812 E090 0000 		lds r14,fs_file+8+2
 3849 1816 F090 0000 		lds r15,fs_file+8+3
 3850               	.LVL189:
1089:fs.c          ****   old_start_cluster = fs_file.entry_start_cluster;
 3851               		.loc 1 1089 0
 3852 181a 8090 0000 		lds r8,fs_file+12
 3853 181e 9090 0000 		lds r9,fs_file+12+1
 3854 1822 A090 0000 		lds r10,fs_file+12+2
 3855 1826 B090 0000 		lds r11,fs_file+12+3
 3856               	.LVL190:
1090:fs.c          **** 
1091:fs.c          ****   /* –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª. –í –ø–∞–ø–∫—É –æ–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –ø–æ–∑–∂–µ. 0x80
1092:fs.c          ****   if(fs_open0(OPENED_FILE | 0x80)) goto abort;
 3857               		.loc 1 1092 0
 3858 182a 81E8      		ldi r24,lo8(-127)
 3859 182c 0E94 0000 		call fs_open0
 3860               	.LVL191:
 3861 1830 8823      		tst r24
 3862 1832 01F0      		breq .L306
 3863               	.LVL192:
 3864               	.L307:
1093:fs.c          ****   
1094:fs.c          ****   /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
1095:fs.c          **** #ifndef FS_DISABLE_CHECK
1096:fs.c          ****   fs_file.opened = OPENED_NONE;
1097:fs.c          **** #ifndef FS_DISABLE_SWAP  
1098:fs.c          ****   fs_secondFile.opened = OPENED_NONE; 
1099:fs.c          **** #endif
1100:fs.c          **** #endif
1101:fs.c          ****   /* fs_file.sector —Å–æ–¥–µ–∂–∏—Ç –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö
1102:fs.c          **** 
1103:fs.c          ****   /* –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–
1104:fs.c          ****   if(sd_readBuf(old_sector)) goto abort;
1105:fs.c          ****   entry = buf + (old_index % 16) * 32;
1106:fs.c          ****   memcpy(tmp, entry+11, 21);
1107:fs.c          ****   entry[0] = 0xE5;
1108:fs.c          ****   if(sd_writeBuf(old_sector)) goto abort;
1109:fs.c          **** 
1110:fs.c          ****   /* –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É, —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–µ–≤—Ä
1111:fs.c          ****   if(sd_readBuf(fs_file.entry_sector)) goto abort;
1112:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
1113:fs.c          ****   memcpy(entry+11, tmp, 21);
1114:fs.c          ****   if(sd_writeBuf(fs_file.entry_sector)) goto abort;
1115:fs.c          **** 
1116:fs.c          ****   /* –í –ø–∞–ø–∫–µ –Ω–∞–¥–æ –µ—â–µ —Å–∫–æ—Ä—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å .. */
1117:fs.c          ****   if(entry[DIR_Attr] & AM_DIR) {
1118:fs.c          ****     fs_tmp = old_start_cluster; /* –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞—à–µ–π –ø–∞–ø–∫–∏ */
1119:fs.c          ****     fs_clust2sect();
1120:fs.c          ****     if(sd_readBuf(fs_tmp)) goto abort;
1121:fs.c          ****     fs_setEntryCluster(buf+32, fs_parent_dir_cluster); /* –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø–∞–ø–∫–∏ –ø
1122:fs.c          ****     if(sd_writeBuf(fs_tmp)) goto abort;
1123:fs.c          ****   }
1124:fs.c          ****                     
1125:fs.c          ****   return 0;
1126:fs.c          **** abort:
1127:fs.c          ****   return 1;
 3865               		.loc 1 1127 0
 3866 1834 91E0      		ldi r25,lo8(1)
 3867 1836 00C0      		rjmp .L305
 3868               	.LVL193:
 3869               	.L306:
1096:fs.c          ****   fs_file.opened = OPENED_NONE;
 3870               		.loc 1 1096 0
 3871 1838 1092 0000 		sts fs_file,__zero_reg__
1098:fs.c          ****   fs_secondFile.opened = OPENED_NONE; 
 3872               		.loc 1 1098 0
 3873 183c 1092 0000 		sts fs_secondFile,__zero_reg__
1104:fs.c          ****   if(sd_readBuf(old_sector)) goto abort;
 3874               		.loc 1 1104 0
 3875 1840 C701      		movw r24,r14
 3876 1842 B601      		movw r22,r12
 3877 1844 0E94 0000 		call sd_readBuf
 3878               	.LVL194:
 3879 1848 8111      		cpse r24,__zero_reg__
 3880 184a 00C0      		rjmp .L307
1105:fs.c          ****   entry = buf + (old_index % 16) * 32;
 3881               		.loc 1 1105 0
 3882 184c C801      		movw r24,r16
 3883 184e 8F70      		andi r24,15
 3884 1850 9927      		clr r25
 3885 1852 A5E0      		ldi r26,5
 3886               		1:
 3887 1854 880F      		lsl r24
 3888 1856 991F      		rol r25
 3889 1858 AA95      		dec r26
 3890 185a 01F4      		brne 1b
 3891 185c 8050      		subi r24,lo8(-(buf))
 3892 185e 9040      		sbci r25,hi8(-(buf))
 3893               	.LVL195:
1106:fs.c          ****   memcpy(tmp, entry+11, 21);
 3894               		.loc 1 1106 0
 3895 1860 25E1      		ldi r18,lo8(21)
 3896 1862 FC01      		movw r30,r24
 3897 1864 3B96      		adiw r30,11
 3898 1866 DE01      		movw r26,r28
 3899 1868 1196      		adiw r26,1
 3900               		0:
 3901 186a 0190      		ld r0,Z+
 3902 186c 0D92      		st X+,r0
 3903 186e 2A95      		dec r18
 3904 1870 01F4      		brne 0b
1107:fs.c          ****   entry[0] = 0xE5;
 3905               		.loc 1 1107 0
 3906 1872 25EE      		ldi r18,lo8(-27)
 3907 1874 FC01      		movw r30,r24
 3908 1876 2083      		st Z,r18
1108:fs.c          ****   if(sd_writeBuf(old_sector)) goto abort;
 3909               		.loc 1 1108 0
 3910 1878 C701      		movw r24,r14
 3911 187a B601      		movw r22,r12
 3912 187c 0E94 0000 		call sd_writeBuf
 3913               	.LVL196:
 3914 1880 8111      		cpse r24,__zero_reg__
 3915 1882 00C0      		rjmp .L307
1111:fs.c          ****   if(sd_readBuf(fs_file.entry_sector)) goto abort;
 3916               		.loc 1 1111 0
 3917 1884 6091 0000 		lds r22,fs_file+8
 3918 1888 7091 0000 		lds r23,fs_file+8+1
 3919 188c 8091 0000 		lds r24,fs_file+8+2
 3920 1890 9091 0000 		lds r25,fs_file+8+3
 3921 1894 0E94 0000 		call sd_readBuf
 3922               	.LVL197:
 3923 1898 8111      		cpse r24,__zero_reg__
 3924 189a 00C0      		rjmp .L307
1112:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
 3925               		.loc 1 1112 0
 3926 189c 0091 0000 		lds r16,fs_file+2
 3927 18a0 1091 0000 		lds r17,fs_file+2+1
 3928               	.LVL198:
 3929 18a4 0F70      		andi r16,15
 3930 18a6 1127      		clr r17
 3931 18a8 F5E0      		ldi r31,5
 3932               		1:
 3933 18aa 000F      		lsl r16
 3934 18ac 111F      		rol r17
 3935 18ae FA95      		dec r31
 3936 18b0 01F4      		brne 1b
 3937 18b2 0050      		subi r16,lo8(-(buf))
 3938 18b4 1040      		sbci r17,hi8(-(buf))
 3939               	.LVL199:
1113:fs.c          ****   memcpy(entry+11, tmp, 21);
 3940               		.loc 1 1113 0
 3941 18b6 85E1      		ldi r24,lo8(21)
 3942 18b8 FE01      		movw r30,r28
 3943 18ba 3196      		adiw r30,1
 3944 18bc D801      		movw r26,r16
 3945 18be 1B96      		adiw r26,11
 3946               		0:
 3947 18c0 0190      		ld r0,Z+
 3948 18c2 0D92      		st X+,r0
 3949 18c4 8A95      		dec r24
 3950 18c6 01F4      		brne 0b
1114:fs.c          ****   if(sd_writeBuf(fs_file.entry_sector)) goto abort;
 3951               		.loc 1 1114 0
 3952 18c8 6091 0000 		lds r22,fs_file+8
 3953 18cc 7091 0000 		lds r23,fs_file+8+1
 3954 18d0 8091 0000 		lds r24,fs_file+8+2
 3955 18d4 9091 0000 		lds r25,fs_file+8+3
 3956 18d8 0E94 0000 		call sd_writeBuf
 3957               	.LVL200:
 3958 18dc 8111      		cpse r24,__zero_reg__
 3959 18de 00C0      		rjmp .L307
1117:fs.c          ****   if(entry[DIR_Attr] & AM_DIR) {
 3960               		.loc 1 1117 0
 3961 18e0 F801      		movw r30,r16
 3962 18e2 8385      		ldd r24,Z+11
 3963 18e4 84FF      		sbrs r24,4
 3964 18e6 00C0      		rjmp .L309
1118:fs.c          ****     fs_tmp = old_start_cluster; /* –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞—à–µ–π –ø–∞–ø–∫–∏ */
 3965               		.loc 1 1118 0
 3966 18e8 8092 0000 		sts fs_tmp,r8
 3967 18ec 9092 0000 		sts fs_tmp+1,r9
 3968 18f0 A092 0000 		sts fs_tmp+2,r10
 3969 18f4 B092 0000 		sts fs_tmp+3,r11
1119:fs.c          ****     fs_clust2sect();
 3970               		.loc 1 1119 0
 3971 18f8 0E94 0000 		call fs_clust2sect
 3972               	.LVL201:
1120:fs.c          ****     if(sd_readBuf(fs_tmp)) goto abort;
 3973               		.loc 1 1120 0
 3974 18fc 6091 0000 		lds r22,fs_tmp
 3975 1900 7091 0000 		lds r23,fs_tmp+1
 3976 1904 8091 0000 		lds r24,fs_tmp+2
 3977 1908 9091 0000 		lds r25,fs_tmp+3
 3978 190c 0E94 0000 		call sd_readBuf
 3979               	.LVL202:
 3980 1910 8111      		cpse r24,__zero_reg__
 3981 1912 00C0      		rjmp .L307
1121:fs.c          ****     fs_setEntryCluster(buf+32, fs_parent_dir_cluster); /* –ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø–∞–ø–∫–∏ –ø
 3982               		.loc 1 1121 0
 3983 1914 8091 0000 		lds r24,fs_file+28
 3984 1918 9091 0000 		lds r25,fs_file+28+1
 3985 191c A091 0000 		lds r26,fs_file+28+2
 3986 1920 B091 0000 		lds r27,fs_file+28+3
 3987               	.LVL203:
 3988               	.LBB83:
 3989               	.LBB84:
 492:fs.c          ****   LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
 3990               		.loc 1 492 0
 3991 1924 9093 0000 		sts buf+58+1,r25
 3992 1928 8093 0000 		sts buf+58,r24
 493:fs.c          ****   LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
 3993               		.loc 1 493 0
 3994 192c B093 0000 		sts buf+52+1,r27
 3995 1930 A093 0000 		sts buf+52,r26
 3996               	.LBE84:
 3997               	.LBE83:
1122:fs.c          ****     if(sd_writeBuf(fs_tmp)) goto abort;
 3998               		.loc 1 1122 0
 3999 1934 6091 0000 		lds r22,fs_tmp
 4000 1938 7091 0000 		lds r23,fs_tmp+1
 4001 193c 8091 0000 		lds r24,fs_tmp+2
 4002 1940 9091 0000 		lds r25,fs_tmp+3
 4003 1944 0E94 0000 		call sd_writeBuf
 4004               	.LVL204:
 4005 1948 91E0      		ldi r25,lo8(1)
 4006 194a 8111      		cpse r24,__zero_reg__
 4007 194c 00C0      		rjmp .L305
 4008               	.LVL205:
 4009               	.L309:
1125:fs.c          ****   return 0;
 4010               		.loc 1 1125 0
 4011 194e 90E0      		ldi r25,0
 4012               	.LVL206:
 4013               	.L305:
1128:fs.c          **** }
 4014               		.loc 1 1128 0
 4015 1950 892F      		mov r24,r25
 4016               	/* epilogue start */
 4017 1952 6596      		adiw r28,21
 4018 1954 0FB6      		in __tmp_reg__,__SREG__
 4019 1956 F894      		cli
 4020 1958 DEBF      		out __SP_H__,r29
 4021 195a 0FBE      		out __SREG__,__tmp_reg__
 4022 195c CDBF      		out __SP_L__,r28
 4023 195e DF91      		pop r29
 4024 1960 CF91      		pop r28
 4025 1962 1F91      		pop r17
 4026 1964 0F91      		pop r16
 4027 1966 FF90      		pop r15
 4028 1968 EF90      		pop r14
 4029 196a DF90      		pop r13
 4030 196c CF90      		pop r12
 4031 196e BF90      		pop r11
 4032 1970 AF90      		pop r10
 4033 1972 9F90      		pop r9
 4034 1974 8F90      		pop r8
 4035 1976 0895      		ret
 4036               		.cfi_endproc
 4037               	.LFE31:
 4039               	.global	fs_move
 4041               	fs_move:
 4042               	.LFB32:
1129:fs.c          **** 
1130:fs.c          **** uint8_t fs_move(const char* from, const char* to) {
 4043               		.loc 1 1130 0
 4044               		.cfi_startproc
 4045               	.LVL207:
 4046 1978 CF93      		push r28
 4047               	.LCFI127:
 4048               		.cfi_def_cfa_offset 3
 4049               		.cfi_offset 28, -2
 4050 197a DF93      		push r29
 4051               	.LCFI128:
 4052               		.cfi_def_cfa_offset 4
 4053               		.cfi_offset 29, -3
 4054               	/* prologue: function */
 4055               	/* frame size = 0 */
 4056               	/* stack size = 2 */
 4057               	.L__stack_usage = 2
 4058 197c EB01      		movw r28,r22
1131:fs.c          ****   strcpy((char*)buf, from);
 4059               		.loc 1 1131 0
 4060 197e BC01      		movw r22,r24
 4061               	.LVL208:
 4062 1980 80E0      		ldi r24,lo8(buf)
 4063 1982 90E0      		ldi r25,hi8(buf)
 4064               	.LVL209:
 4065 1984 0E94 0000 		call strcpy
 4066               	.LVL210:
1132:fs.c          ****   if(fs_openany()) return 1;
 4067               		.loc 1 1132 0
 4068 1988 80E0      		ldi r24,0
 4069 198a 0E94 0000 		call fs_open0
 4070               	.LVL211:
 4071 198e 8111      		cpse r24,__zero_reg__
 4072 1990 00C0      		rjmp .L311
1133:fs.c          ****   strcpy((char*)buf, to);
 4073               		.loc 1 1133 0
 4074 1992 BE01      		movw r22,r28
 4075 1994 80E0      		ldi r24,lo8(buf)
 4076 1996 90E0      		ldi r25,hi8(buf)
 4077 1998 0E94 0000 		call strcpy
 4078               	.LVL212:
 4079               	/* epilogue start */
1134:fs.c          ****   return fs_move0();
1135:fs.c          **** }
 4080               		.loc 1 1135 0
 4081 199c DF91      		pop r29
 4082 199e CF91      		pop r28
 4083               	.LVL213:
1134:fs.c          ****   return fs_move0();
 4084               		.loc 1 1134 0
 4085 19a0 0C94 0000 		jmp fs_move0
 4086               	.LVL214:
 4087               	.L311:
 4088               		.loc 1 1135 0
 4089 19a4 81E0      		ldi r24,lo8(1)
 4090               	/* epilogue start */
 4091 19a6 DF91      		pop r29
 4092 19a8 CF91      		pop r28
 4093               	.LVL215:
 4094 19aa 0895      		ret
 4095               		.cfi_endproc
 4096               	.LFE32:
 4098               	.global	fs_delete
 4100               	fs_delete:
 4101               	.LFB33:
1136:fs.c          **** 
1137:fs.c          **** /**************************************************************************
1138:fs.c          **** *  –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É                                          
1139:fs.c          **** *  –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ buf –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å FS_MAXFI
1140:fs.c          **** *  –≤–∫–ª—é—á–∞—è —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä                                                     *
1141:fs.c          **** **************************************************************************/
1142:fs.c          **** 
1143:fs.c          **** uint8_t fs_delete(void) {
 4102               		.loc 1 1143 0
 4103               		.cfi_startproc
 4104 19ac CF92      		push r12
 4105               	.LCFI129:
 4106               		.cfi_def_cfa_offset 3
 4107               		.cfi_offset 12, -2
 4108 19ae DF92      		push r13
 4109               	.LCFI130:
 4110               		.cfi_def_cfa_offset 4
 4111               		.cfi_offset 13, -3
 4112 19b0 EF92      		push r14
 4113               	.LCFI131:
 4114               		.cfi_def_cfa_offset 5
 4115               		.cfi_offset 14, -4
 4116 19b2 FF92      		push r15
 4117               	.LCFI132:
 4118               		.cfi_def_cfa_offset 6
 4119               		.cfi_offset 15, -5
 4120 19b4 CF93      		push r28
 4121               	.LCFI133:
 4122               		.cfi_def_cfa_offset 7
 4123               		.cfi_offset 28, -6
 4124 19b6 DF93      		push r29
 4125               	.LCFI134:
 4126               		.cfi_def_cfa_offset 8
 4127               		.cfi_offset 29, -7
 4128               	/* prologue: function */
 4129               	/* frame size = 0 */
 4130               	/* stack size = 6 */
 4131               	.L__stack_usage = 6
1144:fs.c          ****   unsigned long entrySector;
1145:fs.c          ****   uint8_t* entry;
1146:fs.c          ****      
1147:fs.c          ****   /* –¢–∞–º –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω fs_type == FS_ERROR */
1148:fs.c          ****   if(fs_openany()) goto abort;
 4132               		.loc 1 1148 0
 4133 19b8 80E0      		ldi r24,0
 4134 19ba 0E94 0000 		call fs_open0
 4135               	.LVL216:
 4136 19be 8111      		cpse r24,__zero_reg__
 4137 19c0 00C0      		rjmp .L314
1149:fs.c          ****     
1150:fs.c          ****   /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
1151:fs.c          ****   fs_file.opened = OPENED_NONE;
 4138               		.loc 1 1151 0
 4139 19c2 1092 0000 		sts fs_file,__zero_reg__
1152:fs.c          **** #ifndef FS_DISABLE_SWAP  
1153:fs.c          ****   fs_secondFile.opened = OPENED_NONE; 
 4140               		.loc 1 1153 0
 4141 19c6 1092 0000 		sts fs_secondFile,__zero_reg__
1154:fs.c          **** #endif
1155:fs.c          ****                                                                    
1156:fs.c          ****   /* –ö–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É —É–¥–∞–ª—è—Ç—å –Ω–µ–ª—å–∑—è */
1157:fs.c          ****   if(FS_DIRENTRY[0] == 0) { lastError = ERR_NO_PATH; goto abort; } 
 4142               		.loc 1 1157 0
 4143 19ca 8091 0000 		lds r24,buf+480
 4144 19ce 8111      		cpse r24,__zero_reg__
 4145 19d0 00C0      		rjmp .L315
 4146               		.loc 1 1157 0 is_stmt 0 discriminator 1
 4147 19d2 84E0      		ldi r24,lo8(4)
 4148 19d4 00C0      		rjmp .L324
 4149               	.L315:
1158:fs.c          **** 
1159:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, —Ç–∞–∫ –∫–∞–∫ 
1160:fs.c          ****   entrySector = fs_file.entry_sector;
 4150               		.loc 1 1160 0 is_stmt 1
 4151 19d6 C090 0000 		lds r12,fs_file+8
 4152 19da D090 0000 		lds r13,fs_file+8+1
 4153 19de E090 0000 		lds r14,fs_file+8+2
 4154 19e2 F090 0000 		lds r15,fs_file+8+3
 4155               	.LVL217:
1161:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
 4156               		.loc 1 1161 0
 4157 19e6 C091 0000 		lds r28,fs_file+2
 4158 19ea D091 0000 		lds r29,fs_file+2+1
 4159               	.LVL218:
1162:fs.c          **** 
1163:fs.c          ****   /* –í –ø–∞–ø–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–∞–π–ª–æ–≤ */
1164:fs.c          ****   if(FS_DIRENTRY[DIR_Attr] & AM_DIR) {
 4160               		.loc 1 1164 0
 4161 19ee 8091 0000 		lds r24,buf+491
 4162 19f2 84FF      		sbrs r24,4
 4163 19f4 00C0      		rjmp .L316
1165:fs.c          ****     /* –ü–µ—Ä–µ–º–∞—Ç—ã–≤–µ–º –ø–∞–ø–∫—É –Ω–∞ –Ω–∞—á–∞–ª–æ */
1166:fs.c          ****     fs_file.entry_able = 0;                                                      
 4164               		.loc 1 1166 0
 4165 19f6 1092 0000 		sts fs_file+1,__zero_reg__
1167:fs.c          ****     /* –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É */
1168:fs.c          ****     /* fs_file.entry_start_cluster —Å–æ—Ö—Ä—è–Ω—è–µ—Ç—Å—è (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç
1169:fs.c          ****     if(fs_readdir_nocheck()) goto abort;
 4166               		.loc 1 1169 0
 4167 19fa 0E94 0000 		call fs_readdir_nocheck
 4168               	.LVL219:
 4169 19fe 8111      		cpse r24,__zero_reg__
 4170 1a00 00C0      		rjmp .L314
1170:fs.c          ****     /* –ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ –æ—à–∏–±–∫–∞ */                                        
1171:fs.c          ****     if(fs_file.entry_able) { lastError = ERR_DIR_NOT_EMPTY; goto abort; } 
 4171               		.loc 1 1171 0
 4172 1a02 8091 0000 		lds r24,fs_file+1
 4173 1a06 8823      		tst r24
 4174 1a08 01F0      		breq .L316
 4175               		.loc 1 1171 0 is_stmt 0 discriminator 1
 4176 1a0a 87E0      		ldi r24,lo8(7)
 4177               	.LVL220:
 4178               	.L324:
 4179 1a0c 8093 0000 		sts lastError,r24
 4180 1a10 00C0      		rjmp .L314
 4181               	.LVL221:
 4182               	.L316:
1172:fs.c          ****   }
1173:fs.c          **** 
1174:fs.c          ****   /* –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å */
1175:fs.c          ****   if(sd_readBuf(entrySector)) goto abort;
 4183               		.loc 1 1175 0 is_stmt 1
 4184 1a12 C701      		movw r24,r14
 4185 1a14 B601      		movw r22,r12
 4186 1a16 0E94 0000 		call sd_readBuf
 4187               	.LVL222:
 4188 1a1a 8111      		cpse r24,__zero_reg__
 4189 1a1c 00C0      		rjmp .L314
1161:fs.c          ****   entry = buf + (fs_file.entry_index % 16) * 32;
 4190               		.loc 1 1161 0
 4191 1a1e FE01      		movw r30,r28
 4192 1a20 EF70      		andi r30,15
 4193 1a22 FF27      		clr r31
1176:fs.c          ****   entry[0] = 0xE5;
 4194               		.loc 1 1176 0
 4195 1a24 B5E0      		ldi r27,5
 4196               		1:
 4197 1a26 EE0F      		lsl r30
 4198 1a28 FF1F      		rol r31
 4199 1a2a BA95      		dec r27
 4200 1a2c 01F4      		brne 1b
 4201 1a2e E050      		subi r30,lo8(-(buf))
 4202 1a30 F040      		sbci r31,hi8(-(buf))
 4203 1a32 85EE      		ldi r24,lo8(-27)
 4204 1a34 8083      		st Z,r24
1177:fs.c          ****   if(sd_writeBuf(entrySector)) goto abort;
 4205               		.loc 1 1177 0
 4206 1a36 C701      		movw r24,r14
 4207 1a38 B601      		movw r22,r12
 4208 1a3a 0E94 0000 		call sd_writeBuf
 4209               	.LVL223:
 4210 1a3e 8111      		cpse r24,__zero_reg__
 4211 1a40 00C0      		rjmp .L314
1178:fs.c          **** 
1179:fs.c          ****   /* –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
1180:fs.c          ****   fs_tmp = fs_file.entry_start_cluster;
 4212               		.loc 1 1180 0
 4213 1a42 8091 0000 		lds r24,fs_file+12
 4214 1a46 9091 0000 		lds r25,fs_file+12+1
 4215 1a4a A091 0000 		lds r26,fs_file+12+2
 4216 1a4e B091 0000 		lds r27,fs_file+12+3
 4217 1a52 8093 0000 		sts fs_tmp,r24
 4218 1a56 9093 0000 		sts fs_tmp+1,r25
 4219 1a5a A093 0000 		sts fs_tmp+2,r26
 4220 1a5e B093 0000 		sts fs_tmp+3,r27
 4221               	/* epilogue start */
1181:fs.c          ****   return fs_freeChain();  
1182:fs.c          **** abort:
1183:fs.c          ****   return 1;
1184:fs.c          **** }
 4222               		.loc 1 1184 0
 4223 1a62 DF91      		pop r29
 4224 1a64 CF91      		pop r28
 4225               	.LVL224:
 4226 1a66 FF90      		pop r15
 4227 1a68 EF90      		pop r14
 4228 1a6a DF90      		pop r13
 4229 1a6c CF90      		pop r12
 4230               	.LVL225:
1181:fs.c          ****   return fs_freeChain();  
 4231               		.loc 1 1181 0
 4232 1a6e 0C94 0000 		jmp fs_freeChain
 4233               	.LVL226:
 4234               	.L314:
 4235               		.loc 1 1184 0
 4236 1a72 81E0      		ldi r24,lo8(1)
 4237               	/* epilogue start */
 4238 1a74 DF91      		pop r29
 4239 1a76 CF91      		pop r28
 4240 1a78 FF90      		pop r15
 4241 1a7a EF90      		pop r14
 4242 1a7c DF90      		pop r13
 4243 1a7e CF90      		pop r12
 4244 1a80 0895      		ret
 4245               		.cfi_endproc
 4246               	.LFE33:
 4248               	.global	fs_write_eof
 4250               	fs_write_eof:
 4251               	.LFB34:
1185:fs.c          **** 
1186:fs.c          **** /**************************************************************************
1187:fs.c          **** *  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞                                                 *
1188:fs.c          **** **************************************************************************/
1189:fs.c          **** 
1190:fs.c          **** uint8_t fs_write_eof(void) {
 4252               		.loc 1 1190 0
 4253               		.cfi_startproc
 4254               	/* prologue: function */
 4255               	/* frame size = 0 */
 4256               	/* stack size = 0 */
 4257               	.L__stack_usage = 0
1191:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */
1192:fs.c          **** #ifndef FS_DISABLE_CHECK
1193:fs.c          ****   if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }  
 4258               		.loc 1 1193 0
 4259 1a82 8091 0000 		lds r24,fs_file
 4260 1a86 8130      		cpi r24,lo8(1)
 4261 1a88 01F0      		breq .L326
 4262               		.loc 1 1193 0 is_stmt 0 discriminator 1
 4263 1a8a 83E0      		ldi r24,lo8(3)
 4264 1a8c 8093 0000 		sts lastError,r24
 4265 1a90 00C0      		rjmp .L327
 4266               	.L326:
1194:fs.c          **** #endif
1195:fs.c          **** 
1196:fs.c          ****   /* –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ª–∏–±–æ FAT, –ª–∏–±–æ –æ–ø–∏—Å–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞. */
1197:fs.c          ****   if(fs_file.ptr == 0) {
 4267               		.loc 1 1197 0 is_stmt 1
 4268 1a92 8091 0000 		lds r24,fs_file+16
 4269 1a96 9091 0000 		lds r25,fs_file+16+1
 4270 1a9a A091 0000 		lds r26,fs_file+16+2
 4271 1a9e B091 0000 		lds r27,fs_file+16+3
 4272 1aa2 892B      		or r24,r25
 4273 1aa4 8A2B      		or r24,r26
 4274 1aa6 8B2B      		or r24,r27
 4275 1aa8 01F4      		brne .L328
1198:fs.c          ****     /* –£–¥–∞–ª–µ–º –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Ñ–∞–π–ª–∞ */
1199:fs.c          ****     fs_tmp = fs_file.entry_start_cluster;
 4276               		.loc 1 1199 0
 4277 1aaa 8091 0000 		lds r24,fs_file+12
 4278 1aae 9091 0000 		lds r25,fs_file+12+1
 4279 1ab2 A091 0000 		lds r26,fs_file+12+2
 4280 1ab6 B091 0000 		lds r27,fs_file+12+3
 4281 1aba 8093 0000 		sts fs_tmp,r24
 4282 1abe 9093 0000 		sts fs_tmp+1,r25
 4283 1ac2 A093 0000 		sts fs_tmp+2,r26
 4284 1ac6 B093 0000 		sts fs_tmp+3,r27
1200:fs.c          ****     fs_file.entry_start_cluster = 0;
 4285               		.loc 1 1200 0
 4286 1aca 1092 0000 		sts fs_file+12,__zero_reg__
 4287 1ace 1092 0000 		sts fs_file+12+1,__zero_reg__
 4288 1ad2 1092 0000 		sts fs_file+12+2,__zero_reg__
 4289 1ad6 1092 0000 		sts fs_file+12+3,__zero_reg__
 4290 1ada 00C0      		rjmp .L329
 4291               	.L328:
1201:fs.c          ****   } else {
1202:fs.c          ****     /* –≠—Ç–æ—Ç –∫–ª–∞—Å—Ç–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π. */
1203:fs.c          ****     fs_tmp = LAST_CLUSTER;
 4292               		.loc 1 1203 0
 4293 1adc 8FEF      		ldi r24,lo8(-1)
 4294 1ade 9FEF      		ldi r25,lo8(-1)
 4295 1ae0 AFEF      		ldi r26,lo8(-1)
 4296 1ae2 BFE0      		ldi r27,lo8(15)
 4297 1ae4 8093 0000 		sts fs_tmp,r24
 4298 1ae8 9093 0000 		sts fs_tmp+1,r25
 4299 1aec A093 0000 		sts fs_tmp+2,r26
 4300 1af0 B093 0000 		sts fs_tmp+3,r27
1204:fs.c          ****     if(fs_setNextCluster(fs_file.cluster)) goto abort; /* fs_tmp –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª
 4301               		.loc 1 1204 0
 4302 1af4 6091 0000 		lds r22,fs_file+24
 4303 1af8 7091 0000 		lds r23,fs_file+24+1
 4304 1afc 8091 0000 		lds r24,fs_file+24+2
 4305 1b00 9091 0000 		lds r25,fs_file+24+3
 4306 1b04 0E94 0000 		call fs_setNextCluster
 4307               	.LVL227:
 4308 1b08 8111      		cpse r24,__zero_reg__
 4309 1b0a 00C0      		rjmp .L327
 4310               	.L329:
1205:fs.c          ****   }
1206:fs.c          **** 
1207:fs.c          ****   /* –£–¥–∞–ª–µ–º –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ. (–æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—
1208:fs.c          ****   if(fs_freeChain()) goto abort;
 4311               		.loc 1 1208 0
 4312 1b0c 0E94 0000 		call fs_freeChain
 4313               	.LVL228:
 4314 1b10 8111      		cpse r24,__zero_reg__
 4315 1b12 00C0      		rjmp .L327
1209:fs.c          **** 
1210:fs.c          ****   /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–Ω—É –∏ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä */
1211:fs.c          ****   fs_file.size    = fs_file.ptr;
 4316               		.loc 1 1211 0
 4317 1b14 8091 0000 		lds r24,fs_file+16
 4318 1b18 9091 0000 		lds r25,fs_file+16+1
 4319 1b1c A091 0000 		lds r26,fs_file+16+2
 4320 1b20 B091 0000 		lds r27,fs_file+16+3
 4321 1b24 8093 0000 		sts fs_file+20,r24
 4322 1b28 9093 0000 		sts fs_file+20+1,r25
 4323 1b2c A093 0000 		sts fs_file+20+2,r26
 4324 1b30 B093 0000 		sts fs_file+20+3,r27
1212:fs.c          ****   fs_file.changed = 1;
 4325               		.loc 1 1212 0
 4326 1b34 81E0      		ldi r24,lo8(1)
 4327 1b36 8093 0000 		sts fs_file+32,r24
1213:fs.c          ****   if(!fs_saveFileLength()) return 0;
 4328               		.loc 1 1213 0
 4329 1b3a 0E94 0000 		call fs_saveFileLength
 4330               	.LVL229:
 4331 1b3e 8823      		tst r24
 4332 1b40 01F0      		breq .L332
 4333               	.L327:
1214:fs.c          **** 
1215:fs.c          **** abort:
1216:fs.c          **** #ifndef FS_DISABLE_CHECK
1217:fs.c          ****   fs_file.opened = OPENED_NONE;
 4334               		.loc 1 1217 0
 4335 1b42 1092 0000 		sts fs_file,__zero_reg__
1218:fs.c          **** #endif
1219:fs.c          ****   return 1;
 4336               		.loc 1 1219 0
 4337 1b46 81E0      		ldi r24,lo8(1)
 4338 1b48 0895      		ret
 4339               	.L332:
1213:fs.c          ****   if(!fs_saveFileLength()) return 0;
 4340               		.loc 1 1213 0
 4341 1b4a 80E0      		ldi r24,0
1220:fs.c          **** }
 4342               		.loc 1 1220 0
 4343 1b4c 0895      		ret
 4344               		.cfi_endproc
 4345               	.LFE34:
 4347               	.global	fs_write
 4349               	fs_write:
 4350               	.LFB35:
1221:fs.c          **** 
1222:fs.c          **** /**************************************************************************
1223:fs.c          **** *  –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª                                                        *
1224:fs.c          **** **************************************************************************/
1225:fs.c          **** 
1226:fs.c          **** uint8_t fs_write(CONST uint8_t* ptr, WORD len) {
 4351               		.loc 1 1226 0
 4352               		.cfi_startproc
 4353               	.LVL230:
 4354 1b4e 0F93      		push r16
 4355               	.LCFI135:
 4356               		.cfi_def_cfa_offset 3
 4357               		.cfi_offset 16, -2
 4358 1b50 1F93      		push r17
 4359               	.LCFI136:
 4360               		.cfi_def_cfa_offset 4
 4361               		.cfi_offset 17, -3
 4362 1b52 CF93      		push r28
 4363               	.LCFI137:
 4364               		.cfi_def_cfa_offset 5
 4365               		.cfi_offset 28, -4
 4366 1b54 DF93      		push r29
 4367               	.LCFI138:
 4368               		.cfi_def_cfa_offset 6
 4369               		.cfi_offset 29, -5
 4370               	/* prologue: function */
 4371               	/* frame size = 0 */
 4372               	/* stack size = 4 */
 4373               	.L__stack_usage = 4
 4374 1b56 EC01      		movw r28,r24
1227:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è
1228:fs.c          **** 
1229:fs.c          ****   /* –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ */
1230:fs.c          ****   if(len == 0) return fs_write_eof();
 4375               		.loc 1 1230 0
 4376 1b58 6115      		cp r22,__zero_reg__
 4377 1b5a 7105      		cpc r23,__zero_reg__
 4378 1b5c 01F4      		brne .L337
 4379               	/* epilogue start */
1231:fs.c          **** 
1232:fs.c          ****   fs_wtotal = len;
1233:fs.c          ****   do {
1234:fs.c          ****     if(fs_write_start()) goto abort;
1235:fs.c          ****     memcpy(fs_file_wbuf, ptr, fs_file_wlen);
1236:fs.c          ****     ptr += fs_file_wlen;
1237:fs.c          ****     if(fs_write_end()) goto abort;
1238:fs.c          ****   } while(fs_wtotal);
1239:fs.c          **** 
1240:fs.c          ****   return 0;
1241:fs.c          **** abort:
1242:fs.c          ****   return 1;
1243:fs.c          **** }
 4380               		.loc 1 1243 0 discriminator 1
 4381 1b5e DF91      		pop r29
 4382 1b60 CF91      		pop r28
 4383 1b62 1F91      		pop r17
 4384 1b64 0F91      		pop r16
1230:fs.c          ****   if(len == 0) return fs_write_eof();
 4385               		.loc 1 1230 0 discriminator 1
 4386 1b66 0C94 0000 		jmp fs_write_eof
 4387               	.LVL231:
 4388               	.L337:
1232:fs.c          ****   fs_wtotal = len;
 4389               		.loc 1 1232 0
 4390 1b6a 7093 0000 		sts fs_wtotal+1,r23
 4391 1b6e 6093 0000 		sts fs_wtotal,r22
 4392               	.LVL232:
 4393               	.L341:
1234:fs.c          ****     if(fs_write_start()) goto abort;
 4394               		.loc 1 1234 0
 4395 1b72 0E94 0000 		call fs_write_start
 4396               	.LVL233:
 4397 1b76 8823      		tst r24
 4398 1b78 01F0      		breq .L338
 4399               	.L340:
1242:fs.c          ****   return 1;
 4400               		.loc 1 1242 0
 4401 1b7a 81E0      		ldi r24,lo8(1)
 4402 1b7c 00C0      		rjmp .L339
 4403               	.L338:
1235:fs.c          ****     memcpy(fs_file_wbuf, ptr, fs_file_wlen);
 4404               		.loc 1 1235 0
 4405 1b7e 0091 0000 		lds r16,fs_tmp
 4406 1b82 1091 0000 		lds r17,fs_tmp+1
 4407 1b86 8091 0000 		lds r24,fs_tmp+2
 4408 1b8a 9091 0000 		lds r25,fs_tmp+2+1
 4409 1b8e A801      		movw r20,r16
 4410 1b90 BE01      		movw r22,r28
 4411 1b92 8050      		subi r24,lo8(-(buf))
 4412 1b94 9040      		sbci r25,hi8(-(buf))
 4413 1b96 0E94 0000 		call memcpy
 4414               	.LVL234:
1236:fs.c          ****     ptr += fs_file_wlen;
 4415               		.loc 1 1236 0
 4416 1b9a C00F      		add r28,r16
 4417 1b9c D11F      		adc r29,r17
 4418               	.LVL235:
1237:fs.c          ****     if(fs_write_end()) goto abort;
 4419               		.loc 1 1237 0
 4420 1b9e 0E94 0000 		call fs_write_end
 4421               	.LVL236:
 4422 1ba2 8111      		cpse r24,__zero_reg__
 4423 1ba4 00C0      		rjmp .L340
1238:fs.c          ****   } while(fs_wtotal);
 4424               		.loc 1 1238 0
 4425 1ba6 8091 0000 		lds r24,fs_wtotal
 4426 1baa 9091 0000 		lds r25,fs_wtotal+1
 4427 1bae 892B      		or r24,r25
 4428 1bb0 01F4      		brne .L341
1240:fs.c          ****   return 0;
 4429               		.loc 1 1240 0
 4430 1bb2 80E0      		ldi r24,0
 4431               	.L339:
 4432               	/* epilogue start */
 4433               		.loc 1 1243 0
 4434 1bb4 DF91      		pop r29
 4435 1bb6 CF91      		pop r28
 4436               	.LVL237:
 4437 1bb8 1F91      		pop r17
 4438 1bba 0F91      		pop r16
 4439 1bbc 0895      		ret
 4440               		.cfi_endproc
 4441               	.LFE35:
 4443               	.global	fs_swap
 4445               	fs_swap:
 4446               	.LFB36:
1244:fs.c          **** 
1245:fs.c          **** /**************************************************************************
1246:fs.c          **** *  –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã                                                      *
1247:fs.c          **** **************************************************************************/
1248:fs.c          **** 
1249:fs.c          **** #ifndef FS_DISABLE_SWAP
1250:fs.c          **** void fs_swap(void) {
 4447               		.loc 1 1250 0
 4448               		.cfi_startproc
 4449               	/* prologue: function */
 4450               	/* frame size = 0 */
 4451               	/* stack size = 0 */
 4452               	.L__stack_usage = 0
 4453               	.LVL238:
 4454 1bbe A0E0      		ldi r26,lo8(fs_file)
 4455 1bc0 B0E0      		ldi r27,hi8(fs_file)
1251:fs.c          ****   /* –≠—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ –ü–ó–£, —á–µ–º —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ memcpy */
1252:fs.c          ****   uint8_t t, *a = (uint8_t*)&fs_file, *b = (uint8_t*)&fs_secondFile, n = sizeof(File);  
 4456               		.loc 1 1252 0
 4457 1bc2 E0E0      		ldi r30,lo8(fs_secondFile)
 4458 1bc4 F0E0      		ldi r31,hi8(fs_secondFile)
 4459               	.LVL239:
 4460               	.L345:
1253:fs.c          ****   do {
1254:fs.c          ****     t=*a, *a=*b, *b=t; ++a; ++b;
 4461               		.loc 1 1254 0 discriminator 1
 4462 1bc6 8C91      		ld r24,X
 4463               	.LVL240:
 4464 1bc8 9081      		ld r25,Z
 4465 1bca 9D93      		st X+,r25
 4466               	.LVL241:
 4467 1bcc 8193      		st Z+,r24
 4468               	.LVL242:
1255:fs.c          ****   } while(--n);
 4469               		.loc 1 1255 0 discriminator 1
 4470 1bce 80E0      		ldi r24,hi8(fs_secondFile+33)
 4471 1bd0 E030      		cpi r30,lo8(fs_secondFile+33)
 4472 1bd2 F807      		cpc r31,r24
 4473               	.LVL243:
 4474 1bd4 01F4      		brne .L345
 4475               	/* epilogue start */
1256:fs.c          **** }
 4476               		.loc 1 1256 0
 4477 1bd6 0895      		ret
 4478               		.cfi_endproc
 4479               	.LFE36:
 4481               	.global	fs_getfree
 4483               	fs_getfree:
 4484               	.LFB37:
1257:fs.c          **** #endif
1258:fs.c          **** 
1259:fs.c          **** /**************************************************************************
1260:fs.c          **** *  –†–∞—Å—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞                                                *
1261:fs.c          **** *                                                                         *
1262:fs.c          **** *  –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π fs_tmp –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö                       
1263:fs.c          **** *  –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª                                                 *
1264:fs.c          **** **************************************************************************/
1265:fs.c          **** 
1266:fs.c          **** #ifndef FS_DISABLE_GETFREESPACE
1267:fs.c          **** uint8_t fs_getfree(void) {
 4485               		.loc 1 1267 0
 4486               		.cfi_startproc
 4487               	/* prologue: function */
 4488               	/* frame size = 0 */
 4489               	/* stack size = 0 */
 4490               	.L__stack_usage = 0
1268:fs.c          ****   /* –ú—ã –∏—Å–ø–æ—Ä—Ç–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é fs_file.sector, –ø–æ—ç—Ç–æ–º—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —
1269:fs.c          ****   fs_file.opened = OPENED_NONE;  
 4491               		.loc 1 1269 0
 4492 1bd8 1092 0000 		sts fs_file,__zero_reg__
1270:fs.c          **** 
1271:fs.c          ****   /* –ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –±—É–¥–µ—Ç –≤ fs_file.sector */  
1272:fs.c          ****   fs_file.sector = 0;  
 4493               		.loc 1 1272 0
 4494 1bdc 1092 0000 		sts fs_file+28,__zero_reg__
 4495 1be0 1092 0000 		sts fs_file+28+1,__zero_reg__
 4496 1be4 1092 0000 		sts fs_file+28+2,__zero_reg__
 4497 1be8 1092 0000 		sts fs_file+28+3,__zero_reg__
1273:fs.c          ****   if(fs_allocCluster(1)) return 1; 
 4498               		.loc 1 1273 0
 4499 1bec 81E0      		ldi r24,lo8(1)
 4500 1bee 0E94 0000 		call fs_allocCluster
 4501               	.LVL244:
 4502 1bf2 8111      		cpse r24,__zero_reg__
 4503 1bf4 00C0      		rjmp .L348
1274:fs.c          **** 
1275:fs.c          ****   /* –ü–µ—Ä–µ—Å—á–µ—Ç –≤ –º–µ–≥–∞–±–∞–π—Ç—ã */  
1276:fs.c          ****   fs_tmp = ((fs_file.sector >> 10) + 1) / 2 * fs_csize;
 4504               		.loc 1 1276 0
 4505 1bf6 2091 0000 		lds r18,fs_file+28
 4506 1bfa 3091 0000 		lds r19,fs_file+28+1
 4507 1bfe 4091 0000 		lds r20,fs_file+28+2
 4508 1c02 5091 0000 		lds r21,fs_file+28+3
 4509 1c06 8AE0      		ldi r24,10
 4510               		1:
 4511 1c08 5695      		lsr r21
 4512 1c0a 4795      		ror r20
 4513 1c0c 3795      		ror r19
 4514 1c0e 2795      		ror r18
 4515 1c10 8A95      		dec r24
 4516 1c12 01F4      		brne 1b
 4517 1c14 2F5F      		subi r18,-1
 4518 1c16 3F4F      		sbci r19,-1
 4519 1c18 4F4F      		sbci r20,-1
 4520 1c1a 5F4F      		sbci r21,-1
 4521 1c1c 5695      		lsr r21
 4522 1c1e 4795      		ror r20
 4523 1c20 3795      		ror r19
 4524 1c22 2795      		ror r18
 4525 1c24 A091 0000 		lds r26,fs_csize
 4526 1c28 B0E0      		ldi r27,0
 4527 1c2a 0E94 0000 		call __muluhisi3
 4528 1c2e 6093 0000 		sts fs_tmp,r22
 4529 1c32 7093 0000 		sts fs_tmp+1,r23
 4530 1c36 8093 0000 		sts fs_tmp+2,r24
 4531 1c3a 9093 0000 		sts fs_tmp+3,r25
1277:fs.c          **** 
1278:fs.c          ****   return 0;
 4532               		.loc 1 1278 0
 4533 1c3e 80E0      		ldi r24,0
 4534 1c40 0895      		ret
 4535               	.L348:
1273:fs.c          ****   if(fs_allocCluster(1)) return 1; 
 4536               		.loc 1 1273 0
 4537 1c42 81E0      		ldi r24,lo8(1)
1279:fs.c          **** }  
 4538               		.loc 1 1279 0
 4539 1c44 0895      		ret
 4540               		.cfi_endproc
 4541               	.LFE37:
 4543               	.global	fs_gettotal
 4545               	fs_gettotal:
 4546               	.LFB38:
1280:fs.c          **** #endif
1281:fs.c          **** 
1282:fs.c          **** /**************************************************************************
1283:fs.c          **** *  –†–∞–∑–º–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö                                       
1284:fs.c          **** **************************************************************************/
1285:fs.c          **** 
1286:fs.c          **** uint8_t fs_gettotal(void) {
 4547               		.loc 1 1286 0
 4548               		.cfi_startproc
 4549               	/* prologue: function */
 4550               	/* frame size = 0 */
 4551               	/* stack size = 0 */
 4552               	.L__stack_usage = 0
1287:fs.c          ****   /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ */               
1288:fs.c          **** #ifndef FS_DISABLE_CHECK
1289:fs.c          ****   if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; return 1; }  
 4553               		.loc 1 1289 0
 4554 1c46 8091 0000 		lds r24,fs_type
 4555 1c4a 8230      		cpi r24,lo8(2)
 4556 1c4c 01F4      		brne .L350
 4557               		.loc 1 1289 0 is_stmt 0 discriminator 1
 4558 1c4e 81E0      		ldi r24,lo8(1)
 4559 1c50 8093 0000 		sts lastError,r24
 4560 1c54 0895      		ret
 4561               	.L350:
1290:fs.c          **** #endif
1291:fs.c          **** 
1292:fs.c          ****   fs_tmp = ((fs_n_fatent >> 10) + 1) / 2 * fs_csize;
 4562               		.loc 1 1292 0 is_stmt 1
 4563 1c56 2091 0000 		lds r18,fs_n_fatent
 4564 1c5a 3091 0000 		lds r19,fs_n_fatent+1
 4565 1c5e 4091 0000 		lds r20,fs_n_fatent+2
 4566 1c62 5091 0000 		lds r21,fs_n_fatent+3
 4567 1c66 6AE0      		ldi r22,10
 4568               		1:
 4569 1c68 5695      		lsr r21
 4570 1c6a 4795      		ror r20
 4571 1c6c 3795      		ror r19
 4572 1c6e 2795      		ror r18
 4573 1c70 6A95      		dec r22
 4574 1c72 01F4      		brne 1b
 4575 1c74 2F5F      		subi r18,-1
 4576 1c76 3F4F      		sbci r19,-1
 4577 1c78 4F4F      		sbci r20,-1
 4578 1c7a 5F4F      		sbci r21,-1
 4579 1c7c 5695      		lsr r21
 4580 1c7e 4795      		ror r20
 4581 1c80 3795      		ror r19
 4582 1c82 2795      		ror r18
 4583 1c84 A091 0000 		lds r26,fs_csize
 4584 1c88 B0E0      		ldi r27,0
 4585 1c8a 0E94 0000 		call __muluhisi3
 4586 1c8e 6093 0000 		sts fs_tmp,r22
 4587 1c92 7093 0000 		sts fs_tmp+1,r23
 4588 1c96 8093 0000 		sts fs_tmp+2,r24
 4589 1c9a 9093 0000 		sts fs_tmp+3,r25
1293:fs.c          ****   return 0;
 4590               		.loc 1 1293 0
 4591 1c9e 80E0      		ldi r24,0
1294:fs.c          **** }  
 4592               		.loc 1 1294 0
 4593 1ca0 0895      		ret
 4594               		.cfi_endproc
 4595               	.LFE38:
 4597               	.global	fs_getfilesize
 4599               	fs_getfilesize:
 4600               	.LFB39:
1295:fs.c          **** 
1296:fs.c          **** /**************************************************************************
1297:fs.c          **** *  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞                                                           *
1298:fs.c          **** **************************************************************************/
1299:fs.c          **** 
1300:fs.c          **** uint8_t fs_getfilesize(void) {
 4601               		.loc 1 1300 0
 4602               		.cfi_startproc
 4603               	/* prologue: function */
 4604               	/* frame size = 0 */
 4605               	/* stack size = 0 */
 4606               	.L__stack_usage = 0
1301:fs.c          **** #ifndef FS_DISABLE_CHECK
1302:fs.c          ****   if(fs_file.opened != OPENED_FILE) {
 4607               		.loc 1 1302 0
 4608 1ca2 8091 0000 		lds r24,fs_file
 4609 1ca6 8130      		cpi r24,lo8(1)
 4610 1ca8 01F0      		breq .L353
1303:fs.c          ****     lastError = ERR_NOT_OPENED;
 4611               		.loc 1 1303 0
 4612 1caa 83E0      		ldi r24,lo8(3)
 4613 1cac 8093 0000 		sts lastError,r24
1304:fs.c          ****     return 1;
 4614               		.loc 1 1304 0
 4615 1cb0 81E0      		ldi r24,lo8(1)
 4616 1cb2 0895      		ret
 4617               	.L353:
1305:fs.c          ****   }
1306:fs.c          **** #endif
1307:fs.c          ****   fs_tmp = fs_file.size;
 4618               		.loc 1 1307 0
 4619 1cb4 8091 0000 		lds r24,fs_file+20
 4620 1cb8 9091 0000 		lds r25,fs_file+20+1
 4621 1cbc A091 0000 		lds r26,fs_file+20+2
 4622 1cc0 B091 0000 		lds r27,fs_file+20+3
 4623 1cc4 8093 0000 		sts fs_tmp,r24
 4624 1cc8 9093 0000 		sts fs_tmp+1,r25
 4625 1ccc A093 0000 		sts fs_tmp+2,r26
 4626 1cd0 B093 0000 		sts fs_tmp+3,r27
1308:fs.c          ****   return 0;
 4627               		.loc 1 1308 0
 4628 1cd4 80E0      		ldi r24,0
1309:fs.c          **** }
 4629               		.loc 1 1309 0
 4630 1cd6 0895      		ret
 4631               		.cfi_endproc
 4632               	.LFE39:
 4634               	.global	fs_tell
 4636               	fs_tell:
 4637               	.LFB40:
1310:fs.c          **** 
1311:fs.c          **** /**************************************************************************
1312:fs.c          **** *  –£–∫–∞–∑–∞—Ç–µ–ª—å —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞                                         
1313:fs.c          **** **************************************************************************/
1314:fs.c          **** 
1315:fs.c          **** uint8_t fs_tell(void) {
 4638               		.loc 1 1315 0
 4639               		.cfi_startproc
 4640               	/* prologue: function */
 4641               	/* frame size = 0 */
 4642               	/* stack size = 0 */
 4643               	.L__stack_usage = 0
1316:fs.c          **** #ifndef FS_DISABLE_CHECK
1317:fs.c          ****   if(fs_file.opened != OPENED_FILE) {
 4644               		.loc 1 1317 0
 4645 1cd8 8091 0000 		lds r24,fs_file
 4646 1cdc 8130      		cpi r24,lo8(1)
 4647 1cde 01F0      		breq .L356
1318:fs.c          ****     lastError = ERR_NOT_OPENED;
 4648               		.loc 1 1318 0
 4649 1ce0 83E0      		ldi r24,lo8(3)
 4650 1ce2 8093 0000 		sts lastError,r24
1319:fs.c          ****     return 1;
 4651               		.loc 1 1319 0
 4652 1ce6 81E0      		ldi r24,lo8(1)
 4653 1ce8 0895      		ret
 4654               	.L356:
1320:fs.c          ****   }
1321:fs.c          **** #endif
1322:fs.c          ****   fs_tmp = fs_file.ptr;
 4655               		.loc 1 1322 0
 4656 1cea 8091 0000 		lds r24,fs_file+16
 4657 1cee 9091 0000 		lds r25,fs_file+16+1
 4658 1cf2 A091 0000 		lds r26,fs_file+16+2
 4659 1cf6 B091 0000 		lds r27,fs_file+16+3
 4660 1cfa 8093 0000 		sts fs_tmp,r24
 4661 1cfe 9093 0000 		sts fs_tmp+1,r25
 4662 1d02 A093 0000 		sts fs_tmp+2,r26
 4663 1d06 B093 0000 		sts fs_tmp+3,r27
1323:fs.c          ****   return 0;
 4664               		.loc 1 1323 0
 4665 1d0a 80E0      		ldi r24,0
1324:fs.c          **** }
 4666               		.loc 1 1324 0
 4667 1d0c 0895      		ret
 4668               		.cfi_endproc
 4669               	.LFE40:
 4671               		.section	.progmem.data,"a",@progbits
 4674               	__c.1955:
 4675 0000 2B2C 3B3D 		.string	"+,;=[]*?<:>\\|\""
 4675      5B5D 2A3F 
 4675      3C3A 3E5C 
 4675      7C22 00
 4676               		.comm	fs_secondFile,33,1
 4677               		.comm	fs_file,33,1
 4678               		.comm	fs_wtotal,2,1
 4679               		.comm	fs_tmp,4,1
 4680               		.comm	fs_fatoptim,4,1
 4681               		.comm	lastError,1,1
 4682               		.comm	fs_database,4,1
 4683               		.comm	fs_dirbase,4,1
 4684               		.comm	fs_n_fatent,4,1
 4685               		.comm	fs_n_rootdir,2,1
 4686               		.comm	fs_csize,1,1
 4687               		.comm	fs_fatbase2,4,1
 4688               		.comm	fs_fatbase,4,1
 4689               		.comm	fs_type,1,1
 4690               		.text
 4691               	.Letext0:
 4692               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 4693               		.file 3 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 4694               		.file 4 "common.h"
 4695               		.file 5 "sd.h"
 4696               		.file 6 "/usr/local/CrossPack-AVR-20131216/avr/include/string.h"
 4697               		.file 7 "fs.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fs.c
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:2      *ABS*:0000003e __SP_H__
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3      *ABS*:0000003d __SP_L__
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4      *ABS*:0000003f __SREG__
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:6      *ABS*:00000001 __zero_reg__
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:11     .text:00000000 fs_clust2sect
                            *COM*:00000001 fs_csize
                            *COM*:00000004 fs_tmp
                            *COM*:00000004 fs_database
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:61     .text:00000054 sd_readBuf
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:98     .text:00000072 sd_writeBuf
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:118    .text:0000007e fs_saveFatSector
                            *COM*:00000004 fs_fatbase2
                            *COM*:00000004 fs_fatbase
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:200    .text:000000e6 fs_allocCluster
                            *COM*:00000004 fs_fatoptim
                            *COM*:00000001 fs_type
                            *COM*:00000004 fs_n_fatent
                            *COM*:00000021 fs_file
                            *COM*:00000001 lastError
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:547    .text:0000032c fs_setNextCluster
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:754    .text:00000456 fs_freeChain
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:818    .text:000004b2 fs_eraseCluster
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:883    .text:000004fe fs_nextCluster
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:1029   .text:00000612 fs_readdirInt
                            *COM*:00000002 fs_n_rootdir
                            *COM*:00000004 fs_dirbase
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:1249   .text:000007fa fs_nextRWSector
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:1424   .text:00000986 fs_saveFileLength
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:1511   .text:00000a10 fs_init
                            *COM*:00000021 fs_secondFile
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:1998   .text:00000d86 fs_check
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:2022   .text:00000d94 fs_readdir_nocheck
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:2072   .text:00000dca fs_readdir
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:2099   .text:00000de0 fs_open0
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4674   .progmem.data:00000000 __c.1955
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:2968   .text:0000138a fs_open
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3005   .text:000013ae fs_opendir
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3042   .text:000013d2 fs_read0
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3240   .text:000014e0 fs_read
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3363   .text:00001564 fs_lseek
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3527   .text:00001646 fs_write_start
                            *COM*:00000002 fs_wtotal
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3691   .text:00001746 fs_write_end
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:3764   .text:000017ca fs_move0
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4041   .text:00001978 fs_move
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4100   .text:000019ac fs_delete
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4250   .text:00001a82 fs_write_eof
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4349   .text:00001b4e fs_write
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4445   .text:00001bbe fs_swap
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4483   .text:00001bd8 fs_getfree
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4545   .text:00001c46 fs_gettotal
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4599   .text:00001ca2 fs_getfilesize
/var/folders/bx/kcf4hmpx0r54kzy3b_2bm54h0000gn/T//ccKLiui7.s:4636   .text:00001cd8 fs_tell

UNDEFINED SYMBOLS
__muluhisi3
buf
sd_read
sd_write512
__udivmodhi4
__udivmodsi4
sd_init
sd_check
memset
memcmp
strcpy
memcpy
__do_clear_bss
