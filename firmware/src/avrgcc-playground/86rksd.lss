
86rksd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00002974  00002a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e8  00800100  00800100  00002a08  2**0
                  ALLOC
  3 .stab         00000144  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000048  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00002ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f83  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c1d  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d28  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000958  00000000  00000000  000075f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000078a  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022a4  00000000  00000000  000086da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000a97e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	07 14       	cp	r0, r7
      6a:	0a 14       	cp	r0, r10
      6c:	0d 14       	cp	r0, r13
      6e:	10 14       	cp	r1, r0
      70:	13 14       	cp	r1, r3
      72:	16 14       	cp	r1, r6
      74:	19 14       	cp	r1, r9
      76:	1c 14       	cp	r1, r12
      78:	1f 14       	cp	r1, r15

0000007a <__trampolines_end>:
      7a:	62 6f       	ori	r22, 0xF2	; 242
      7c:	6f 74       	andi	r22, 0x4F	; 79
      7e:	2f 62       	ori	r18, 0x2F	; 47
      80:	6f 6f       	ori	r22, 0xFF	; 255
      82:	74 2e       	mov	r7, r20
      84:	72 6b       	ori	r23, 0xB2	; 178
	...

00000087 <__c.2004>:
      87:	62 6f 6f 74 2f 73 64 62 69 6f 73 2e 72 6b 00        boot/sdbios.rk.

00000096 <__c.1999>:
      96:	56 31 2e 31 20 52 4b 38 36 2d 53 52 41 4d 20 20     V1.1 RK86-SRAM  
	...

000000a7 <__c.1955>:
      a7:	2b 2c 3b 3d 5b 5d 2a 3f 3c 3a 3e 5c 7c 22 00        +,;=[]*?<:>\|".

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d8 e0       	ldi	r29, 0x08	; 8
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_clear_bss>:
      c2:	23 e0       	ldi	r18, 0x03	; 3
      c4:	a0 e0       	ldi	r26, 0x00	; 0
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a8 3e       	cpi	r26, 0xE8	; 232
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 a5 13 	call	0x274a	; 0x274a <main>
      d6:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <recvBin>:
* Для удобства                                                                 *
*******************************************************************************/

extern void RomEmu(void);

void recvBin(uint8_t* d, WORD l) {
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	8b 01       	movw	r16, r22
      e8:	ec 01       	movw	r28, r24
      ea:	08 0f       	add	r16, r24
      ec:	19 1f       	adc	r17, r25
  for(; l; --l) {
      ee:	c0 17       	cp	r28, r16
      f0:	d1 07       	cpc	r29, r17
      f2:	21 f0       	breq	.+8      	; 0xfc <recvBin+0x1e>
    *d++ = wrecv();
      f4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <wrecv>
      f8:	89 93       	st	Y+, r24
      fa:	f9 cf       	rjmp	.-14     	; 0xee <recvBin+0x10>
  }  
}
      fc:	df 91       	pop	r29
      fe:	cf 91       	pop	r28
     100:	1f 91       	pop	r17
     102:	0f 91       	pop	r16
     104:	08 95       	ret

00000106 <recvString>:

void recvString(void) {
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
  uint8_t c;
  uint8_t* p = buf;       
     10c:	c2 e8       	ldi	r28, 0x82	; 130
     10e:	d1 e0       	ldi	r29, 0x01	; 1
  do {
    c = wrecv();
    if(p != buf + FS_MAXFILE) *p++ = c; else lastError = ERR_RECV_STRING;
     110:	1b e0       	ldi	r17, 0x0B	; 11

void recvString(void) {
  uint8_t c;
  uint8_t* p = buf;       
  do {
    c = wrecv();
     112:	0e 94 f7 11 	call	0x23ee	; 0x23ee <wrecv>
    if(p != buf + FS_MAXFILE) *p++ = c; else lastError = ERR_RECV_STRING;
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	c7 35       	cpi	r28, 0x57	; 87
     11a:	d9 07       	cpc	r29, r25
     11c:	19 f0       	breq	.+6      	; 0x124 <recvString+0x1e>
     11e:	88 83       	st	Y, r24
     120:	21 96       	adiw	r28, 0x01	; 1
     122:	02 c0       	rjmp	.+4      	; 0x128 <recvString+0x22>
     124:	10 93 af 03 	sts	0x03AF, r17
  } while(c);
     128:	81 11       	cpse	r24, r1
     12a:	f3 cf       	rjmp	.-26     	; 0x112 <recvString+0xc>
}
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	1f 91       	pop	r17
     132:	08 95       	ret

00000134 <sendBin>:

void sendBin(uint8_t* p, WORD l) {
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	8b 01       	movw	r16, r22
     13e:	ec 01       	movw	r28, r24
     140:	08 0f       	add	r16, r24
     142:	19 1f       	adc	r17, r25
  for(; l; l--)
     144:	c0 17       	cp	r28, r16
     146:	d1 07       	cpc	r29, r17
     148:	21 f0       	breq	.+8      	; 0x152 <sendBin+0x1e>
    send(*p++);
     14a:	89 91       	ld	r24, Y+
     14c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
     150:	f9 cf       	rjmp	.-14     	; 0x144 <sendBin+0x10>
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <sendBinf>:

void sendBinf(const char* d, uint8_t l) {
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	8c 01       	movw	r16, r24
  for(; l; --l) {
     16c:	66 23       	and	r22, r22
     16e:	59 f0       	breq	.+22     	; 0x186 <sendBinf+0x2a>
      uint8_t x = pgm_read_byte(*d++);
     170:	d8 01       	movw	r26, r16
     172:	ed 91       	ld	r30, X+
     174:	8d 01       	movw	r16, r26
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	84 91       	lpm	r24, Z
      send(x);
     17a:	69 83       	std	Y+1, r22	; 0x01
     17c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
  for(; l; l--)
    send(*p++);
}

void sendBinf(const char* d, uint8_t l) {
  for(; l; --l) {
     180:	69 81       	ldd	r22, Y+1	; 0x01
     182:	61 50       	subi	r22, 0x01	; 1
     184:	f3 cf       	rjmp	.-26     	; 0x16c <sendBinf+0x10>
      uint8_t x = pgm_read_byte(*d++);
      send(x);
  }
}
     186:	0f 90       	pop	r0
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	08 95       	ret

00000192 <readInt>:
* Отправка всех блоков файла                                                   *
*******************************************************************************/

WORD readLength;

void readInt(char rks) { 
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <readInt+0xe>
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	18 2f       	mov	r17, r24
  uint8_t* wptr;

  while(readLength) { 
    // Расчет длины блока (выравниваем чтение на сектор)
    if(fs_tell()) return;
    readedLength = 512 - (fs_tmp % 512);
     1a6:	e1 2c       	mov	r14, r1
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	f8 2e       	mov	r15, r24
void readInt(char rks) { 
  WORD readedLength, lengthFromFile;        
  uint8_t tmp;
  uint8_t* wptr;

  while(readLength) { 
     1ac:	20 91 80 01 	lds	r18, 0x0180
     1b0:	30 91 81 01 	lds	r19, 0x0181
     1b4:	23 2b       	or	r18, r19
     1b6:	09 f4       	brne	.+2      	; 0x1ba <readInt+0x28>
     1b8:	72 c0       	rjmp	.+228    	; 0x29e <readInt+0x10c>
    // Расчет длины блока (выравниваем чтение на сектор)
    if(fs_tell()) return;
     1ba:	0e 94 bb 11 	call	0x2376	; 0x2376 <fs_tell>
     1be:	81 11       	cpse	r24, r1
     1c0:	75 c0       	rjmp	.+234    	; 0x2ac <readInt+0x11a>
    readedLength = 512 - (fs_tmp % 512);
     1c2:	20 91 de 03 	lds	r18, 0x03DE
     1c6:	30 91 df 03 	lds	r19, 0x03DF
     1ca:	31 70       	andi	r19, 0x01	; 1
     1cc:	a7 01       	movw	r20, r14
     1ce:	42 1b       	sub	r20, r18
     1d0:	53 0b       	sbc	r21, r19
     1d2:	5a 83       	std	Y+2, r21	; 0x02
     1d4:	49 83       	std	Y+1, r20	; 0x01
    if(readedLength > readLength) readedLength = readLength;
     1d6:	20 91 80 01 	lds	r18, 0x0180
     1da:	30 91 81 01 	lds	r19, 0x0181
     1de:	24 17       	cp	r18, r20
     1e0:	35 07       	cpc	r19, r21
     1e2:	10 f4       	brcc	.+4      	; 0x1e8 <readInt+0x56>
     1e4:	3a 83       	std	Y+2, r19	; 0x02
     1e6:	29 83       	std	Y+1, r18	; 0x01

    // Уменьшаем счетчик
    readLength -= readedLength;
     1e8:	69 81       	ldd	r22, Y+1	; 0x01
     1ea:	7a 81       	ldd	r23, Y+2	; 0x02
     1ec:	26 1b       	sub	r18, r22
     1ee:	37 0b       	sbc	r19, r23
     1f0:	30 93 81 01 	sts	0x0181, r19
     1f4:	20 93 80 01 	sts	0x0180, r18

    // Читаем блок
    if(fs_read0(buf, readedLength)) return;
     1f8:	82 e8       	ldi	r24, 0x82	; 130
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fs_read0>
     200:	81 11       	cpse	r24, r1
     202:	54 c0       	rjmp	.+168    	; 0x2ac <readInt+0x11a>

    // Заголовок RKS файла
    wptr = buf;
    if(rks) { // Если rks=1, перед вызовом надо проверить, что бы readLength>4 и fs_file.ptr=0, иначе может быть злостный сбой
     204:	11 23       	and	r17, r17
     206:	99 f1       	breq	.+102    	; 0x26e <readInt+0xdc>
      rks = 0;
      
      // У апогея числа перепутаны
      tmp=buf[0], buf[0]=buf[1]; buf[1]=tmp;
     208:	80 91 82 01 	lds	r24, 0x0182
     20c:	90 91 83 01 	lds	r25, 0x0183
     210:	90 93 82 01 	sts	0x0182, r25
     214:	80 93 83 01 	sts	0x0183, r24
      tmp=buf[2], buf[2]=buf[3]; buf[3]=tmp;
     218:	80 91 84 01 	lds	r24, 0x0184
     21c:	90 91 85 01 	lds	r25, 0x0185
     220:	90 93 84 01 	sts	0x0184, r25
     224:	80 93 85 01 	sts	0x0185, r24

      // Посылаем адрес загрузки
      send(ERR_OK_RKS);
     228:	87 e4       	ldi	r24, 0x47	; 71
     22a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
      sendBin(buf, 2);    
     22e:	62 e0       	ldi	r22, 0x02	; 2
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	82 e8       	ldi	r24, 0x82	; 130
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
      send(ERR_WAIT);
     23a:	81 e4       	ldi	r24, 0x41	; 65
     23c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>

      // Корректируем указатели
      wptr += 4;
      readedLength -= 4;
     240:	29 81       	ldd	r18, Y+1	; 0x01
     242:	3a 81       	ldd	r19, Y+2	; 0x02
     244:	24 50       	subi	r18, 0x04	; 4
     246:	31 09       	sbc	r19, r1
     248:	3a 83       	std	Y+2, r19	; 0x02
     24a:	29 83       	std	Y+1, r18	; 0x01

      // Длина из файла
      lengthFromFile = *(WORD*)(buf+2) - *(WORD*)(buf) + 1;
     24c:	80 91 84 01 	lds	r24, 0x0184
     250:	90 91 85 01 	lds	r25, 0x0185
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	40 91 82 01 	lds	r20, 0x0182
     25a:	50 91 83 01 	lds	r21, 0x0183
     25e:	84 1b       	sub	r24, r20
     260:	95 0b       	sbc	r25, r21

      // Корректируем длину  
      if(readedLength > lengthFromFile) {
     262:	82 17       	cp	r24, r18
     264:	93 07       	cpc	r25, r19
     266:	30 f4       	brcc	.+12     	; 0x274 <readInt+0xe2>
        readedLength = lengthFromFile;
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	03 c0       	rjmp	.+6      	; 0x274 <readInt+0xe2>

    // Читаем блок
    if(fs_read0(buf, readedLength)) return;

    // Заголовок RKS файла
    wptr = buf;
     26e:	02 e8       	ldi	r16, 0x82	; 130
     270:	11 e0       	ldi	r17, 0x01	; 1
     272:	02 c0       	rjmp	.+4      	; 0x278 <readInt+0xe6>
      send(ERR_OK_RKS);
      sendBin(buf, 2);    
      send(ERR_WAIT);

      // Корректируем указатели
      wptr += 4;
     274:	06 e8       	ldi	r16, 0x86	; 134
     276:	11 e0       	ldi	r17, 0x01	; 1
        if(readLength > lengthFromFile) lengthFromFile = readedLength;
      }
    }  

    // Отправляем блок
    send(ERR_READ_BLOCK);    
     278:	8f e4       	ldi	r24, 0x4F	; 79
     27a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
    sendBin((uint8_t*)&readedLength, 2);
     27e:	62 e0       	ldi	r22, 0x02	; 2
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	ce 01       	movw	r24, r28
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
    sendBin(wptr, readedLength);
     28a:	69 81       	ldd	r22, Y+1	; 0x01
     28c:	7a 81       	ldd	r23, Y+2	; 0x02
     28e:	c8 01       	movw	r24, r16
     290:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
    send(ERR_WAIT);
     294:	81 e4       	ldi	r24, 0x41	; 65
     296:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
     29a:	10 e0       	ldi	r17, 0x00	; 0
     29c:	87 cf       	rjmp	.-242    	; 0x1ac <readInt+0x1a>
  }

  // Если все ОК
  if(!lastError) lastError = ERR_OK_READ;
     29e:	80 91 af 03 	lds	r24, 0x03AF
     2a2:	81 11       	cpse	r24, r1
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <readInt+0x11a>
     2a6:	84 e4       	ldi	r24, 0x44	; 68
     2a8:	80 93 af 03 	sts	0x03AF, r24
}
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	08 95       	ret

000002be <cmd_ver>:
/*******************************************************************************
* Версия команд контроллера                                                    *
*******************************************************************************/

void cmd_ver(void) {
  sendStart(1);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
    
  // Версия + Производитель
  //sendBinf(PSTR("V1.0 10-05-2014 "), 16);
  sendBinf(PSTR("V1.1 RK86-SRAM  "), 16);
     2c4:	60 e1       	ldi	r22, 0x10	; 16
     2c6:	86 e9       	ldi	r24, 0x96	; 150
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0c 94 ae 00 	jmp	0x15c	; 0x15c <sendBinf>

000002ce <cmd_boot_exec>:
* BOOT / EXEC                                                                  *
*******************************************************************************/

void cmd_boot_exec(void) {
  // Файл по умолчанию
  if(buf[0]==0) strcpy_P((char*)buf, PSTR("boot/sdbios.rk"));
     2ce:	80 91 82 01 	lds	r24, 0x0182
     2d2:	81 11       	cpse	r24, r1
     2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <cmd_boot_exec+0x14>
     2d6:	67 e8       	ldi	r22, 0x87	; 135
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	82 e8       	ldi	r24, 0x82	; 130
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 8d 14 	call	0x291a	; 0x291a <strcpy_P>

  // Открываем файл
  if(fs_open()) return;
     2e2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fs_open>
     2e6:	81 11       	cpse	r24, r1
     2e8:	2e c0       	rjmp	.+92     	; 0x346 <cmd_boot_exec+0x78>
  
  // Максимальный размер файла
  readLength = 0xFFFF;  
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	9f ef       	ldi	r25, 0xFF	; 255
     2ee:	90 93 81 01 	sts	0x0181, r25
     2f2:	80 93 80 01 	sts	0x0180, r24
  if(fs_getfilesize()) return;
     2f6:	0e 94 a0 11 	call	0x2340	; 0x2340 <fs_getfilesize>
     2fa:	81 11       	cpse	r24, r1
     2fc:	24 c0       	rjmp	.+72     	; 0x346 <cmd_boot_exec+0x78>
  if(readLength > fs_tmp) readLength = (WORD)fs_tmp;
     2fe:	80 91 de 03 	lds	r24, 0x03DE
     302:	90 91 df 03 	lds	r25, 0x03DF
     306:	a0 91 e0 03 	lds	r26, 0x03E0
     30a:	b0 91 e1 03 	lds	r27, 0x03E1
     30e:	40 91 80 01 	lds	r20, 0x0180
     312:	50 91 81 01 	lds	r21, 0x0181
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	84 17       	cp	r24, r20
     31c:	95 07       	cpc	r25, r21
     31e:	a6 07       	cpc	r26, r22
     320:	b7 07       	cpc	r27, r23
     322:	20 f4       	brcc	.+8      	; 0x32c <cmd_boot_exec+0x5e>
     324:	90 93 81 01 	sts	0x0181, r25
     328:	80 93 80 01 	sts	0x0180, r24

  // Файлы RK должны быть длиной >4 байт. Мы заносим в readLength = 0 и программа
  // получает ERR_OK. Но так как она ждем ERR_OK_RKS, это будет ошибкой 
  if(readLength < 4) readLength = 0;
     32c:	80 91 80 01 	lds	r24, 0x0180
     330:	90 91 81 01 	lds	r25, 0x0181
     334:	04 97       	sbiw	r24, 0x04	; 4
     336:	20 f4       	brcc	.+8      	; 0x340 <cmd_boot_exec+0x72>
     338:	10 92 81 01 	sts	0x0181, r1
     33c:	10 92 80 01 	sts	0x0180, r1

  readInt(/*rks*/1);  
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0c 94 c9 00 	jmp	0x192	; 0x192 <readInt>
     346:	08 95       	ret

00000348 <cmd_boot>:
}

void cmd_boot(void) { 
  sendStart(ERR_WAIT);
     348:	81 e4       	ldi	r24, 0x41	; 65
     34a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  buf[0] = 0;
     34e:	10 92 82 01 	sts	0x0182, r1
  cmd_boot_exec();  
     352:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <cmd_boot_exec>

00000356 <cmd_exec>:
}

void cmd_exec(void) {     
  // Прием имени файла
  recvString();
     356:	0e 94 83 00 	call	0x106	; 0x106 <recvString>

  // Режим передачи и подтверждение
  sendStart(ERR_WAIT);
     35a:	81 e4       	ldi	r24, 0x41	; 65
     35c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  if(lastError) return; // Переполнение строки
     360:	80 91 af 03 	lds	r24, 0x03AF
     364:	81 11       	cpse	r24, r1
     366:	02 c0       	rjmp	.+4      	; 0x36c <cmd_exec+0x16>
  
  cmd_boot_exec();    
     368:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <cmd_boot_exec>
     36c:	08 95       	ret

0000036e <cmd_find>:
      };
      DWORD ftimedate;
    };
} FILINFO2;

void cmd_find(void) {
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	66 97       	sbiw	r28, 0x16	; 22
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
  WORD n;
  FILINFO2 info;              
  
  // Принимаем путь
  recvString();
     384:	0e 94 83 00 	call	0x106	; 0x106 <recvString>

  // Принимаем макс кол-во элементов
  recvBin((uint8_t*)&n, 2);
     388:	62 e0       	ldi	r22, 0x02	; 2
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	ce 01       	movw	r24, r28
     38e:	45 96       	adiw	r24, 0x15	; 21
     390:	0e 94 6f 00 	call	0xde	; 0xde <recvBin>

  // Режим передачи и подтверждение
  sendStart(ERR_WAIT);
     394:	81 e4       	ldi	r24, 0x41	; 65
     396:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  if(lastError) return;
     39a:	80 91 af 03 	lds	r24, 0x03AF
     39e:	81 11       	cpse	r24, r1
     3a0:	4e c0       	rjmp	.+156    	; 0x43e <cmd_find+0xd0>

  // Открываем папку
  if(buf[0] != ':') {
     3a2:	80 91 82 01 	lds	r24, 0x0182
     3a6:	8a 33       	cpi	r24, 0x3A	; 58
     3a8:	11 f4       	brne	.+4      	; 0x3ae <cmd_find+0x40>
      lastError = ERR_OK_CMD;
      return;
    }

    /* Сжимаем ответ для компьютера */
    memcpy(info.fname, FS_DIRENTRY+DIR_Name, 12);
     3aa:	1c e0       	ldi	r17, 0x0C	; 12
     3ac:	37 c0       	rjmp	.+110    	; 0x41c <cmd_find+0xae>
  sendStart(ERR_WAIT);
  if(lastError) return;

  // Открываем папку
  if(buf[0] != ':') {
    if(fs_opendir()) return;
     3ae:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fs_opendir>
     3b2:	81 11       	cpse	r24, r1
     3b4:	44 c0       	rjmp	.+136    	; 0x43e <cmd_find+0xd0>
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <cmd_find+0x3c>
      lastError = ERR_OK_CMD;
      return;
    }

    /* Сжимаем ответ для компьютера */
    memcpy(info.fname, FS_DIRENTRY+DIR_Name, 12);
     3b8:	e2 e6       	ldi	r30, 0x62	; 98
     3ba:	f3 e0       	ldi	r31, 0x03	; 3
     3bc:	de 01       	movw	r26, r28
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	81 2f       	mov	r24, r17
     3c2:	01 90       	ld	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	8a 95       	dec	r24
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <cmd_find+0x54>
    memcpy(&info.fsize, FS_DIRENTRY+DIR_FileSize, 4);
     3ca:	80 91 7e 03 	lds	r24, 0x037E
     3ce:	90 91 7f 03 	lds	r25, 0x037F
     3d2:	a0 91 80 03 	lds	r26, 0x0380
     3d6:	b0 91 81 03 	lds	r27, 0x0381
     3da:	8d 87       	std	Y+13, r24	; 0x0d
     3dc:	9e 87       	std	Y+14, r25	; 0x0e
     3de:	af 87       	std	Y+15, r26	; 0x0f
     3e0:	b8 8b       	std	Y+16, r27	; 0x10
    memcpy(&info.ftimedate, FS_DIRENTRY+DIR_WrtTime, 4);
     3e2:	80 91 78 03 	lds	r24, 0x0378
     3e6:	90 91 79 03 	lds	r25, 0x0379
     3ea:	a0 91 7a 03 	lds	r26, 0x037A
     3ee:	b0 91 7b 03 	lds	r27, 0x037B
     3f2:	89 8b       	std	Y+17, r24	; 0x11
     3f4:	9a 8b       	std	Y+18, r25	; 0x12
     3f6:	ab 8b       	std	Y+19, r26	; 0x13
     3f8:	bc 8b       	std	Y+20, r27	; 0x14
    //memcpy(memcpy(memcpy(info.fname, FS_DIRENTRY+DIR_Name, 12, FS_DIRENTRY+DIR_FileSize, 4), FS_DIRENTRY+DIR_WrtTime, 4);

    /* Отправляем */
    send(ERR_OK_ENTRY);
     3fa:	85 e4       	ldi	r24, 0x45	; 69
     3fc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
    sendBin((uint8_t*)&info, sizeof(info));
     400:	64 e1       	ldi	r22, 0x14	; 20
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
    send(ERR_WAIT);
     40c:	81 e4       	ldi	r24, 0x41	; 65
     40e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
  // Открываем папку
  if(buf[0] != ':') {
    if(fs_opendir()) return;
  }

  for(; n; --n) {
     412:	8d 89       	ldd	r24, Y+21	; 0x15
     414:	9e 89       	ldd	r25, Y+22	; 0x16
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	9e 8b       	std	Y+22, r25	; 0x16
     41a:	8d 8b       	std	Y+21, r24	; 0x15
     41c:	8d 89       	ldd	r24, Y+21	; 0x15
     41e:	9e 89       	ldd	r25, Y+22	; 0x16
     420:	89 2b       	or	r24, r25
     422:	51 f0       	breq	.+20     	; 0x438 <cmd_find+0xca>
    /* Читаем очереной описатель */
    if(fs_readdir()) return;
     424:	0e 94 34 0a 	call	0x1468	; 0x1468 <fs_readdir>
     428:	81 11       	cpse	r24, r1
     42a:	09 c0       	rjmp	.+18     	; 0x43e <cmd_find+0xd0>

    /* Конец */
    if(FS_DIRENTRY[0] == 0) {
     42c:	80 91 62 03 	lds	r24, 0x0362
     430:	81 11       	cpse	r24, r1
     432:	c2 cf       	rjmp	.-124    	; 0x3b8 <cmd_find+0x4a>
      lastError = ERR_OK_CMD;
     434:	83 e4       	ldi	r24, 0x43	; 67
     436:	01 c0       	rjmp	.+2      	; 0x43a <cmd_find+0xcc>
    sendBin((uint8_t*)&info, sizeof(info));
    send(ERR_WAIT);
  }

  /* Ограничение по размеру */  
  lastError = ERR_MAX_FILES; /*! Надо опеределать, что бы не было ложных ошибок */
     438:	8a e0       	ldi	r24, 0x0A	; 10
     43a:	80 93 af 03 	sts	0x03AF, r24
}
     43e:	66 96       	adiw	r28, 0x16	; 22
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <cmd_open>:

/*******************************************************************************
* Открыть/создать файл/папку                                                   *
*******************************************************************************/

void cmd_open(void) {
     452:	cf 93       	push	r28
  uint8_t mode;
 
  /* Принимаем режим */
  mode = wrecv();    
     454:	0e 94 f7 11 	call	0x23ee	; 0x23ee <wrecv>
     458:	c8 2f       	mov	r28, r24

  // Принимаем имя файла
  recvString();
     45a:	0e 94 83 00 	call	0x106	; 0x106 <recvString>

  // Режим передачи и подтверждение
  sendStart(ERR_WAIT);
     45e:	81 e4       	ldi	r24, 0x41	; 65
     460:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>

  // Открываем/создаем файл/папку
  if(mode == O_SWAP) {
     464:	c5 36       	cpi	r28, 0x65	; 101
     466:	19 f4       	brne	.+6      	; 0x46e <cmd_open+0x1c>
    fs_swap();
     468:	0e 94 2e 11 	call	0x225c	; 0x225c <fs_swap>
     46c:	13 c0       	rjmp	.+38     	; 0x494 <cmd_open+0x42>
  } else
  if(mode == O_DELETE) {
     46e:	c4 36       	cpi	r28, 0x64	; 100
     470:	19 f4       	brne	.+6      	; 0x478 <cmd_open+0x26>
    fs_delete();
     472:	0e 94 25 10 	call	0x204a	; 0x204a <fs_delete>
     476:	0e c0       	rjmp	.+28     	; 0x494 <cmd_open+0x42>
  } else
  if(mode == O_OPEN) {
     478:	c1 11       	cpse	r28, r1
     47a:	03 c0       	rjmp	.+6      	; 0x482 <cmd_open+0x30>
    fs_open();
     47c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fs_open>
     480:	09 c0       	rjmp	.+18     	; 0x494 <cmd_open+0x42>
  } else 
  if(mode < 3) {
     482:	c3 30       	cpi	r28, 0x03	; 3
     484:	20 f4       	brcc	.+8      	; 0x48e <cmd_open+0x3c>
    fs_open0(mode);
     486:	8c 2f       	mov	r24, r28
     488:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
     48c:	03 c0       	rjmp	.+6      	; 0x494 <cmd_open+0x42>
  } else {
    lastError = ERR_INVALID_COMMAND;
     48e:	8c e0       	ldi	r24, 0x0C	; 12
     490:	80 93 af 03 	sts	0x03AF, r24
  }

  // Ок
  if(!lastError) lastError = ERR_OK_CMD;
     494:	80 91 af 03 	lds	r24, 0x03AF
     498:	81 11       	cpse	r24, r1
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <cmd_open+0x50>
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	80 93 af 03 	sts	0x03AF, r24
}
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <cmd_move>:
/*******************************************************************************
* Переместить файл/папку                                                       *
*******************************************************************************/

void cmd_move(void) {
  recvString();
     4a6:	0e 94 83 00 	call	0x106	; 0x106 <recvString>
  sendStart(ERR_WAIT);
     4aa:	81 e4       	ldi	r24, 0x41	; 65
     4ac:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  fs_openany();
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
  sendStart(ERR_OK_WRITE);
     4b6:	86 e4       	ldi	r24, 0x46	; 70
     4b8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  recvStart();
     4bc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <recvStart>
  recvString();
     4c0:	0e 94 83 00 	call	0x106	; 0x106 <recvString>
  sendStart(ERR_WAIT);
     4c4:	81 e4       	ldi	r24, 0x41	; 65
     4c6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
  if(!lastError) fs_move0();
     4ca:	80 91 af 03 	lds	r24, 0x03AF
     4ce:	81 11       	cpse	r24, r1
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <cmd_move+0x30>
     4d2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fs_move0>
  if(!lastError) lastError = ERR_OK_CMD;
     4d6:	80 91 af 03 	lds	r24, 0x03AF
     4da:	81 11       	cpse	r24, r1
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <cmd_move+0x3e>
     4de:	83 e4       	ldi	r24, 0x43	; 67
     4e0:	80 93 af 03 	sts	0x03AF, r24
     4e4:	08 95       	ret

000004e6 <cmd_lseek>:

/*******************************************************************************
* Установить/прочитать указатель чтения                                        *
*******************************************************************************/

void cmd_lseek(void) {
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <cmd_lseek+0x6>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <cmd_lseek+0x8>
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
  uint8_t mode;
  DWORD off;

  // Принимаем режим и смещение
  mode = wrecv();    
     4f4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <wrecv>
     4f8:	48 2f       	mov	r20, r24
  recvBin((uint8_t*)&off, 4);    
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	4d 83       	std	Y+5, r20	; 0x05
     504:	0e 94 6f 00 	call	0xde	; 0xde <recvBin>

  // Режим передачи и подтверждение
  sendStart(ERR_WAIT);
     508:	81 e4       	ldi	r24, 0x41	; 65
     50a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>

  // Размер файла
  if(mode==100) {
     50e:	4d 81       	ldd	r20, Y+5	; 0x05
     510:	44 36       	cpi	r20, 0x64	; 100
     512:	81 f4       	brne	.+32     	; 0x534 <cmd_lseek+0x4e>
    if(fs_getfilesize()) return;
     514:	0e 94 a0 11 	call	0x2340	; 0x2340 <fs_getfilesize>
     518:	81 11       	cpse	r24, r1
     51a:	1d c0       	rjmp	.+58     	; 0x556 <cmd_lseek+0x70>
    /* Устаналиваем смещение. fs_tmp сохраняется */
    if(fs_lseek(off, mode)) return;
  }

  // Передаем результат
  send(ERR_OK_CMD);
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
  sendBin((uint8_t*)&fs_tmp, 4);  
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	8e ed       	ldi	r24, 0xDE	; 222
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
  lastError = 0; // На всякий случай, результат уже передан
     52e:	10 92 af 03 	sts	0x03AF, r1
     532:	11 c0       	rjmp	.+34     	; 0x556 <cmd_lseek+0x70>
  if(mode==100) {
    if(fs_getfilesize()) return;
  }

  // Размер диска  
  else if(mode==101) {
     534:	45 36       	cpi	r20, 0x65	; 101
     536:	19 f4       	brne	.+6      	; 0x53e <cmd_lseek+0x58>
    if(fs_gettotal()) return;
     538:	0e 94 72 11 	call	0x22e4	; 0x22e4 <fs_gettotal>
     53c:	ed cf       	rjmp	.-38     	; 0x518 <cmd_lseek+0x32>
  }
 
  // Свободное место на диске
  else if(mode==102) {
     53e:	46 36       	cpi	r20, 0x66	; 102
     540:	19 f4       	brne	.+6      	; 0x548 <cmd_lseek+0x62>
    if(fs_getfree()) return;
     542:	0e 94 3b 11 	call	0x2276	; 0x2276 <fs_getfree>
     546:	e8 cf       	rjmp	.-48     	; 0x518 <cmd_lseek+0x32>
  }

  else {
    /* Устаналиваем смещение. fs_tmp сохраняется */
    if(fs_lseek(off, mode)) return;
     548:	69 81       	ldd	r22, Y+1	; 0x01
     54a:	7a 81       	ldd	r23, Y+2	; 0x02
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <fs_lseek>
     554:	e1 cf       	rjmp	.-62     	; 0x518 <cmd_lseek+0x32>

  // Передаем результат
  send(ERR_OK_CMD);
  sendBin((uint8_t*)&fs_tmp, 4);  
  lastError = 0; // На всякий случай, результат уже передан
}
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <cmd_read>:

/*******************************************************************************
* Прочитать из файла                                                           *
*******************************************************************************/

void cmd_read(void) {
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
  DWORD s;

  // Длина
  recvBin((uint8_t*)&readLength, 2);
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	80 e8       	ldi	r24, 0x80	; 128
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 6f 00 	call	0xde	; 0xde <recvBin>

  // Режим передачи и подтверждение
  sendStart(ERR_WAIT);
     57a:	81 e4       	ldi	r24, 0x41	; 65
     57c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>

  // Ограничиваем длину длиной файла
  if(fs_getfilesize()) return;
     580:	0e 94 a0 11 	call	0x2340	; 0x2340 <fs_getfilesize>
     584:	81 11       	cpse	r24, r1
     586:	32 c0       	rjmp	.+100    	; 0x5ec <cmd_read+0x86>
  s = fs_tmp; 
     588:	c0 90 de 03 	lds	r12, 0x03DE
     58c:	d0 90 df 03 	lds	r13, 0x03DF
     590:	e0 90 e0 03 	lds	r14, 0x03E0
     594:	f0 90 e1 03 	lds	r15, 0x03E1
  if(fs_tell()) return;
     598:	0e 94 bb 11 	call	0x2376	; 0x2376 <fs_tell>
     59c:	81 11       	cpse	r24, r1
     59e:	26 c0       	rjmp	.+76     	; 0x5ec <cmd_read+0x86>
  s -= fs_tmp;
     5a0:	80 91 de 03 	lds	r24, 0x03DE
     5a4:	90 91 df 03 	lds	r25, 0x03DF
     5a8:	a0 91 e0 03 	lds	r26, 0x03E0
     5ac:	b0 91 e1 03 	lds	r27, 0x03E1
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	28 1b       	sub	r18, r24
     5b6:	39 0b       	sbc	r19, r25
     5b8:	4a 0b       	sbc	r20, r26
     5ba:	5b 0b       	sbc	r21, r27
     5bc:	da 01       	movw	r26, r20
     5be:	c9 01       	movw	r24, r18
                    
  if(readLength > s)
     5c0:	40 91 80 01 	lds	r20, 0x0180
     5c4:	50 91 81 01 	lds	r21, 0x0181
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	84 17       	cp	r24, r20
     5ce:	95 07       	cpc	r25, r21
     5d0:	a6 07       	cpc	r26, r22
     5d2:	b7 07       	cpc	r27, r23
     5d4:	20 f4       	brcc	.+8      	; 0x5de <cmd_read+0x78>
    readLength = (WORD)s;
     5d6:	90 93 81 01 	sts	0x0181, r25
     5da:	80 93 80 01 	sts	0x0180, r24

  // Отправляем все блоки файла
  readInt(/*rks*/0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
}
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
                    
  if(readLength > s)
    readLength = (WORD)s;

  // Отправляем все блоки файла
  readInt(/*rks*/0);
     5e8:	0c 94 c9 00 	jmp	0x192	; 0x192 <readInt>
}
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <cmd_write>:
* Записать данные в файл                                                       *
*******************************************************************************/

void cmd_write(void) {
  // Аргументы
  recvBin((uint8_t*)&fs_wtotal, 2); 
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	82 e8       	ldi	r24, 0x82	; 130
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 6f 00 	call	0xde	; 0xde <recvBin>

  // Ответ
  sendStart(ERR_WAIT);
     602:	81 e4       	ldi	r24, 0x41	; 65
     604:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
           
  // Конец файла
  if(fs_wtotal==0) {
     608:	80 91 82 03 	lds	r24, 0x0382
     60c:	90 91 83 03 	lds	r25, 0x0383
     610:	89 2b       	or	r24, r25
     612:	39 f5       	brne	.+78     	; 0x662 <cmd_write+0x6c>
    fs_write_eof();
     614:	0e 94 90 10 	call	0x2120	; 0x2120 <fs_write_eof>
     618:	29 c0       	rjmp	.+82     	; 0x66c <cmd_write+0x76>
  // Запись данных
  do {
    if(fs_write_start()) return;

    // Принимаем от компьюетра блок данных
    send(ERR_OK_WRITE);
     61a:	86 e4       	ldi	r24, 0x46	; 70
     61c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
    sendBin((uint8_t*)&fs_file_wlen, 2);
     620:	62 e0       	ldi	r22, 0x02	; 2
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	8e ed       	ldi	r24, 0xDE	; 222
     626:	93 e0       	ldi	r25, 0x03	; 3
     628:	0e 94 9a 00 	call	0x134	; 0x134 <sendBin>
    recvStart();    
     62c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <recvStart>
    recvBin(fs_file_wbuf, fs_file_wlen);
     630:	60 91 de 03 	lds	r22, 0x03DE
     634:	70 91 df 03 	lds	r23, 0x03DF
     638:	80 91 e0 03 	lds	r24, 0x03E0
     63c:	90 91 e1 03 	lds	r25, 0x03E1
     640:	8e 57       	subi	r24, 0x7E	; 126
     642:	9e 4f       	sbci	r25, 0xFE	; 254
     644:	0e 94 6f 00 	call	0xde	; 0xde <recvBin>
    sendStart(ERR_WAIT);
     648:	81 e4       	ldi	r24, 0x41	; 65
     64a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>

    if(fs_write_end()) return;
     64e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <fs_write_end>
     652:	81 11       	cpse	r24, r1
     654:	0e c0       	rjmp	.+28     	; 0x672 <cmd_write+0x7c>
  } while(fs_wtotal);
     656:	80 91 82 03 	lds	r24, 0x0382
     65a:	90 91 83 03 	lds	r25, 0x0383
     65e:	89 2b       	or	r24, r25
     660:	29 f0       	breq	.+10     	; 0x66c <cmd_write+0x76>
    return;
  }
  
  // Запись данных
  do {
    if(fs_write_start()) return;
     662:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <fs_write_start>
     666:	88 23       	and	r24, r24
     668:	c1 f2       	breq	.-80     	; 0x61a <cmd_write+0x24>
     66a:	03 c0       	rjmp	.+6      	; 0x672 <cmd_write+0x7c>
    sendStart(ERR_WAIT);

    if(fs_write_end()) return;
  } while(fs_wtotal);

  lastError = ERR_OK_CMD;
     66c:	83 e4       	ldi	r24, 0x43	; 67
     66e:	80 93 af 03 	sts	0x03AF, r24
     672:	08 95       	ret

00000674 <error>:
* Главная процедура                                                            *
*******************************************************************************/

void error(void) {
  for(;;) {
    PORTB |= _BV(PB0);
     674:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	80 e7       	ldi	r24, 0x70	; 112
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <error+0x8>
     684:	00 c0       	rjmp	.+0      	; 0x686 <error+0x12>
     686:	00 00       	nop
    _delay_ms(100);
    PORTB &=~_BV(PB0);
     688:	28 98       	cbi	0x05, 0	; 5
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	80 e7       	ldi	r24, 0x70	; 112
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <error+0x1c>
     698:	00 c0       	rjmp	.+0      	; 0x69a <error+0x26>
     69a:	00 00       	nop
     69c:	eb cf       	rjmp	.-42     	; 0x674 <error>

0000069e <fs_clust2sect>:
*  Преобразовать номер кластера в номер сектора                           *
*  Аргумент и результат находятся в fs_tmp.                               *
*  Функция не портит buf                                                  *
***************************************************************************/

static void fs_clust2sect(void) {
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
  fs_tmp = (fs_tmp - 2) * fs_csize + fs_database;
     6a2:	a0 91 e6 03 	lds	r26, 0x03E6
     6a6:	20 91 de 03 	lds	r18, 0x03DE
     6aa:	30 91 df 03 	lds	r19, 0x03DF
     6ae:	40 91 e0 03 	lds	r20, 0x03E0
     6b2:	50 91 e1 03 	lds	r21, 0x03E1
     6b6:	22 50       	subi	r18, 0x02	; 2
     6b8:	31 09       	sbc	r19, r1
     6ba:	41 09       	sbc	r20, r1
     6bc:	51 09       	sbc	r21, r1
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__muluhisi3>
     6c4:	00 91 ab 03 	lds	r16, 0x03AB
     6c8:	10 91 ac 03 	lds	r17, 0x03AC
     6cc:	20 91 ad 03 	lds	r18, 0x03AD
     6d0:	30 91 ae 03 	lds	r19, 0x03AE
     6d4:	60 0f       	add	r22, r16
     6d6:	71 1f       	adc	r23, r17
     6d8:	82 1f       	adc	r24, r18
     6da:	93 1f       	adc	r25, r19
     6dc:	60 93 de 03 	sts	0x03DE, r22
     6e0:	70 93 df 03 	sts	0x03DF, r23
     6e4:	80 93 e0 03 	sts	0x03E0, r24
     6e8:	90 93 e1 03 	sts	0x03E1, r25
}
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <sd_readBuf>:

/**************************************************************************
*  Чтение сектора в буфер                                                 *
**************************************************************************/

static uint8_t sd_readBuf(unsigned long sector) {
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	ab 01       	movw	r20, r22
     6f8:	bc 01       	movw	r22, r24
  return sd_read(buf, sector, 0, 512);
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	12 e0       	ldi	r17, 0x02	; 2
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	82 e8       	ldi	r24, 0x82	; 130
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <sd_read>
}
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	08 95       	ret

00000710 <sd_writeBuf>:

/**************************************************************************
*  Запись буфера в сектор                                                 *
**************************************************************************/

static uint8_t sd_writeBuf(unsigned long sector) {
     710:	ab 01       	movw	r20, r22
     712:	bc 01       	movw	r22, r24
  return sd_write512(buf, sector);
     714:	82 e8       	ldi	r24, 0x82	; 130
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0c 94 20 13 	jmp	0x2640	; 0x2640 <sd_write512>

0000071c <fs_saveFatSector>:

/**************************************************************************
*  Сохранить изменения в обе таблицы FAT                                  *
**************************************************************************/

static uint8_t fs_saveFatSector(unsigned long sector) { 
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
  if(fs_fatbase2) if(sd_writeBuf(fs_fatbase2+sector)) return 1;
     728:	80 91 d9 03 	lds	r24, 0x03D9
     72c:	90 91 da 03 	lds	r25, 0x03DA
     730:	a0 91 db 03 	lds	r26, 0x03DB
     734:	b0 91 dc 03 	lds	r27, 0x03DC
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	a1 05       	cpc	r26, r1
     73c:	b1 05       	cpc	r27, r1
     73e:	91 f4       	brne	.+36     	; 0x764 <fs_saveFatSector+0x48>
  return sd_writeBuf(fs_fatbase+sector);
     740:	60 91 d5 03 	lds	r22, 0x03D5
     744:	70 91 d6 03 	lds	r23, 0x03D6
     748:	80 91 d7 03 	lds	r24, 0x03D7
     74c:	90 91 d8 03 	lds	r25, 0x03D8
     750:	6c 0d       	add	r22, r12
     752:	7d 1d       	adc	r23, r13
     754:	8e 1d       	adc	r24, r14
     756:	9f 1d       	adc	r25, r15
}
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
*  Сохранить изменения в обе таблицы FAT                                  *
**************************************************************************/

static uint8_t fs_saveFatSector(unsigned long sector) { 
  if(fs_fatbase2) if(sd_writeBuf(fs_fatbase2+sector)) return 1;
  return sd_writeBuf(fs_fatbase+sector);
     760:	0c 94 88 03 	jmp	0x710	; 0x710 <sd_writeBuf>
/**************************************************************************
*  Сохранить изменения в обе таблицы FAT                                  *
**************************************************************************/

static uint8_t fs_saveFatSector(unsigned long sector) { 
  if(fs_fatbase2) if(sd_writeBuf(fs_fatbase2+sector)) return 1;
     764:	bc 01       	movw	r22, r24
     766:	cd 01       	movw	r24, r26
     768:	6c 0d       	add	r22, r12
     76a:	7d 1d       	adc	r23, r13
     76c:	8e 1d       	adc	r24, r14
     76e:	9f 1d       	adc	r25, r15
     770:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
     774:	88 23       	and	r24, r24
     776:	21 f3       	breq	.-56     	; 0x740 <fs_saveFatSector+0x24>
  return sd_writeBuf(fs_fatbase+sector);
}
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	08 95       	ret

00000784 <fs_allocCluster>:
#else
#define DIS(X) X
#define ALLOCCLUSTER 0
#endif

static uint8_t fs_allocCluster(DIS(uint8_t freeSpace)) {
     784:	4f 92       	push	r4
     786:	5f 92       	push	r5
     788:	6f 92       	push	r6
     78a:	7f 92       	push	r7
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	b8 2e       	mov	r11, r24
  uint8_t i;
  unsigned long s;
  uint8_t *a;

  /* Начинаем поиск с этого кластера */
  fs_tmp = fs_fatoptim;
     7a4:	80 91 e2 03 	lds	r24, 0x03E2
     7a8:	90 91 e3 03 	lds	r25, 0x03E3
     7ac:	a0 91 e4 03 	lds	r26, 0x03E4
     7b0:	b0 91 e5 03 	lds	r27, 0x03E5
     7b4:	80 93 de 03 	sts	0x03DE, r24
     7b8:	90 93 df 03 	sts	0x03DF, r25
     7bc:	a0 93 e0 03 	sts	0x03E0, r26
     7c0:	b0 93 e1 03 	sts	0x03E1, r27
  
  /* Последовательно перебираем сектора */
  while(1) {
    /* Сектор и смещение */ 
    s = fs_tmp / 256, i = (uint8_t)fs_tmp, a = (uint8_t*)((WORD*)buf + i);    
     7c4:	40 91 de 03 	lds	r20, 0x03DE
     7c8:	50 91 df 03 	lds	r21, 0x03DF
     7cc:	60 91 e0 03 	lds	r22, 0x03E0
     7d0:	70 91 e1 03 	lds	r23, 0x03E1
     7d4:	a4 2e       	mov	r10, r20
    if(fs_type != FS_FAT16) s = fs_tmp / 128, i |= 128, a = (uint8_t*)((unsigned long*)buf - 128 + i); 
     7d6:	80 91 dd 03 	lds	r24, 0x03DD
     7da:	81 11       	cpse	r24, r1
     7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <fs_allocCluster+0x70>
  fs_tmp = fs_fatoptim;
  
  /* Последовательно перебираем сектора */
  while(1) {
    /* Сектор и смещение */ 
    s = fs_tmp / 256, i = (uint8_t)fs_tmp, a = (uint8_t*)((WORD*)buf + i);    
     7de:	c5 2e       	mov	r12, r21
     7e0:	d6 2e       	mov	r13, r22
     7e2:	e7 2e       	mov	r14, r23
     7e4:	ff 24       	eor	r15, r15
     7e6:	c4 2f       	mov	r28, r20
     7e8:	d0 e0       	ldi	r29, 0x00	; 0
     7ea:	cc 0f       	add	r28, r28
     7ec:	dd 1f       	adc	r29, r29
     7ee:	ce 57       	subi	r28, 0x7E	; 126
     7f0:	de 4f       	sbci	r29, 0xFE	; 254
     7f2:	12 c0       	rjmp	.+36     	; 0x818 <fs_allocCluster+0x94>
    if(fs_type != FS_FAT16) s = fs_tmp / 128, i |= 128, a = (uint8_t*)((unsigned long*)buf - 128 + i); 
     7f4:	6a 01       	movw	r12, r20
     7f6:	7b 01       	movw	r14, r22
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	f6 94       	lsr	r15
     7fc:	e7 94       	ror	r14
     7fe:	d7 94       	ror	r13
     800:	c7 94       	ror	r12
     802:	8a 95       	dec	r24
     804:	d1 f7       	brne	.-12     	; 0x7fa <fs_allocCluster+0x76>
     806:	84 2f       	mov	r24, r20
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	a8 2e       	mov	r10, r24
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	a8 9e       	mul	r10, r24
     810:	e0 01       	movw	r28, r0
     812:	11 24       	eor	r1, r1
     814:	ce 57       	subi	r28, 0x7E	; 126
     816:	d0 40       	sbci	r29, 0x00	; 0
    
    /* Читаем сектор */
    if(sd_readBuf(fs_fatbase + s)) goto abort;   
     818:	60 91 d5 03 	lds	r22, 0x03D5
     81c:	70 91 d6 03 	lds	r23, 0x03D6
     820:	80 91 d7 03 	lds	r24, 0x03D7
     824:	90 91 d8 03 	lds	r25, 0x03D8
     828:	6c 0d       	add	r22, r12
     82a:	7d 1d       	adc	r23, r13
     82c:	8e 1d       	adc	r24, r14
     82e:	9f 1d       	adc	r25, r15
     830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
     834:	81 11       	cpse	r24, r1
     836:	b6 c0       	rjmp	.+364    	; 0x9a4 <__stack+0xa5>
    
    /* Среди 128/256 чисел в секторе ищем 0 */    
    /* Куча проверок внутри цикла не самое быстрое решение, но зато получается очень компактный код. */    
    do {
      /* Кластеры кончились */
      if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto abort; }
     838:	80 91 84 03 	lds	r24, 0x0384
     83c:	90 91 85 03 	lds	r25, 0x0385
     840:	a0 91 86 03 	lds	r26, 0x0386
     844:	b0 91 87 03 	lds	r27, 0x0387
      
      /* Ищем свободный кластер и помечаем как последний */
      if(fs_type == FS_FAT16) {
     848:	90 90 dd 03 	lds	r9, 0x03DD
     84c:	e0 91 de 03 	lds	r30, 0x03DE
     850:	00 91 a4 03 	lds	r16, 0x03A4
     854:	10 91 a5 03 	lds	r17, 0x03A5
     858:	20 91 a6 03 	lds	r18, 0x03A6
     85c:	30 91 a7 03 	lds	r19, 0x03A7
     860:	4e 2f       	mov	r20, r30
     862:	50 91 df 03 	lds	r21, 0x03DF
     866:	60 91 e0 03 	lds	r22, 0x03E0
     86a:	70 91 e1 03 	lds	r23, 0x03E1
     86e:	ae 1a       	sub	r10, r30
    
    /* Среди 128/256 чисел в секторе ищем 0 */    
    /* Куча проверок внутри цикла не самое быстрое решение, но зато получается очень компактный код. */    
    do {
      /* Кластеры кончились */
      if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto abort; }
     870:	48 17       	cp	r20, r24
     872:	59 07       	cpc	r21, r25
     874:	6a 07       	cpc	r22, r26
     876:	7b 07       	cpc	r23, r27
     878:	b0 f0       	brcs	.+44     	; 0x8a6 <fs_allocCluster+0x122>
     87a:	40 93 de 03 	sts	0x03DE, r20
     87e:	50 93 df 03 	sts	0x03DF, r21
     882:	60 93 e0 03 	sts	0x03E0, r22
     886:	70 93 e1 03 	sts	0x03E1, r23
     88a:	00 93 a4 03 	sts	0x03A4, r16
     88e:	10 93 a5 03 	sts	0x03A5, r17
     892:	20 93 a6 03 	sts	0x03A6, r18
     896:	30 93 a7 03 	sts	0x03A7, r19
     89a:	b1 10       	cpse	r11, r1
     89c:	85 c0       	rjmp	.+266    	; 0x9a8 <__stack+0xa9>
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	80 93 af 03 	sts	0x03AF, r24
     8a4:	7f c0       	rjmp	.+254    	; 0x9a4 <__stack+0xa5>
      
      /* Ищем свободный кластер и помечаем как последний */
      if(fs_type == FS_FAT16) {
     8a6:	91 10       	cpse	r9, r1
     8a8:	21 c0       	rjmp	.+66     	; 0x8ec <fs_allocCluster+0x168>
        if(LD_WORD(a) == 0) { DIS(if(!freeSpace) {) LD_WORD(a) = (WORD)LAST_CLUSTER; goto founded; DIS(} fs_file.sector++;) }
     8aa:	e8 81       	ld	r30, Y
     8ac:	f9 81       	ldd	r31, Y+1	; 0x01
     8ae:	ef 2b       	or	r30, r31
     8b0:	d9 f4       	brne	.+54     	; 0x8e8 <fs_allocCluster+0x164>
     8b2:	b1 10       	cpse	r11, r1
     8b4:	15 c0       	rjmp	.+42     	; 0x8e0 <fs_allocCluster+0x15c>
     8b6:	40 93 de 03 	sts	0x03DE, r20
     8ba:	50 93 df 03 	sts	0x03DF, r21
     8be:	60 93 e0 03 	sts	0x03E0, r22
     8c2:	70 93 e1 03 	sts	0x03E1, r23
     8c6:	00 93 a4 03 	sts	0x03A4, r16
     8ca:	10 93 a5 03 	sts	0x03A5, r17
     8ce:	20 93 a6 03 	sts	0x03A6, r18
     8d2:	30 93 a7 03 	sts	0x03A7, r19
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	99 83       	std	Y+1, r25	; 0x01
     8dc:	88 83       	st	Y, r24
     8de:	47 c0       	rjmp	.+142    	; 0x96e <__stack+0x6f>
     8e0:	0f 5f       	subi	r16, 0xFF	; 255
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	2f 4f       	sbci	r18, 0xFF	; 255
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
        a += 2;
     8e8:	22 96       	adiw	r28, 0x02	; 2
     8ea:	28 c0       	rjmp	.+80     	; 0x93c <__stack+0x3d>
      } else {
        if(LD_DWORD(a) == 0) { DIS(if(!freeSpace) {) LD_DWORD(a) = LAST_CLUSTER; goto founded; DIS(} fs_file.sector++;) }
     8ec:	48 80       	ld	r4, Y
     8ee:	59 80       	ldd	r5, Y+1	; 0x01
     8f0:	6a 80       	ldd	r6, Y+2	; 0x02
     8f2:	7b 80       	ldd	r7, Y+3	; 0x03
     8f4:	45 28       	or	r4, r5
     8f6:	46 28       	or	r4, r6
     8f8:	47 28       	or	r4, r7
     8fa:	f9 f4       	brne	.+62     	; 0x93a <__stack+0x3b>
     8fc:	b1 10       	cpse	r11, r1
     8fe:	19 c0       	rjmp	.+50     	; 0x932 <__stack+0x33>
     900:	40 93 de 03 	sts	0x03DE, r20
     904:	50 93 df 03 	sts	0x03DF, r21
     908:	60 93 e0 03 	sts	0x03E0, r22
     90c:	70 93 e1 03 	sts	0x03E1, r23
     910:	00 93 a4 03 	sts	0x03A4, r16
     914:	10 93 a5 03 	sts	0x03A5, r17
     918:	20 93 a6 03 	sts	0x03A6, r18
     91c:	30 93 a7 03 	sts	0x03A7, r19
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	af ef       	ldi	r26, 0xFF	; 255
     926:	bf e0       	ldi	r27, 0x0F	; 15
     928:	88 83       	st	Y, r24
     92a:	99 83       	std	Y+1, r25	; 0x01
     92c:	aa 83       	std	Y+2, r26	; 0x02
     92e:	bb 83       	std	Y+3, r27	; 0x03
     930:	1e c0       	rjmp	.+60     	; 0x96e <__stack+0x6f>
     932:	0f 5f       	subi	r16, 0xFF	; 255
     934:	1f 4f       	sbci	r17, 0xFF	; 255
     936:	2f 4f       	sbci	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
        a += 4;
     93a:	24 96       	adiw	r28, 0x04	; 4
      }
      
      /* Счетчик */
      ++fs_tmp, ++i;
     93c:	4f 5f       	subi	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	6f 4f       	sbci	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	ea 2d       	mov	r30, r10
     946:	e4 0f       	add	r30, r20
    } while(i != 0);
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
     94a:	92 cf       	rjmp	.-220    	; 0x870 <fs_allocCluster+0xec>
     94c:	40 93 de 03 	sts	0x03DE, r20
     950:	50 93 df 03 	sts	0x03DF, r21
     954:	60 93 e0 03 	sts	0x03E0, r22
     958:	70 93 e1 03 	sts	0x03E1, r23
     95c:	00 93 a4 03 	sts	0x03A4, r16
     960:	10 93 a5 03 	sts	0x03A5, r17
     964:	20 93 a6 03 	sts	0x03A6, r18
     968:	30 93 a7 03 	sts	0x03A7, r19
     96c:	2b cf       	rjmp	.-426    	; 0x7c4 <fs_allocCluster+0x40>
  }          
founded:  
  /* Оптимизация */
  fs_fatoptim = fs_tmp;
     96e:	40 93 e2 03 	sts	0x03E2, r20
     972:	50 93 e3 03 	sts	0x03E3, r21
     976:	60 93 e4 03 	sts	0x03E4, r22
     97a:	70 93 e5 03 	sts	0x03E5, r23
  
  /* Сохраняем изменения */
  return fs_saveFatSector(s);
     97e:	c7 01       	movw	r24, r14
     980:	b6 01       	movw	r22, r12
abort:
  return 1;
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
founded:  
  /* Оптимизация */
  fs_fatoptim = fs_tmp;
  
  /* Сохраняем изменения */
  return fs_saveFatSector(s);
     9a0:	0c 94 8e 03 	jmp	0x71c	; 0x71c <fs_saveFatSector>
abort:
  return 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0xab>
    
    /* Среди 128/256 чисел в секторе ищем 0 */    
    /* Куча проверок внутри цикла не самое быстрое решение, но зато получается очень компактный код. */    
    do {
      /* Кластеры кончились */
      if(fs_tmp >= fs_n_fatent) { DIS(if(freeSpace) return 0;) lastError = ERR_NO_FREE_SPACE; goto abort; }
     9a8:	80 e0       	ldi	r24, 0x00	; 0
  
  /* Сохраняем изменения */
  return fs_saveFatSector(s);
abort:
  return 1;
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	4f 90       	pop	r4
     9c8:	08 95       	ret

000009ca <fs_setNextCluster>:
*                                                                         *
*  Если fs_tmp!=0, то FAT[cluster] = fs_tmp                               *
*  Если fs_tmp==0, то swap(FAT[cluster], fs_tmp)                          *
**************************************************************************/

static uint8_t fs_setNextCluster(unsigned long cluster) {
     9ca:	8f 92       	push	r8
     9cc:	9f 92       	push	r9
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	6b 01       	movw	r12, r22
     9dc:	7c 01       	movw	r14, r24
  unsigned long s, prev;
  void* a;                                            
  
  /* Вычисляем сектор */  
  s = cluster / 128;
  if(fs_type == FS_FAT16) s = cluster / 256;
     9de:	80 91 dd 03 	lds	r24, 0x03DD
     9e2:	88 23       	and	r24, r24
     9e4:	51 f0       	breq	.+20     	; 0x9fa <fs_setNextCluster+0x30>
static uint8_t fs_setNextCluster(unsigned long cluster) {
  unsigned long s, prev;
  void* a;                                            
  
  /* Вычисляем сектор */  
  s = cluster / 128;
     9e6:	46 01       	movw	r8, r12
     9e8:	57 01       	movw	r10, r14
     9ea:	57 e0       	ldi	r21, 0x07	; 7
     9ec:	b6 94       	lsr	r11
     9ee:	a7 94       	ror	r10
     9f0:	97 94       	ror	r9
     9f2:	87 94       	ror	r8
     9f4:	5a 95       	dec	r21
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <fs_setNextCluster+0x22>
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <fs_setNextCluster+0x38>
  if(fs_type == FS_FAT16) s = cluster / 256;
     9fa:	8d 2c       	mov	r8, r13
     9fc:	9e 2c       	mov	r9, r14
     9fe:	af 2c       	mov	r10, r15
     a00:	bb 24       	eor	r11, r11
  
  /* Читаем сектор */  
  if(sd_readBuf(fs_fatbase + s)) return 1;
     a02:	60 91 d5 03 	lds	r22, 0x03D5
     a06:	70 91 d6 03 	lds	r23, 0x03D6
     a0a:	80 91 d7 03 	lds	r24, 0x03D7
     a0e:	90 91 d8 03 	lds	r25, 0x03D8
     a12:	68 0d       	add	r22, r8
     a14:	79 1d       	adc	r23, r9
     a16:	8a 1d       	adc	r24, r10
     a18:	9b 1d       	adc	r25, r11
     a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
     a1e:	81 11       	cpse	r24, r1
     a20:	5f c0       	rjmp	.+190    	; 0xae0 <fs_setNextCluster+0x116>
               
  /* Изменяем отдельный кластер */ 
  if(fs_type == FS_FAT16) {                                                                                    
     a22:	20 91 dd 03 	lds	r18, 0x03DD
     a26:	80 91 de 03 	lds	r24, 0x03DE
     a2a:	90 91 df 03 	lds	r25, 0x03DF
     a2e:	a0 91 e0 03 	lds	r26, 0x03E0
     a32:	b0 91 e1 03 	lds	r27, 0x03E1
    a = (WORD*)buf + (uint8_t)cluster;
     a36:	ec 2d       	mov	r30, r12
  
  /* Читаем сектор */  
  if(sd_readBuf(fs_fatbase + s)) return 1;
               
  /* Изменяем отдельный кластер */ 
  if(fs_type == FS_FAT16) {                                                                                    
     a38:	21 11       	cpse	r18, r1
     a3a:	10 c0       	rjmp	.+32     	; 0xa5c <fs_setNextCluster+0x92>
    a = (WORD*)buf + (uint8_t)cluster;
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	ee 57       	subi	r30, 0x7E	; 126
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
    prev = LD_WORD(a);
     a46:	40 81       	ld	r20, Z
     a48:	51 81       	ldd	r21, Z+1	; 0x01
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
    LD_WORD(a) = (WORD)fs_tmp;
     a4e:	20 91 de 03 	lds	r18, 0x03DE
     a52:	30 91 df 03 	lds	r19, 0x03DF
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	0f c0       	rjmp	.+30     	; 0xa7a <fs_setNextCluster+0xb0>
  } else {
    a = (unsigned long*)buf + (uint8_t)cluster % 128;
     a5c:	ef 77       	andi	r30, 0x7F	; 127
     a5e:	24 e0       	ldi	r18, 0x04	; 4
     a60:	e2 9f       	mul	r30, r18
     a62:	f0 01       	movw	r30, r0
     a64:	11 24       	eor	r1, r1
     a66:	ee 57       	subi	r30, 0x7E	; 126
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
    prev = LD_DWORD(a);
     a6a:	40 81       	ld	r20, Z
     a6c:	51 81       	ldd	r21, Z+1	; 0x01
     a6e:	62 81       	ldd	r22, Z+2	; 0x02
     a70:	73 81       	ldd	r23, Z+3	; 0x03
    LD_DWORD(a) = fs_tmp;
     a72:	80 83       	st	Z, r24
     a74:	91 83       	std	Z+1, r25	; 0x01
     a76:	a2 83       	std	Z+2, r26	; 0x02
     a78:	b3 83       	std	Z+3, r27	; 0x03
  }
    
  /* Оптимизация поиска свободного кластера. Внезапно if() if() занимает меньше ПЗУ, чем && */
  if(fs_tmp == FREE_CLUSTER) if(cluster < fs_fatoptim) fs_fatoptim = cluster;
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	a1 05       	cpc	r26, r1
     a7e:	b1 05       	cpc	r27, r1
     a80:	b1 f4       	brne	.+44     	; 0xaae <fs_setNextCluster+0xe4>
     a82:	80 91 e2 03 	lds	r24, 0x03E2
     a86:	90 91 e3 03 	lds	r25, 0x03E3
     a8a:	a0 91 e4 03 	lds	r26, 0x03E4
     a8e:	b0 91 e5 03 	lds	r27, 0x03E5
     a92:	c8 16       	cp	r12, r24
     a94:	d9 06       	cpc	r13, r25
     a96:	ea 06       	cpc	r14, r26
     a98:	fb 06       	cpc	r15, r27
     a9a:	70 f4       	brcc	.+28     	; 0xab8 <fs_setNextCluster+0xee>
     a9c:	c0 92 e2 03 	sts	0x03E2, r12
     aa0:	d0 92 e3 03 	sts	0x03E3, r13
     aa4:	e0 92 e4 03 	sts	0x03E4, r14
     aa8:	f0 92 e5 03 	sts	0x03E5, r15
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <fs_setNextCluster+0xee>

  /* Результат */
  if(fs_tmp == LAST_CLUSTER || fs_tmp == FREE_CLUSTER) 
     aae:	8f 3f       	cpi	r24, 0xFF	; 255
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	af 4f       	sbci	r26, 0xFF	; 255
     ab4:	bf 40       	sbci	r27, 0x0F	; 15
     ab6:	41 f4       	brne	.+16     	; 0xac8 <fs_setNextCluster+0xfe>
    fs_tmp = prev;
     ab8:	40 93 de 03 	sts	0x03DE, r20
     abc:	50 93 df 03 	sts	0x03DF, r21
     ac0:	60 93 e0 03 	sts	0x03E0, r22
     ac4:	70 93 e1 03 	sts	0x03E1, r23
  
  /* Сохраняем сектор */ 
  return fs_saveFatSector(s);
     ac8:	c5 01       	movw	r24, r10
     aca:	b4 01       	movw	r22, r8
}
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	bf 90       	pop	r11
     ad6:	af 90       	pop	r10
     ad8:	9f 90       	pop	r9
     ada:	8f 90       	pop	r8
  /* Результат */
  if(fs_tmp == LAST_CLUSTER || fs_tmp == FREE_CLUSTER) 
    fs_tmp = prev;
  
  /* Сохраняем сектор */ 
  return fs_saveFatSector(s);
     adc:	0c 94 8e 03 	jmp	0x71c	; 0x71c <fs_saveFatSector>
}
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <fs_freeChain>:

/**************************************************************************
*  Освободить цепочку кластеров начиная с fs_tmp                          *
**************************************************************************/

static uint8_t fs_freeChain(void) {
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
  unsigned long c;
  while(1) {
    if(fs_tmp < 2 || fs_tmp >= fs_n_fatent) return 0;
     af8:	60 91 de 03 	lds	r22, 0x03DE
     afc:	70 91 df 03 	lds	r23, 0x03DF
     b00:	80 91 e0 03 	lds	r24, 0x03E0
     b04:	90 91 e1 03 	lds	r25, 0x03E1
     b08:	62 30       	cpi	r22, 0x02	; 2
     b0a:	71 05       	cpc	r23, r1
     b0c:	81 05       	cpc	r24, r1
     b0e:	91 05       	cpc	r25, r1
     b10:	d8 f0       	brcs	.+54     	; 0xb48 <fs_freeChain+0x54>
     b12:	00 91 84 03 	lds	r16, 0x0384
     b16:	10 91 85 03 	lds	r17, 0x0385
     b1a:	20 91 86 03 	lds	r18, 0x0386
     b1e:	30 91 87 03 	lds	r19, 0x0387
     b22:	60 17       	cp	r22, r16
     b24:	71 07       	cpc	r23, r17
     b26:	82 07       	cpc	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	70 f4       	brcc	.+28     	; 0xb48 <fs_freeChain+0x54>
    /* Освободить кластер fs_tmp и записть в fs_tmp следующий за ним кластер */
    c = fs_tmp, fs_tmp = FREE_CLUSTER;
     b2c:	10 92 de 03 	sts	0x03DE, r1
     b30:	10 92 df 03 	sts	0x03DF, r1
     b34:	10 92 e0 03 	sts	0x03E0, r1
     b38:	10 92 e1 03 	sts	0x03E1, r1
    if(fs_setNextCluster(c)) break; /* fs_tmp будет содержать следующий кластер, так как записывается FREE_CLUSTER */
     b3c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fs_setNextCluster>
     b40:	88 23       	and	r24, r24
     b42:	d1 f2       	breq	.-76     	; 0xaf8 <fs_freeChain+0x4>
  }
  return 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <fs_freeChain+0x56>
**************************************************************************/

static uint8_t fs_freeChain(void) {
  unsigned long c;
  while(1) {
    if(fs_tmp < 2 || fs_tmp >= fs_n_fatent) return 0;
     b48:	80 e0       	ldi	r24, 0x00	; 0
    /* Освободить кластер fs_tmp и записть в fs_tmp следующий за ним кластер */
    c = fs_tmp, fs_tmp = FREE_CLUSTER;
    if(fs_setNextCluster(c)) break; /* fs_tmp будет содержать следующий кластер, так как записывается FREE_CLUSTER */
  }
  return 1;
}
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <fs_eraseCluster>:

/**************************************************************************
*  Очистить кластер и буфер                                               *
**************************************************************************/

static uint8_t fs_eraseCluster(uint8_t i) {
     b50:	cf 93       	push	r28
     b52:	c8 2f       	mov	r28, r24
  memset(buf, 0, 512);
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	32 e0       	ldi	r19, 0x02	; 2
     b58:	e2 e8       	ldi	r30, 0x82	; 130
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	df 01       	movw	r26, r30
     b5e:	c9 01       	movw	r24, r18
     b60:	1d 92       	st	X+, r1
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	e9 f7       	brne	.-6      	; 0xb60 <fs_eraseCluster+0x10>
  for(; i < fs_csize; ++i)
     b66:	80 91 e6 03 	lds	r24, 0x03E6
     b6a:	c8 17       	cp	r28, r24
     b6c:	90 f4       	brcc	.+36     	; 0xb92 <fs_eraseCluster+0x42>
    if(sd_writeBuf(fs_tmp + i)) return 1;
     b6e:	60 91 de 03 	lds	r22, 0x03DE
     b72:	70 91 df 03 	lds	r23, 0x03DF
     b76:	80 91 e0 03 	lds	r24, 0x03E0
     b7a:	90 91 e1 03 	lds	r25, 0x03E1
     b7e:	6c 0f       	add	r22, r28
     b80:	71 1d       	adc	r23, r1
     b82:	81 1d       	adc	r24, r1
     b84:	91 1d       	adc	r25, r1
     b86:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
     b8a:	81 11       	cpse	r24, r1
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <fs_eraseCluster+0x46>
*  Очистить кластер и буфер                                               *
**************************************************************************/

static uint8_t fs_eraseCluster(uint8_t i) {
  memset(buf, 0, 512);
  for(; i < fs_csize; ++i)
     b8e:	cf 5f       	subi	r28, 0xFF	; 255
     b90:	ea cf       	rjmp	.-44     	; 0xb66 <fs_eraseCluster+0x16>
    if(sd_writeBuf(fs_tmp + i)) return 1;
  return 0;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <fs_eraseCluster+0x48>
**************************************************************************/

static uint8_t fs_eraseCluster(uint8_t i) {
  memset(buf, 0, 512);
  for(; i < fs_csize; ++i)
    if(sd_writeBuf(fs_tmp + i)) return 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
  return 0;
}
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <fs_nextCluster>:
/**************************************************************************
*  Получить следующий кластер.                                            *
*  Аргумент и результат находятся в fs_tmp.                               *
**************************************************************************/

static uint8_t fs_nextCluster(void) {
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
  if(fs_type == FS_FAT16) {                                                                                    
     ba0:	40 91 dd 03 	lds	r20, 0x03DD
     ba4:	80 91 de 03 	lds	r24, 0x03DE
     ba8:	90 91 df 03 	lds	r25, 0x03DF
     bac:	a0 91 e0 03 	lds	r26, 0x03E0
     bb0:	b0 91 e1 03 	lds	r27, 0x03E1
     bb4:	00 91 d5 03 	lds	r16, 0x03D5
     bb8:	10 91 d6 03 	lds	r17, 0x03D6
     bbc:	20 91 d7 03 	lds	r18, 0x03D7
     bc0:	30 91 d8 03 	lds	r19, 0x03D8
    if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto abort;
     bc4:	e8 2f       	mov	r30, r24
*  Получить следующий кластер.                                            *
*  Аргумент и результат находятся в fs_tmp.                               *
**************************************************************************/

static uint8_t fs_nextCluster(void) {
  if(fs_type == FS_FAT16) {                                                                                    
     bc6:	41 11       	cpse	r20, r1
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <fs_nextCluster+0x70>
    if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto abort;
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	49 2f       	mov	r20, r25
     bd2:	5a 2f       	mov	r21, r26
     bd4:	6b 2f       	mov	r22, r27
     bd6:	77 27       	eor	r23, r23
     bd8:	40 0f       	add	r20, r16
     bda:	51 1f       	adc	r21, r17
     bdc:	62 1f       	adc	r22, r18
     bde:	73 1f       	adc	r23, r19
     be0:	02 e0       	ldi	r16, 0x02	; 2
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	9f 01       	movw	r18, r30
     be6:	8e ed       	ldi	r24, 0xDE	; 222
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <sd_read>
     bee:	88 23       	and	r24, r24
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <fs_nextCluster+0x5a>
  /* Для удобства разработки заменяем последний кластер на ноль. */
  if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
    fs_tmp = 0;
  return 0;
abort:
  return 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	5a c0       	rjmp	.+180    	; 0xcaa <fs_nextCluster+0x10e>
**************************************************************************/

static uint8_t fs_nextCluster(void) {
  if(fs_type == FS_FAT16) {                                                                                    
    if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 256, (WORD)(uint8_t)fs_tmp * 2, 2)) goto abort;
    fs_tmp &= 0xFFFF;
     bf6:	80 91 de 03 	lds	r24, 0x03DE
     bfa:	90 91 df 03 	lds	r25, 0x03DF
     bfe:	a0 91 e0 03 	lds	r26, 0x03E0
     c02:	b0 91 e1 03 	lds	r27, 0x03E1
     c06:	aa 27       	eor	r26, r26
     c08:	bb 27       	eor	r27, r27
     c0a:	24 c0       	rjmp	.+72     	; 0xc54 <fs_nextCluster+0xb8>
  } else {
    if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 128, (WORD)((uint8_t)fs_tmp % 128) * 4, 4)) goto abort;
     c0c:	ef 77       	andi	r30, 0x7F	; 127
     c0e:	44 e0       	ldi	r20, 0x04	; 4
     c10:	e4 9f       	mul	r30, r20
     c12:	f0 01       	movw	r30, r0
     c14:	11 24       	eor	r1, r1
     c16:	ac 01       	movw	r20, r24
     c18:	bd 01       	movw	r22, r26
     c1a:	a7 e0       	ldi	r26, 0x07	; 7
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	aa 95       	dec	r26
     c26:	d1 f7       	brne	.-12     	; 0xc1c <fs_nextCluster+0x80>
     c28:	40 0f       	add	r20, r16
     c2a:	51 1f       	adc	r21, r17
     c2c:	62 1f       	adc	r22, r18
     c2e:	73 1f       	adc	r23, r19
     c30:	04 e0       	ldi	r16, 0x04	; 4
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	9f 01       	movw	r18, r30
     c36:	8e ed       	ldi	r24, 0xDE	; 222
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <sd_read>
     c3e:	81 11       	cpse	r24, r1
     c40:	d8 cf       	rjmp	.-80     	; 0xbf2 <fs_nextCluster+0x56>
    fs_tmp &= 0x0FFFFFFF;
     c42:	80 91 de 03 	lds	r24, 0x03DE
     c46:	90 91 df 03 	lds	r25, 0x03DF
     c4a:	a0 91 e0 03 	lds	r26, 0x03E0
     c4e:	b0 91 e1 03 	lds	r27, 0x03E1
     c52:	bf 70       	andi	r27, 0x0F	; 15
     c54:	80 93 de 03 	sts	0x03DE, r24
     c58:	90 93 df 03 	sts	0x03DF, r25
     c5c:	a0 93 e0 03 	sts	0x03E0, r26
     c60:	b0 93 e1 03 	sts	0x03E1, r27
  }                            
  /* Для удобства разработки заменяем последний кластер на ноль. */
  if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
     c64:	80 91 de 03 	lds	r24, 0x03DE
     c68:	90 91 df 03 	lds	r25, 0x03DF
     c6c:	a0 91 e0 03 	lds	r26, 0x03E0
     c70:	b0 91 e1 03 	lds	r27, 0x03E1
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	68 f0       	brcs	.+26     	; 0xc98 <fs_nextCluster+0xfc>
     c7e:	40 91 84 03 	lds	r20, 0x0384
     c82:	50 91 85 03 	lds	r21, 0x0385
     c86:	60 91 86 03 	lds	r22, 0x0386
     c8a:	70 91 87 03 	lds	r23, 0x0387
     c8e:	84 17       	cp	r24, r20
     c90:	95 07       	cpc	r25, r21
     c92:	a6 07       	cpc	r26, r22
     c94:	b7 07       	cpc	r27, r23
     c96:	40 f0       	brcs	.+16     	; 0xca8 <fs_nextCluster+0x10c>
    fs_tmp = 0;
     c98:	10 92 de 03 	sts	0x03DE, r1
     c9c:	10 92 df 03 	sts	0x03DF, r1
     ca0:	10 92 e0 03 	sts	0x03E0, r1
     ca4:	10 92 e1 03 	sts	0x03E1, r1
  } else {
    if(sd_read((uint8_t*)&fs_tmp, fs_fatbase + fs_tmp / 128, (WORD)((uint8_t)fs_tmp % 128) * 4, 4)) goto abort;
    fs_tmp &= 0x0FFFFFFF;
  }                            
  /* Для удобства разработки заменяем последний кластер на ноль. */
  if(fs_tmp < 2 || fs_tmp >= fs_n_fatent)
     ca8:	80 e0       	ldi	r24, 0x00	; 0
    fs_tmp = 0;
  return 0;
abort:
  return 1;
}
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <fs_readdirInt>:
*  приведено                                                              *
*                                                                         *
*  Функция не портит buf[0..MAX_FILENAME-1]                               *
***************************************************************************/
 
static uint8_t fs_readdirInt(void) {
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
  if(fs_file.entry_able) {
     cb4:	80 91 89 03 	lds	r24, 0x0389
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <fs_readdirInt+0xe>
     cbc:	82 c0       	rjmp	.+260    	; 0xdc2 <fs_readdirInt+0x112>
    fs_file.entry_index++;
     cbe:	80 91 8a 03 	lds	r24, 0x038A
     cc2:	90 91 8b 03 	lds	r25, 0x038B
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 8b 03 	sts	0x038B, r25
     ccc:	80 93 8a 03 	sts	0x038A, r24

    /* В папке не может быть больше 65536 файлов, а в корне FAT16 не больше  fs_n_rootdir */
    if(fs_file.entry_index == 0 || (fs_file.entry_cluster == 0 && fs_file.entry_index == fs_n_rootdir)) { 
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	a1 f0       	breq	.+40     	; 0xcfc <fs_readdirInt+0x4c>
     cd4:	00 91 8c 03 	lds	r16, 0x038C
     cd8:	10 91 8d 03 	lds	r17, 0x038D
     cdc:	20 91 8e 03 	lds	r18, 0x038E
     ce0:	30 91 8f 03 	lds	r19, 0x038F
     ce4:	01 15       	cp	r16, r1
     ce6:	11 05       	cpc	r17, r1
     ce8:	21 05       	cpc	r18, r1
     cea:	31 05       	cpc	r19, r1
     cec:	89 f4       	brne	.+34     	; 0xd10 <fs_readdirInt+0x60>
     cee:	40 91 a9 03 	lds	r20, 0x03A9
     cf2:	50 91 aa 03 	lds	r21, 0x03AA
     cf6:	84 17       	cp	r24, r20
     cf8:	95 07       	cpc	r25, r21
     cfa:	51 f4       	brne	.+20     	; 0xd10 <fs_readdirInt+0x60>
      fs_file.entry_index = 0;
     cfc:	10 92 8b 03 	sts	0x038B, r1
     d00:	10 92 8a 03 	sts	0x038A, r1
retEnd:
      FS_DIRENTRY[DIR_Name] = 0; /* Признак последнего файла для пользователя вызывающего fs_dirread */
     d04:	10 92 62 03 	sts	0x0362, r1
      fs_file.entry_able = 0; 
     d08:	10 92 89 03 	sts	0x0389, r1
      return 0; 
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	c1 c0       	rjmp	.+386    	; 0xe92 <fs_readdirInt+0x1e2>
    }	
      
    /* Граница сектора */
    if(fs_file.entry_index % 16 == 0) {        
     d10:	ac 01       	movw	r20, r24
     d12:	4f 70       	andi	r20, 0x0F	; 15
     d14:	55 27       	eor	r21, r21
     d16:	45 2b       	or	r20, r21
     d18:	09 f0       	breq	.+2      	; 0xd1c <fs_readdirInt+0x6c>
     d1a:	a0 c0       	rjmp	.+320    	; 0xe5c <fs_readdirInt+0x1ac>
      fs_file.entry_sector++;		
     d1c:	40 91 90 03 	lds	r20, 0x0390
     d20:	50 91 91 03 	lds	r21, 0x0391
     d24:	60 91 92 03 	lds	r22, 0x0392
     d28:	70 91 93 03 	lds	r23, 0x0393
     d2c:	4f 5f       	subi	r20, 0xFF	; 255
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	6f 4f       	sbci	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	40 93 90 03 	sts	0x0390, r20
     d38:	50 93 91 03 	sts	0x0391, r21
     d3c:	60 93 92 03 	sts	0x0392, r22
     d40:	70 93 93 03 	sts	0x0393, r23

      /* Граница кластера */
      if(fs_file.entry_cluster != 0 && ((fs_file.entry_index / 16) % fs_csize) == 0) {
     d44:	01 15       	cp	r16, r1
     d46:	11 05       	cpc	r17, r1
     d48:	21 05       	cpc	r18, r1
     d4a:	31 05       	cpc	r19, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <fs_readdirInt+0xa0>
     d4e:	86 c0       	rjmp	.+268    	; 0xe5c <fs_readdirInt+0x1ac>
     d50:	74 e0       	ldi	r23, 0x04	; 4
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	7a 95       	dec	r23
     d58:	e1 f7       	brne	.-8      	; 0xd52 <fs_readdirInt+0xa2>
     d5a:	60 91 e6 03 	lds	r22, 0x03E6
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	0e 94 37 14 	call	0x286e	; 0x286e <__udivmodhi4>
     d64:	89 2b       	or	r24, r25
     d66:	09 f0       	breq	.+2      	; 0xd6a <fs_readdirInt+0xba>
     d68:	79 c0       	rjmp	.+242    	; 0xe5c <fs_readdirInt+0x1ac>

        /* Следующий кластер */ 
        fs_tmp = fs_file.entry_cluster;
     d6a:	00 93 de 03 	sts	0x03DE, r16
     d6e:	10 93 df 03 	sts	0x03DF, r17
     d72:	20 93 e0 03 	sts	0x03E0, r18
     d76:	30 93 e1 03 	sts	0x03E1, r19
        if(fs_nextCluster()) return 1;
     d7a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <fs_nextCluster>
     d7e:	81 11       	cpse	r24, r1
     d80:	87 c0       	rjmp	.+270    	; 0xe90 <fs_readdirInt+0x1e0>
        if(fs_tmp == 0) goto retEnd; /* Последний кластер, устаналиваем fs_file.entry_able = 0 */
     d82:	80 91 de 03 	lds	r24, 0x03DE
     d86:	90 91 df 03 	lds	r25, 0x03DF
     d8a:	a0 91 e0 03 	lds	r26, 0x03E0
     d8e:	b0 91 e1 03 	lds	r27, 0x03E1
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	a1 05       	cpc	r26, r1
     d96:	b1 05       	cpc	r27, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <fs_readdirInt+0xec>
     d9a:	b4 cf       	rjmp	.-152    	; 0xd04 <fs_readdirInt+0x54>
         
        /* Сохраняем */
        fs_file.entry_cluster = fs_tmp;
     d9c:	80 93 8c 03 	sts	0x038C, r24
     da0:	90 93 8d 03 	sts	0x038D, r25
     da4:	a0 93 8e 03 	sts	0x038E, r26
     da8:	b0 93 8f 03 	sts	0x038F, r27
        fs_clust2sect();
     dac:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>
        fs_file.entry_sector = fs_tmp;
     db0:	80 91 de 03 	lds	r24, 0x03DE
     db4:	90 91 df 03 	lds	r25, 0x03DF
     db8:	a0 91 e0 03 	lds	r26, 0x03E0
     dbc:	b0 91 e1 03 	lds	r27, 0x03E1
     dc0:	45 c0       	rjmp	.+138    	; 0xe4c <fs_readdirInt+0x19c>
      }
    }
  } else {
    fs_file.entry_index = 0;
     dc2:	10 92 8b 03 	sts	0x038B, r1
     dc6:	10 92 8a 03 	sts	0x038A, r1
    fs_file.entry_able  = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 89 03 	sts	0x0389, r24
    fs_tmp = fs_file.entry_start_cluster; 
     dd0:	80 91 94 03 	lds	r24, 0x0394
     dd4:	90 91 95 03 	lds	r25, 0x0395
     dd8:	a0 91 96 03 	lds	r26, 0x0396
     ddc:	b0 91 97 03 	lds	r27, 0x0397
     de0:	80 93 de 03 	sts	0x03DE, r24
     de4:	90 93 df 03 	sts	0x03DF, r25
     de8:	a0 93 e0 03 	sts	0x03E0, r26
     dec:	b0 93 e1 03 	sts	0x03E1, r27

    /* Первый кластер и сектор папки. Этот код не имеет смысла выполнять 
    для FAT16, но зато код хорошо сжимается. Т.к. этот кусок кода аналогичен 
    куску выше. */
    fs_file.entry_cluster = fs_tmp;
     df0:	80 93 8c 03 	sts	0x038C, r24
     df4:	90 93 8d 03 	sts	0x038D, r25
     df8:	a0 93 8e 03 	sts	0x038E, r26
     dfc:	b0 93 8f 03 	sts	0x038F, r27
    fs_clust2sect();
     e00:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>
    fs_file.entry_sector = fs_tmp;
     e04:	80 91 de 03 	lds	r24, 0x03DE
     e08:	90 91 df 03 	lds	r25, 0x03DF
     e0c:	a0 91 e0 03 	lds	r26, 0x03E0
     e10:	b0 91 e1 03 	lds	r27, 0x03E1
     e14:	80 93 90 03 	sts	0x0390, r24
     e18:	90 93 91 03 	sts	0x0391, r25
     e1c:	a0 93 92 03 	sts	0x0392, r26
     e20:	b0 93 93 03 	sts	0x0393, r27

    /* Корневая папка FS_FAT16 */  
    if(fs_file.entry_cluster == 0) fs_file.entry_sector = fs_dirbase;
     e24:	80 91 8c 03 	lds	r24, 0x038C
     e28:	90 91 8d 03 	lds	r25, 0x038D
     e2c:	a0 91 8e 03 	lds	r26, 0x038E
     e30:	b0 91 8f 03 	lds	r27, 0x038F
     e34:	89 2b       	or	r24, r25
     e36:	8a 2b       	or	r24, r26
     e38:	8b 2b       	or	r24, r27
     e3a:	81 f4       	brne	.+32     	; 0xe5c <fs_readdirInt+0x1ac>
     e3c:	80 91 d1 03 	lds	r24, 0x03D1
     e40:	90 91 d2 03 	lds	r25, 0x03D2
     e44:	a0 91 d3 03 	lds	r26, 0x03D3
     e48:	b0 91 d4 03 	lds	r27, 0x03D4
     e4c:	80 93 90 03 	sts	0x0390, r24
     e50:	90 93 91 03 	sts	0x0391, r25
     e54:	a0 93 92 03 	sts	0x0392, r26
     e58:	b0 93 93 03 	sts	0x0393, r27
  }

  return sd_read(FS_DIRENTRY, fs_file.entry_sector, (WORD)((fs_file.entry_index % 16) * 32), 32);
     e5c:	20 91 8a 03 	lds	r18, 0x038A
     e60:	30 91 8b 03 	lds	r19, 0x038B
     e64:	2f 70       	andi	r18, 0x0F	; 15
     e66:	33 27       	eor	r19, r19
     e68:	65 e0       	ldi	r22, 0x05	; 5
     e6a:	22 0f       	add	r18, r18
     e6c:	33 1f       	adc	r19, r19
     e6e:	6a 95       	dec	r22
     e70:	e1 f7       	brne	.-8      	; 0xe6a <fs_readdirInt+0x1ba>
     e72:	40 91 90 03 	lds	r20, 0x0390
     e76:	50 91 91 03 	lds	r21, 0x0391
     e7a:	60 91 92 03 	lds	r22, 0x0392
     e7e:	70 91 93 03 	lds	r23, 0x0393
     e82:	00 e2       	ldi	r16, 0x20	; 32
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	82 e6       	ldi	r24, 0x62	; 98
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <sd_read>
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <fs_readdirInt+0x1e2>
      /* Граница кластера */
      if(fs_file.entry_cluster != 0 && ((fs_file.entry_index / 16) % fs_csize) == 0) {

        /* Следующий кластер */ 
        fs_tmp = fs_file.entry_cluster;
        if(fs_nextCluster()) return 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
    /* Корневая папка FS_FAT16 */  
    if(fs_file.entry_cluster == 0) fs_file.entry_sector = fs_dirbase;
  }

  return sd_read(FS_DIRENTRY, fs_file.entry_sector, (WORD)((fs_file.entry_index % 16) * 32), 32);
}
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <fs_nextRWSector>:
/**************************************************************************
*  Вычислить номер следующего сектора для чтения/записи                   *
*  Вызывается только из fs_read0, fs_write_start                          *
**************************************************************************/

static uint8_t fs_nextRWSector(void) {
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
  if(fs_file.ptr == 0) {
     e9c:	80 91 98 03 	lds	r24, 0x0398
     ea0:	90 91 99 03 	lds	r25, 0x0399
     ea4:	a0 91 9a 03 	lds	r26, 0x039A
     ea8:	b0 91 9b 03 	lds	r27, 0x039B
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	a1 05       	cpc	r26, r1
     eb0:	b1 05       	cpc	r27, r1
     eb2:	89 f4       	brne	.+34     	; 0xed6 <fs_nextRWSector+0x3e>
    /* Чтение файла еще не начато */
    fs_tmp = fs_file.entry_start_cluster;
     eb4:	80 91 94 03 	lds	r24, 0x0394
     eb8:	90 91 95 03 	lds	r25, 0x0395
     ebc:	a0 91 96 03 	lds	r26, 0x0396
     ec0:	b0 91 97 03 	lds	r27, 0x0397
     ec4:	80 93 de 03 	sts	0x03DE, r24
     ec8:	90 93 df 03 	sts	0x03DF, r25
     ecc:	a0 93 e0 03 	sts	0x03E0, r26
     ed0:	b0 93 e1 03 	sts	0x03E1, r27
     ed4:	47 c0       	rjmp	.+142    	; 0xf64 <fs_nextRWSector+0xcc>
  } else {
    /* Еще не конец сектора */
    if((WORD)fs_file.ptr % 512) return 0;
     ed6:	91 70       	andi	r25, 0x01	; 1
     ed8:	89 2b       	or	r24, r25
     eda:	09 f0       	breq	.+2      	; 0xede <fs_nextRWSector+0x46>
     edc:	9d c0       	rjmp	.+314    	; 0x1018 <fs_nextRWSector+0x180>
        
    /* Следующий сектор */    
    fs_file.sector++;
     ede:	80 91 a4 03 	lds	r24, 0x03A4
     ee2:	90 91 a5 03 	lds	r25, 0x03A5
     ee6:	a0 91 a6 03 	lds	r26, 0x03A6
     eea:	b0 91 a7 03 	lds	r27, 0x03A7
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	a1 1d       	adc	r26, r1
     ef2:	b1 1d       	adc	r27, r1
     ef4:	80 93 a4 03 	sts	0x03A4, r24
     ef8:	90 93 a5 03 	sts	0x03A5, r25
     efc:	a0 93 a6 03 	sts	0x03A6, r26
     f00:	b0 93 a7 03 	sts	0x03A7, r27
        
    /* Еще не конец кластера */
    if(((fs_file.sector - fs_database) % fs_csize) != 0) return 0;
     f04:	40 91 ab 03 	lds	r20, 0x03AB
     f08:	50 91 ac 03 	lds	r21, 0x03AC
     f0c:	60 91 ad 03 	lds	r22, 0x03AD
     f10:	70 91 ae 03 	lds	r23, 0x03AE
     f14:	8c 01       	movw	r16, r24
     f16:	9d 01       	movw	r18, r26
     f18:	04 1b       	sub	r16, r20
     f1a:	15 0b       	sbc	r17, r21
     f1c:	26 0b       	sbc	r18, r22
     f1e:	37 0b       	sbc	r19, r23
     f20:	c9 01       	movw	r24, r18
     f22:	b8 01       	movw	r22, r16
     f24:	20 91 e6 03 	lds	r18, 0x03E6
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodsi4>
     f32:	67 2b       	or	r22, r23
     f34:	68 2b       	or	r22, r24
     f36:	69 2b       	or	r22, r25
     f38:	09 f0       	breq	.+2      	; 0xf3c <fs_nextRWSector+0xa4>
     f3a:	6e c0       	rjmp	.+220    	; 0x1018 <fs_nextRWSector+0x180>

    /* Следующий кластер */
    fs_tmp = fs_file.cluster;
     f3c:	80 91 a0 03 	lds	r24, 0x03A0
     f40:	90 91 a1 03 	lds	r25, 0x03A1
     f44:	a0 91 a2 03 	lds	r26, 0x03A2
     f48:	b0 91 a3 03 	lds	r27, 0x03A3
     f4c:	80 93 de 03 	sts	0x03DE, r24
     f50:	90 93 df 03 	sts	0x03DF, r25
     f54:	a0 93 e0 03 	sts	0x03E0, r26
     f58:	b0 93 e1 03 	sts	0x03E1, r27
    if(fs_nextCluster()) return 1;
     f5c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <fs_nextCluster>
     f60:	81 11       	cpse	r24, r1
     f62:	5c c0       	rjmp	.+184    	; 0x101c <fs_nextRWSector+0x184>
  }

  /* Если это был последний кластер, добавляем новый */
  if(fs_tmp == 0) {                
     f64:	80 91 de 03 	lds	r24, 0x03DE
     f68:	90 91 df 03 	lds	r25, 0x03DF
     f6c:	a0 91 e0 03 	lds	r26, 0x03E0
     f70:	b0 91 e1 03 	lds	r27, 0x03E1
     f74:	89 2b       	or	r24, r25
     f76:	8a 2b       	or	r24, r26
     f78:	8b 2b       	or	r24, r27
     f7a:	61 f5       	brne	.+88     	; 0xfd4 <fs_nextRWSector+0x13c>
    if(fs_allocCluster(ALLOCCLUSTER)) return 1;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 c2 03 	call	0x784	; 0x784 <fs_allocCluster>
     f82:	81 11       	cpse	r24, r1
     f84:	4b c0       	rjmp	.+150    	; 0x101c <fs_nextRWSector+0x184>
    if(fs_file.ptr == 0) fs_file.entry_start_cluster = fs_tmp;
     f86:	80 91 98 03 	lds	r24, 0x0398
     f8a:	90 91 99 03 	lds	r25, 0x0399
     f8e:	a0 91 9a 03 	lds	r26, 0x039A
     f92:	b0 91 9b 03 	lds	r27, 0x039B
     f96:	89 2b       	or	r24, r25
     f98:	8a 2b       	or	r24, r26
     f9a:	8b 2b       	or	r24, r27
     f9c:	89 f4       	brne	.+34     	; 0xfc0 <fs_nextRWSector+0x128>
     f9e:	80 91 de 03 	lds	r24, 0x03DE
     fa2:	90 91 df 03 	lds	r25, 0x03DF
     fa6:	a0 91 e0 03 	lds	r26, 0x03E0
     faa:	b0 91 e1 03 	lds	r27, 0x03E1
     fae:	80 93 94 03 	sts	0x0394, r24
     fb2:	90 93 95 03 	sts	0x0395, r25
     fb6:	a0 93 96 03 	sts	0x0396, r26
     fba:	b0 93 97 03 	sts	0x0397, r27
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <fs_nextRWSector+0x13c>
                    else fs_setNextCluster(fs_file.cluster); /* fs_tmp сохранится, так как он не LAST и не FREE */
     fc0:	60 91 a0 03 	lds	r22, 0x03A0
     fc4:	70 91 a1 03 	lds	r23, 0x03A1
     fc8:	80 91 a2 03 	lds	r24, 0x03A2
     fcc:	90 91 a3 03 	lds	r25, 0x03A3
     fd0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fs_setNextCluster>
  }

  /* Ок */
  fs_file.cluster = fs_tmp;
     fd4:	80 91 de 03 	lds	r24, 0x03DE
     fd8:	90 91 df 03 	lds	r25, 0x03DF
     fdc:	a0 91 e0 03 	lds	r26, 0x03E0
     fe0:	b0 91 e1 03 	lds	r27, 0x03E1
     fe4:	80 93 a0 03 	sts	0x03A0, r24
     fe8:	90 93 a1 03 	sts	0x03A1, r25
     fec:	a0 93 a2 03 	sts	0x03A2, r26
     ff0:	b0 93 a3 03 	sts	0x03A3, r27
  fs_clust2sect();
     ff4:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>
  fs_file.sector  = fs_tmp;
     ff8:	80 91 de 03 	lds	r24, 0x03DE
     ffc:	90 91 df 03 	lds	r25, 0x03DF
    1000:	a0 91 e0 03 	lds	r26, 0x03E0
    1004:	b0 91 e1 03 	lds	r27, 0x03E1
    1008:	80 93 a4 03 	sts	0x03A4, r24
    100c:	90 93 a5 03 	sts	0x03A5, r25
    1010:	a0 93 a6 03 	sts	0x03A6, r26
    1014:	b0 93 a7 03 	sts	0x03A7, r27
  return 0;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	01 c0       	rjmp	.+2      	; 0x101e <fs_nextRWSector+0x186>
    /* Еще не конец кластера */
    if(((fs_file.sector - fs_database) % fs_csize) != 0) return 0;

    /* Следующий кластер */
    fs_tmp = fs_file.cluster;
    if(fs_nextCluster()) return 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
  /* Ок */
  fs_file.cluster = fs_tmp;
  fs_clust2sect();
  fs_file.sector  = fs_tmp;
  return 0;
}
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <fs_saveFileLength>:
**************************************************************************/

static char fs_saveFileLength(void) {
  uint8_t* entry;

  if(fs_file.changed == 0) return 0;
    1024:	80 91 a8 03 	lds	r24, 0x03A8
    1028:	88 23       	and	r24, r24
    102a:	e9 f1       	breq	.+122    	; 0x10a6 <fs_saveFileLength+0x82>
  fs_file.changed = 0;
    102c:	10 92 a8 03 	sts	0x03A8, r1

  /* Изменение описателя файла */
  if(sd_readBuf(fs_file.entry_sector)) return 1;
    1030:	60 91 90 03 	lds	r22, 0x0390
    1034:	70 91 91 03 	lds	r23, 0x0391
    1038:	80 91 92 03 	lds	r24, 0x0392
    103c:	90 91 93 03 	lds	r25, 0x0393
    1040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    1044:	81 11       	cpse	r24, r1
    1046:	31 c0       	rjmp	.+98     	; 0x10aa <fs_saveFileLength+0x86>

  entry = buf + (fs_file.entry_index % 16) * 32;
    1048:	e0 91 8a 03 	lds	r30, 0x038A
    104c:	f0 91 8b 03 	lds	r31, 0x038B
    1050:	ef 70       	andi	r30, 0x0F	; 15
    1052:	ff 27       	eor	r31, r31
    1054:	a5 e0       	ldi	r26, 0x05	; 5
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	aa 95       	dec	r26
    105c:	e1 f7       	brne	.-8      	; 0x1056 <fs_saveFileLength+0x32>
    105e:	ee 57       	subi	r30, 0x7E	; 126
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
  LD_DWORD(entry + DIR_FileSize) = fs_file.size;  
    1062:	80 91 9c 03 	lds	r24, 0x039C
    1066:	90 91 9d 03 	lds	r25, 0x039D
    106a:	a0 91 9e 03 	lds	r26, 0x039E
    106e:	b0 91 9f 03 	lds	r27, 0x039F
    1072:	84 8f       	std	Z+28, r24	; 0x1c
    1074:	95 8f       	std	Z+29, r25	; 0x1d
    1076:	a6 8f       	std	Z+30, r26	; 0x1e
    1078:	b7 8f       	std	Z+31, r27	; 0x1f
  fs_setEntryCluster(entry, fs_file.entry_start_cluster);
    107a:	80 91 94 03 	lds	r24, 0x0394
    107e:	90 91 95 03 	lds	r25, 0x0395
    1082:	a0 91 96 03 	lds	r26, 0x0396
    1086:	b0 91 97 03 	lds	r27, 0x0397
/**************************************************************************
*  Установить в описатель кластер                                         *
**************************************************************************/

static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
  LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
    108a:	93 8f       	std	Z+27, r25	; 0x1b
    108c:	82 8f       	std	Z+26, r24	; 0x1a
  LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
    108e:	b5 8b       	std	Z+21, r27	; 0x15
    1090:	a4 8b       	std	Z+20, r26	; 0x14

  entry = buf + (fs_file.entry_index % 16) * 32;
  LD_DWORD(entry + DIR_FileSize) = fs_file.size;  
  fs_setEntryCluster(entry, fs_file.entry_start_cluster);

  return sd_writeBuf(fs_file.entry_sector);
    1092:	60 91 90 03 	lds	r22, 0x0390
    1096:	70 91 91 03 	lds	r23, 0x0391
    109a:	80 91 92 03 	lds	r24, 0x0392
    109e:	90 91 93 03 	lds	r25, 0x0393
    10a2:	0c 94 88 03 	jmp	0x710	; 0x710 <sd_writeBuf>
**************************************************************************/

static char fs_saveFileLength(void) {
  uint8_t* entry;

  if(fs_file.changed == 0) return 0;
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	08 95       	ret
  fs_file.changed = 0;

  /* Изменение описателя файла */
  if(sd_readBuf(fs_file.entry_sector)) return 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
  entry = buf + (fs_file.entry_index % 16) * 32;
  LD_DWORD(entry + DIR_FileSize) = fs_file.size;  
  fs_setEntryCluster(entry, fs_file.entry_start_cluster);

  return sd_writeBuf(fs_file.entry_sector);
}
    10ac:	08 95       	ret

000010ae <fs_init>:

/**************************************************************************
*  Инициализация                                                          *
**************************************************************************/

uint8_t fs_init(void) {
    10ae:	2f 92       	push	r2
    10b0:	3f 92       	push	r3
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	2e 97       	sbiw	r28, 0x0e	; 14
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
  unsigned long bsect, fsize, tsect;

  /* Сбрасываем оптимизацию */
  fs_fatoptim = 2;
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	80 93 e2 03 	sts	0x03E2, r24
    10ec:	90 93 e3 03 	sts	0x03E3, r25
    10f0:	a0 93 e4 03 	sts	0x03E4, r26
    10f4:	b0 93 e5 03 	sts	0x03E5, r27

  /* Предотвращаем ошибки программиста */
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
    10f8:	10 92 88 03 	sts	0x0388, r1
#ifndef FS_DISABLE_SWAP  
  fs_secondFile.opened = OPENED_NONE;
    10fc:	10 92 b0 03 	sts	0x03B0, r1
#endif 
  fs_type = FS_ERROR;
    1100:	80 93 dd 03 	sts	0x03DD, r24
#endif

  /* Инициализация накопителя */
  if(sd_init()) return 1;
    1104:	0e 94 8f 12 	call	0x251e	; 0x251e <sd_init>
    1108:	88 23       	and	r24, r24
    110a:	11 f0       	breq	.+4      	; 0x1110 <fs_init+0x62>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	72 c1       	rjmp	.+740    	; 0x13f4 <fs_init+0x346>
    1110:	c1 2c       	mov	r12, r1
    1112:	d1 2c       	mov	r13, r1
    1114:	76 01       	movw	r14, r12
  
  /* Ищем файловую систему */
  bsect = 0;               
  while(1) {                 
    if(sd_readBuf(bsect)) return 1;
    1116:	c7 01       	movw	r24, r14
    1118:	b6 01       	movw	r22, r12
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    111e:	81 11       	cpse	r24, r1
    1120:	f5 cf       	rjmp	.-22     	; 0x110c <fs_init+0x5e>
    if(LD_WORD(buf + 510) == 0xAA55) {
    1122:	80 91 80 03 	lds	r24, 0x0380
    1126:	90 91 81 03 	lds	r25, 0x0381
    112a:	85 35       	cpi	r24, 0x55	; 85
    112c:	9a 4a       	sbci	r25, 0xAA	; 170
    112e:	21 f0       	breq	.+8      	; 0x1138 <fs_init+0x8a>
        bsect = LD_DWORD(buf + (MBR_Table + 8));
        if(bsect != 0) continue;
      }      
    }   
abort_noFS:
    lastError = ERR_NO_FILESYSTEM; return 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 af 03 	sts	0x03AF, r24
    1136:	5e c1       	rjmp	.+700    	; 0x13f4 <fs_init+0x346>
  /* Ищем файловую систему */
  bsect = 0;               
  while(1) {                 
    if(sd_readBuf(bsect)) return 1;
    if(LD_WORD(buf + 510) == 0xAA55) {
      if(LD_WORD(buf + BS_FilSysType  ) == 0x4146) break;
    1138:	80 91 b8 01 	lds	r24, 0x01B8
    113c:	90 91 b9 01 	lds	r25, 0x01B9
    1140:	86 34       	cpi	r24, 0x46	; 70
    1142:	91 44       	sbci	r25, 0x41	; 65
    1144:	e9 f0       	breq	.+58     	; 0x1180 <fs_init+0xd2>
      if(LD_WORD(buf + BS_FilSysType32) == 0x4146) break;
    1146:	80 91 d4 01 	lds	r24, 0x01D4
    114a:	90 91 d5 01 	lds	r25, 0x01D5
    114e:	86 34       	cpi	r24, 0x46	; 70
    1150:	91 44       	sbci	r25, 0x41	; 65
    1152:	b1 f0       	breq	.+44     	; 0x1180 <fs_init+0xd2>
      /* Возможно это MBR */       
      if(bsect == 0 && buf[MBR_Table+4]) { 
    1154:	cd 28       	or	r12, r13
    1156:	ce 28       	or	r12, r14
    1158:	cf 28       	or	r12, r15
    115a:	51 f7       	brne	.-44     	; 0x1130 <fs_init+0x82>
    115c:	80 91 44 03 	lds	r24, 0x0344
    1160:	88 23       	and	r24, r24
    1162:	31 f3       	breq	.-52     	; 0x1130 <fs_init+0x82>
        bsect = LD_DWORD(buf + (MBR_Table + 8));
    1164:	c0 90 48 03 	lds	r12, 0x0348
    1168:	d0 90 49 03 	lds	r13, 0x0349
    116c:	e0 90 4a 03 	lds	r14, 0x034A
    1170:	f0 90 4b 03 	lds	r15, 0x034B
        if(bsect != 0) continue;
    1174:	c1 14       	cp	r12, r1
    1176:	d1 04       	cpc	r13, r1
    1178:	e1 04       	cpc	r14, r1
    117a:	f1 04       	cpc	r15, r1
    117c:	61 f6       	brne	.-104    	; 0x1116 <fs_init+0x68>
    117e:	d8 cf       	rjmp	.-80     	; 0x1130 <fs_init+0x82>
abort_noFS:
    lastError = ERR_NO_FILESYSTEM; return 1;
  }
        
  /* Размер таблицы FAT в секторах */
  fsize = LD_WORD(buf + BPB_FATSz16);
    1180:	20 91 98 01 	lds	r18, 0x0198
    1184:	30 91 99 01 	lds	r19, 0x0199
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
  if(fsize == 0) fsize = LD_DWORD(buf + BPB_FATSz32);
    118c:	21 15       	cp	r18, r1
    118e:	31 05       	cpc	r19, r1
    1190:	41 05       	cpc	r20, r1
    1192:	51 05       	cpc	r21, r1
    1194:	41 f4       	brne	.+16     	; 0x11a6 <fs_init+0xf8>
    1196:	20 91 a6 01 	lds	r18, 0x01A6
    119a:	30 91 a7 01 	lds	r19, 0x01A7
    119e:	40 91 a8 01 	lds	r20, 0x01A8
    11a2:	50 91 a9 01 	lds	r21, 0x01A9
  
  /* Размер файловой системы в секторах */
  tsect = LD_WORD( buf + BPB_TotSec16);  
    11a6:	40 90 95 01 	lds	r4, 0x0195
    11aa:	50 90 96 01 	lds	r5, 0x0196
    11ae:	61 2c       	mov	r6, r1
    11b0:	71 2c       	mov	r7, r1
  if(tsect == 0) tsect = LD_DWORD(buf + BPB_TotSec32);
    11b2:	41 14       	cp	r4, r1
    11b4:	51 04       	cpc	r5, r1
    11b6:	61 04       	cpc	r6, r1
    11b8:	71 04       	cpc	r7, r1
    11ba:	41 f4       	brne	.+16     	; 0x11cc <fs_init+0x11e>
    11bc:	40 90 a2 01 	lds	r4, 0x01A2
    11c0:	50 90 a3 01 	lds	r5, 0x01A3
    11c4:	60 90 a4 01 	lds	r6, 0x01A4
    11c8:	70 90 a5 01 	lds	r7, 0x01A5
  
  /* Размер корневого каталога (должно быть кратно 16 и для FAT32 должно быть рано нулю) */
  fs_n_rootdir = LD_WORD(buf + BPB_RootEntCnt);
    11cc:	20 90 93 01 	lds	r2, 0x0193
    11d0:	30 90 94 01 	lds	r3, 0x0194
    11d4:	30 92 aa 03 	sts	0x03AA, r3
    11d8:	20 92 a9 03 	sts	0x03A9, r2
  
  /* Адреса таблиц FAT в секторах */
  fs_fatbase  = bsect + LD_WORD(buf + BPB_RsvdSecCnt);
    11dc:	80 91 90 01 	lds	r24, 0x0190
    11e0:	90 91 91 01 	lds	r25, 0x0191
    11e4:	9e 87       	std	Y+14, r25	; 0x0e
    11e6:	8d 87       	std	Y+13, r24	; 0x0d
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	ab 83       	std	Y+3, r26	; 0x03
    11f2:	bc 83       	std	Y+4, r27	; 0x04
    11f4:	4c 01       	movw	r8, r24
    11f6:	5d 01       	movw	r10, r26
    11f8:	8c 0c       	add	r8, r12
    11fa:	9d 1c       	adc	r9, r13
    11fc:	ae 1c       	adc	r10, r14
    11fe:	bf 1c       	adc	r11, r15
    1200:	80 92 d5 03 	sts	0x03D5, r8
    1204:	90 92 d6 03 	sts	0x03D6, r9
    1208:	a0 92 d7 03 	sts	0x03D7, r10
    120c:	b0 92 d8 03 	sts	0x03D8, r11
  fs_fatbase2 = 0;
    1210:	10 92 d9 03 	sts	0x03D9, r1
    1214:	10 92 da 03 	sts	0x03DA, r1
    1218:	10 92 db 03 	sts	0x03DB, r1
    121c:	10 92 dc 03 	sts	0x03DC, r1
  if(buf[BPB_NumFATs] >= 2) fs_fatbase2 = fs_fatbase + fsize;
    1220:	60 91 92 01 	lds	r22, 0x0192
    1224:	62 30       	cpi	r22, 0x02	; 2
    1226:	70 f0       	brcs	.+28     	; 0x1244 <fs_init+0x196>
    1228:	da 01       	movw	r26, r20
    122a:	c9 01       	movw	r24, r18
    122c:	88 0d       	add	r24, r8
    122e:	99 1d       	adc	r25, r9
    1230:	aa 1d       	adc	r26, r10
    1232:	bb 1d       	adc	r27, r11
    1234:	80 93 d9 03 	sts	0x03D9, r24
    1238:	90 93 da 03 	sts	0x03DA, r25
    123c:	a0 93 db 03 	sts	0x03DB, r26
    1240:	b0 93 dc 03 	sts	0x03DC, r27

  /* Кол-во секторов на кластер */
  fs_csize = buf[BPB_SecPerClus];
    1244:	10 91 8f 01 	lds	r17, 0x018F
    1248:	10 93 e6 03 	sts	0x03E6, r17

  /* Кол-во кластеров */
  fsize *= buf[BPB_NumFATs];
    124c:	a6 2f       	mov	r26, r22
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__muluhisi3>
    1254:	6d 83       	std	Y+5, r22	; 0x05
    1256:	7e 83       	std	Y+6, r23	; 0x06
    1258:	8f 83       	std	Y+7, r24	; 0x07
    125a:	98 87       	std	Y+8, r25	; 0x08
  fs_n_fatent = (tsect - LD_WORD(buf + BPB_RsvdSecCnt) - fsize - fs_n_rootdir / 16) / fs_csize + 2;
    125c:	b4 e0       	ldi	r27, 0x04	; 4
    125e:	36 94       	lsr	r3
    1260:	27 94       	ror	r2
    1262:	ba 95       	dec	r27
    1264:	e1 f7       	brne	.-8      	; 0x125e <fs_init+0x1b0>
    1266:	91 01       	movw	r18, r2
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	29 87       	std	Y+9, r18	; 0x09
    126e:	3a 87       	std	Y+10, r19	; 0x0a
    1270:	4b 87       	std	Y+11, r20	; 0x0b
    1272:	5c 87       	std	Y+12, r21	; 0x0c
    1274:	c3 01       	movw	r24, r6
    1276:	b2 01       	movw	r22, r4
    1278:	29 81       	ldd	r18, Y+1	; 0x01
    127a:	3a 81       	ldd	r19, Y+2	; 0x02
    127c:	4b 81       	ldd	r20, Y+3	; 0x03
    127e:	5c 81       	ldd	r21, Y+4	; 0x04
    1280:	62 1b       	sub	r22, r18
    1282:	73 0b       	sbc	r23, r19
    1284:	84 0b       	sbc	r24, r20
    1286:	95 0b       	sbc	r25, r21
    1288:	2d 81       	ldd	r18, Y+5	; 0x05
    128a:	3e 81       	ldd	r19, Y+6	; 0x06
    128c:	4f 81       	ldd	r20, Y+7	; 0x07
    128e:	58 85       	ldd	r21, Y+8	; 0x08
    1290:	62 1b       	sub	r22, r18
    1292:	73 0b       	sbc	r23, r19
    1294:	84 0b       	sbc	r24, r20
    1296:	95 0b       	sbc	r25, r21
    1298:	29 85       	ldd	r18, Y+9	; 0x09
    129a:	3a 85       	ldd	r19, Y+10	; 0x0a
    129c:	4b 85       	ldd	r20, Y+11	; 0x0b
    129e:	5c 85       	ldd	r21, Y+12	; 0x0c
    12a0:	62 1b       	sub	r22, r18
    12a2:	73 0b       	sbc	r23, r19
    12a4:	84 0b       	sbc	r24, r20
    12a6:	95 0b       	sbc	r25, r21
    12a8:	21 2f       	mov	r18, r17
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodsi4>
    12b4:	2e 5f       	subi	r18, 0xFE	; 254
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	4f 4f       	sbci	r20, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	20 93 84 03 	sts	0x0384, r18
    12c0:	30 93 85 03 	sts	0x0385, r19
    12c4:	40 93 86 03 	sts	0x0386, r20
    12c8:	50 93 87 03 	sts	0x0387, r21

  /* Адрес 2-ого кластера */
  fs_database = fs_fatbase + fsize + fs_n_rootdir / 16;
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	af 81       	ldd	r26, Y+7	; 0x07
    12d2:	b8 85       	ldd	r27, Y+8	; 0x08
    12d4:	88 0e       	add	r8, r24
    12d6:	99 1e       	adc	r9, r25
    12d8:	aa 1e       	adc	r10, r26
    12da:	bb 1e       	adc	r11, r27
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    12e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    12e4:	88 0d       	add	r24, r8
    12e6:	99 1d       	adc	r25, r9
    12e8:	aa 1d       	adc	r26, r10
    12ea:	bb 1d       	adc	r27, r11
    12ec:	80 93 ab 03 	sts	0x03AB, r24
    12f0:	90 93 ac 03 	sts	0x03AC, r25
    12f4:	a0 93 ad 03 	sts	0x03AD, r26
    12f8:	b0 93 ae 03 	sts	0x03AE, r27
  
  /* Определение файловой системы */
  
  /* FAT 12 */
  if(fs_n_fatent < 0xFF7) goto abort_noFS; 
    12fc:	27 3f       	cpi	r18, 0xF7	; 247
    12fe:	9f e0       	ldi	r25, 0x0F	; 15
    1300:	39 07       	cpc	r19, r25
    1302:	41 05       	cpc	r20, r1
    1304:	51 05       	cpc	r21, r1
    1306:	08 f4       	brcc	.+2      	; 0x130a <fs_init+0x25c>
    1308:	13 cf       	rjmp	.-474    	; 0x1130 <fs_init+0x82>
  
  /* FAT 16 */
  if(fs_n_fatent < 0xFFF7) {
    130a:	27 3f       	cpi	r18, 0xF7	; 247
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	41 05       	cpc	r20, r1
    1310:	51 05       	cpc	r21, r1
    1312:	58 f4       	brcc	.+22     	; 0x132a <fs_init+0x27c>
    fs_dirbase = fs_fatbase + fsize; 
    1314:	80 92 d1 03 	sts	0x03D1, r8
    1318:	90 92 d2 03 	sts	0x03D2, r9
    131c:	a0 92 d3 03 	sts	0x03D3, r10
    1320:	b0 92 d4 03 	sts	0x03D4, r11
    fs_type = FS_FAT16;
    1324:	10 92 dd 03 	sts	0x03DD, r1
    1328:	17 c0       	rjmp	.+46     	; 0x1358 <fs_init+0x2aa>
    return 0;
  }    
   
  /* FAT 32 */
  fs_dirbase = LD_DWORD(buf + BPB_RootClus);
    132a:	80 91 ae 01 	lds	r24, 0x01AE
    132e:	90 91 af 01 	lds	r25, 0x01AF
    1332:	a0 91 b0 01 	lds	r26, 0x01B0
    1336:	b0 91 b1 01 	lds	r27, 0x01B1
    133a:	80 93 d1 03 	sts	0x03D1, r24
    133e:	90 93 d2 03 	sts	0x03D2, r25
    1342:	a0 93 d3 03 	sts	0x03D3, r26
    1346:	b0 93 d4 03 	sts	0x03D4, r27
  
  /* Сбрасываем счетчик свободного места */
  if(LD_WORD(buf + BPB_RsvdSecCnt)>0) {
    134a:	ed 85       	ldd	r30, Y+13	; 0x0d
    134c:	fe 85       	ldd	r31, Y+14	; 0x0e
    134e:	ef 2b       	or	r30, r31
    1350:	29 f4       	brne	.+10     	; 0x135c <fs_init+0x2ae>
      LD_DWORD(buf + 0x1E8) = 0xFFFFFFFF;
      LD_DWORD(buf + 0x1EC) = 0xFFFFFFFF;
      if(sd_writeBuf(bsect)) return 1;
    }
  }
  fs_type = FS_FAT32;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 93 dd 03 	sts	0x03DD, r24
      
  return 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	4c c0       	rjmp	.+152    	; 0x13f4 <fs_init+0x346>
  /* FAT 32 */
  fs_dirbase = LD_DWORD(buf + BPB_RootClus);
  
  /* Сбрасываем счетчик свободного места */
  if(LD_WORD(buf + BPB_RsvdSecCnt)>0) {
    bsect++;
    135c:	ff ef       	ldi	r31, 0xFF	; 255
    135e:	cf 1a       	sub	r12, r31
    1360:	df 0a       	sbc	r13, r31
    1362:	ef 0a       	sbc	r14, r31
    1364:	ff 0a       	sbc	r15, r31
    if(sd_readBuf(bsect)) return 1;
    1366:	c7 01       	movw	r24, r14
    1368:	b6 01       	movw	r22, r12
    136a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    136e:	81 11       	cpse	r24, r1
    1370:	cd ce       	rjmp	.-614    	; 0x110c <fs_init+0x5e>
    if(LD_DWORD(buf) == 0x41615252 && LD_DWORD(buf + 0x1E4) == 0x61417272 && LD_DWORD(buf + 0x1FC) == 0xAA550000) {
    1372:	80 91 82 01 	lds	r24, 0x0182
    1376:	90 91 83 01 	lds	r25, 0x0183
    137a:	a0 91 84 01 	lds	r26, 0x0184
    137e:	b0 91 85 01 	lds	r27, 0x0185
    1382:	82 35       	cpi	r24, 0x52	; 82
    1384:	92 45       	sbci	r25, 0x52	; 82
    1386:	a1 46       	sbci	r26, 0x61	; 97
    1388:	b1 44       	sbci	r27, 0x41	; 65
    138a:	19 f7       	brne	.-58     	; 0x1352 <fs_init+0x2a4>
    138c:	80 91 66 03 	lds	r24, 0x0366
    1390:	90 91 67 03 	lds	r25, 0x0367
    1394:	a0 91 68 03 	lds	r26, 0x0368
    1398:	b0 91 69 03 	lds	r27, 0x0369
    139c:	82 37       	cpi	r24, 0x72	; 114
    139e:	92 47       	sbci	r25, 0x72	; 114
    13a0:	a1 44       	sbci	r26, 0x41	; 65
    13a2:	b1 46       	sbci	r27, 0x61	; 97
    13a4:	b1 f6       	brne	.-84     	; 0x1352 <fs_init+0x2a4>
    13a6:	80 91 7e 03 	lds	r24, 0x037E
    13aa:	90 91 7f 03 	lds	r25, 0x037F
    13ae:	a0 91 80 03 	lds	r26, 0x0380
    13b2:	b0 91 81 03 	lds	r27, 0x0381
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	a5 45       	sbci	r26, 0x55	; 85
    13ba:	ba 4a       	sbci	r27, 0xAA	; 170
    13bc:	51 f6       	brne	.-108    	; 0x1352 <fs_init+0x2a4>
      LD_DWORD(buf + 0x1E8) = 0xFFFFFFFF;
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	dc 01       	movw	r26, r24
    13c4:	80 93 6a 03 	sts	0x036A, r24
    13c8:	90 93 6b 03 	sts	0x036B, r25
    13cc:	a0 93 6c 03 	sts	0x036C, r26
    13d0:	b0 93 6d 03 	sts	0x036D, r27
      LD_DWORD(buf + 0x1EC) = 0xFFFFFFFF;
    13d4:	80 93 6e 03 	sts	0x036E, r24
    13d8:	90 93 6f 03 	sts	0x036F, r25
    13dc:	a0 93 70 03 	sts	0x0370, r26
    13e0:	b0 93 71 03 	sts	0x0371, r27
      if(sd_writeBuf(bsect)) return 1;
    13e4:	c7 01       	movw	r24, r14
    13e6:	b6 01       	movw	r22, r12
    13e8:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <fs_init+0x344>
    13f0:	b0 cf       	rjmp	.-160    	; 0x1352 <fs_init+0x2a4>
    13f2:	8c ce       	rjmp	.-744    	; 0x110c <fs_init+0x5e>
    }
  }
  fs_type = FS_FAT32;
      
  return 0;
}
    13f4:	2e 96       	adiw	r28, 0x0e	; 14
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	7f 90       	pop	r7
    1418:	6f 90       	pop	r6
    141a:	5f 90       	pop	r5
    141c:	4f 90       	pop	r4
    141e:	3f 90       	pop	r3
    1420:	2f 90       	pop	r2
    1422:	08 95       	ret

00001424 <fs_check>:
/**************************************************************************
*  Проверка наличия диска и если нужно, то его инициализация              *
**************************************************************************/

uint8_t fs_check(void) {
  if(!sd_check()) return 0;
    1424:	0e 94 77 12 	call	0x24ee	; 0x24ee <sd_check>
    1428:	81 11       	cpse	r24, r1
  return fs_init();
    142a:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <fs_init>
}
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	08 95       	ret

00001432 <fs_readdir_nocheck>:
*                                                                         *
*  Функция не портит buf[0..MAX_FILENAME-1]                               *
**************************************************************************/

uint8_t fs_readdir_nocheck(void) {
  while(!fs_readdirInt()) {
    1432:	0e 94 58 06 	call	0xcb0	; 0xcb0 <fs_readdirInt>
    1436:	81 11       	cpse	r24, r1
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <fs_readdir_nocheck+0x2e>
    if(FS_DIRENTRY[DIR_Name] == 0) fs_file.entry_able = 0;
    143a:	80 91 62 03 	lds	r24, 0x0362
    143e:	81 11       	cpse	r24, r1
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <fs_readdir_nocheck+0x14>
    1442:	10 92 89 03 	sts	0x0389, r1
    if(fs_file.entry_able == 0) return 0;
    1446:	90 91 89 03 	lds	r25, 0x0389
    144a:	99 23       	and	r25, r25
    144c:	59 f0       	breq	.+22     	; 0x1464 <fs_readdir_nocheck+0x32>
    if(FS_DIRENTRY[DIR_Name] == 0xE5) continue; /*  Может быть еще 0x05 */
    144e:	85 3e       	cpi	r24, 0xE5	; 229
    1450:	81 f3       	breq	.-32     	; 0x1432 <fs_readdir_nocheck>
    if(FS_DIRENTRY[DIR_Name] == '.') continue;
    1452:	8e 32       	cpi	r24, 0x2E	; 46
    1454:	71 f3       	breq	.-36     	; 0x1432 <fs_readdir_nocheck>
    if((FS_DIRENTRY[DIR_Attr] & AM_VOL) == 0) return 0;
    1456:	80 91 6d 03 	lds	r24, 0x036D
    145a:	83 fd       	sbrc	r24, 3
    145c:	ea cf       	rjmp	.-44     	; 0x1432 <fs_readdir_nocheck>
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <fs_readdir_nocheck+0x32>
  }
  return 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	08 95       	ret
**************************************************************************/

uint8_t fs_readdir_nocheck(void) {
  while(!fs_readdirInt()) {
    if(FS_DIRENTRY[DIR_Name] == 0) fs_file.entry_able = 0;
    if(fs_file.entry_able == 0) return 0;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    if(FS_DIRENTRY[DIR_Name] == 0xE5) continue; /*  Может быть еще 0x05 */
    if(FS_DIRENTRY[DIR_Name] == '.') continue;
    if((FS_DIRENTRY[DIR_Attr] & AM_VOL) == 0) return 0;
  }
  return 1;
}
    1466:	08 95       	ret

00001468 <fs_readdir>:

uint8_t fs_readdir() {
#ifndef FS_DISABLE_CHECK
  /* Папка должна быть открыта */
  if(fs_file.opened != OPENED_DIR) { lastError = ERR_NOT_OPENED; return 1; }
    1468:	80 91 88 03 	lds	r24, 0x0388
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	11 f4       	brne	.+4      	; 0x1474 <fs_readdir+0xc>
#endif
  return fs_readdir_nocheck();
    1470:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <fs_readdir_nocheck>
}

uint8_t fs_readdir() {
#ifndef FS_DISABLE_CHECK
  /* Папка должна быть открыта */
  if(fs_file.opened != OPENED_DIR) { lastError = ERR_NOT_OPENED; return 1; }
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	80 93 af 03 	sts	0x03AF, r24
#endif
  return fs_readdir_nocheck();
}
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	08 95       	ret

0000147e <fs_open0>:

#define FS_DIRFIND      (buf + 469)           /* 11 байт использующиеся внутри функции fs_open0 */
#define fs_notrootdir (*(uint8_t*)&fs_file.size) /* Используется fs_open0, в это время переменные fs_file. не содежат нужных значения */  
#define fs_parent_dir_cluster fs_file.sector  /* Так же используется fs_file.sector для хранения первого кластера папки предка. */

uint8_t fs_open0(uint8_t what) {
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	2b 97       	sbiw	r28, 0x0b	; 11
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
  CONST uint8_t *path;  
  uint8_t r;  

  /* Проверка ошибок программиста */               
#ifndef FS_DISABLE_CHECK
  if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; goto abort; }  
    14a6:	90 91 dd 03 	lds	r25, 0x03DD
    14aa:	92 30       	cpi	r25, 0x02	; 2
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <fs_open0+0x38>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	80 93 af 03 	sts	0x03AF, r24
    14b4:	a6 c2       	rjmp	.+1356   	; 0x1a02 <fs_open0+0x584>
  fs_file.opened = OPENED_NONE;
    14b6:	10 92 88 03 	sts	0x0388, r1
#endif

  /* Предотвращение рекурсии */                      
  r = what & 0x80; what &= 0x7F;
    14ba:	28 2f       	mov	r18, r24
    14bc:	2f 77       	andi	r18, 0x7F	; 127
    14be:	b2 2e       	mov	r11, r18
  fs_parent_dir_cluster = fs_file.entry_start_cluster;
    14c0:	40 91 94 03 	lds	r20, 0x0394
    14c4:	50 91 95 03 	lds	r21, 0x0395
    14c8:	60 91 96 03 	lds	r22, 0x0396
    14cc:	70 91 97 03 	lds	r23, 0x0397
    14d0:	40 93 a4 03 	sts	0x03A4, r20
    14d4:	50 93 a5 03 	sts	0x03A5, r21
    14d8:	60 93 a6 03 	sts	0x03A6, r22
    14dc:	70 93 a7 03 	sts	0x03A7, r23
  
  /* Корневой каталог */
  fs_notrootdir = 0;
    14e0:	10 92 9c 03 	sts	0x039C, r1
  fs_file.entry_start_cluster = fs_dirbase;
    14e4:	40 91 d1 03 	lds	r20, 0x03D1
    14e8:	50 91 d2 03 	lds	r21, 0x03D2
    14ec:	60 91 d3 03 	lds	r22, 0x03D3
    14f0:	70 91 d4 03 	lds	r23, 0x03D4
  if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             
    14f4:	99 23       	and	r25, r25
    14f6:	49 f0       	breq	.+18     	; 0x150a <fs_open0+0x8c>
  r = what & 0x80; what &= 0x7F;
  fs_parent_dir_cluster = fs_file.entry_start_cluster;
  
  /* Корневой каталог */
  fs_notrootdir = 0;
  fs_file.entry_start_cluster = fs_dirbase;
    14f8:	40 93 94 03 	sts	0x0394, r20
    14fc:	50 93 95 03 	sts	0x0395, r21
    1500:	60 93 96 03 	sts	0x0396, r22
    1504:	70 93 97 03 	sts	0x0397, r23
    1508:	08 c0       	rjmp	.+16     	; 0x151a <fs_open0+0x9c>
  if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             
    150a:	10 92 94 03 	sts	0x0394, r1
    150e:	10 92 95 03 	sts	0x0395, r1
    1512:	10 92 96 03 	sts	0x0396, r1
    1516:	10 92 97 03 	sts	0x0397, r1

  /* Корневая папка */
  if(buf[0] == 0) {	
    151a:	90 91 82 01 	lds	r25, 0x0182
    151e:	91 11       	cpse	r25, r1
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <fs_open0+0xb4>
    if(what) goto abort_noPath;		
    1522:	b1 10       	cpse	r11, r1
    1524:	5b c2       	rjmp	.+1206   	; 0x19dc <fs_open0+0x55e>
    FS_DIRENTRY[0] = 0;             /* Признак корневой папки */
    1526:	10 92 62 03 	sts	0x0362, r1
    FS_DIRENTRY[DIR_Attr] = AM_DIR; /* Для упрощения определения файл/папка запишем сюда AM_DIR */
    152a:	80 e1       	ldi	r24, 0x10	; 16
    152c:	80 93 6d 03 	sts	0x036D, r24
    1530:	02 c2       	rjmp	.+1028   	; 0x1936 <fs_open0+0x4b8>
  fs_notrootdir = 0;
  fs_file.entry_start_cluster = fs_dirbase;
  if(fs_type == FS_FAT16) fs_file.entry_start_cluster =  0;                             

  /* Корневая папка */
  if(buf[0] == 0) {	
    1532:	02 e8       	ldi	r16, 0x82	; 130
    1534:	11 e0       	ldi	r17, 0x01	; 1
  if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; goto abort; }  
  fs_file.opened = OPENED_NONE;
#endif

  /* Предотвращение рекурсии */                      
  r = what & 0x80; what &= 0x7F;
    1536:	80 78       	andi	r24, 0x80	; 128
    1538:	a8 2e       	mov	r10, r24
      /* Это должна быть папка */            
      if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) goto abort_noPath;
      /* Предотвращаем рекурсию для функции fs_move */
      if(r && fs_file.entry_start_cluster == fs_parent_dir_cluster) goto abort_noPath;
      /* Наденная папка уже не будет корневой */            
      fs_notrootdir = 1;
    153a:	99 24       	eor	r9, r9
    153c:	93 94       	inc	r9
}

static CONST uint8_t * fs_open0_name(CONST uint8_t *p) {
  uint8_t c, ni, i;

  memset(FS_DIRFIND, ' ', 11);    
    153e:	4b e0       	ldi	r20, 0x0B	; 11
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e2       	ldi	r22, 0x20	; 32
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	87 e5       	ldi	r24, 0x57	; 87
    1548:	93 e0       	ldi	r25, 0x03	; 3
    154a:	0e 94 aa 14 	call	0x2954	; 0x2954 <memset>
    154e:	f8 01       	movw	r30, r16
  i = 0; ni = 8;
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	a8 e0       	ldi	r26, 0x08	; 8
    1554:	9f 01       	movw	r18, r30
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	89 01       	movw	r16, r18
  while(1) {
    c = *p++;
    155c:	60 81       	ld	r22, Z
    if(c == 0) {
    155e:	61 11       	cpse	r22, r1
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <fs_open0+0xf2>
      if(i == 0) break; /* Пустое имя файла */
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	71 11       	cpse	r23, r1
    1568:	90 e0       	ldi	r25, 0x00	; 0
      return 0;
    156a:	09 2f       	mov	r16, r25
    156c:	18 2f       	mov	r17, r24
    156e:	1f c0       	rjmp	.+62     	; 0x15ae <fs_open0+0x130>
    }                                                     	
    if(c == '/') return p;
    1570:	6f 32       	cpi	r22, 0x2F	; 47
    1572:	e9 f0       	breq	.+58     	; 0x15ae <fs_open0+0x130>
    if(c == '.') {
    1574:	6e 32       	cpi	r22, 0x2E	; 46
    1576:	51 f4       	brne	.+20     	; 0x158c <fs_open0+0x10e>
      if(i == 0) break; /* Пустое имя файла */
    1578:	77 23       	and	r23, r23
    157a:	09 f4       	brne	.+2      	; 0x157e <fs_open0+0x100>
    157c:	2f c2       	rjmp	.+1118   	; 0x19dc <fs_open0+0x55e>
#ifndef FS_DISABLE_CHECK    
      if(ni != 8) break; /* Вторая точка */
    157e:	a8 30       	cpi	r26, 0x08	; 8
    1580:	09 f0       	breq	.+2      	; 0x1584 <fs_open0+0x106>
    1582:	2c c2       	rjmp	.+1112   	; 0x19dc <fs_open0+0x55e>
#endif    
      i = 8; ni = 11;
    1584:	78 e0       	ldi	r23, 0x08	; 8
    1586:	ab e0       	ldi	r26, 0x0B	; 11
    1588:	f9 01       	movw	r30, r18
    158a:	e4 cf       	rjmp	.-56     	; 0x1554 <fs_open0+0xd6>
      continue;
    }                 
    /* Слишком длинное име */
    if(i == ni) break;
    158c:	7a 17       	cp	r23, r26
    158e:	09 f4       	brne	.+2      	; 0x1592 <fs_open0+0x114>
    1590:	25 c2       	rjmp	.+1098   	; 0x19dc <fs_open0+0x55e>
    1592:	87 ea       	ldi	r24, 0xA7	; 167
    1594:	90 e0       	ldi	r25, 0x00	; 0
abort: 
  return 1;
}

static uint8_t exists(const char* str, uint8_t c) {
  while (pgm_read_byte(str) != 0x00) {
    1596:	ac 01       	movw	r20, r24
    1598:	fc 01       	movw	r30, r24
    159a:	b4 91       	lpm	r27, Z
    159c:	bb 23       	and	r27, r27
    159e:	09 f4       	brne	.+2      	; 0x15a2 <fs_open0+0x124>
    15a0:	19 c2       	rjmp	.+1074   	; 0x19d4 <fs_open0+0x556>
    uint8_t x = pgm_read_byte(str++);
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	fa 01       	movw	r30, r20
    15a6:	44 91       	lpm	r20, Z
    if (x == c) 
    15a8:	46 13       	cpse	r20, r22
    15aa:	f5 cf       	rjmp	.-22     	; 0x1596 <fs_open0+0x118>
    15ac:	17 c2       	rjmp	.+1070   	; 0x19dc <fs_open0+0x55e>
  } else {                        
    path = buf;
    while(1) {
      /* Получаем очередное имя из path в FS_DIRFIND */
      path = fs_open0_name(path);
      if(path == (CONST uint8_t*)1) goto abort_noPath;      	
    15ae:	01 30       	cpi	r16, 0x01	; 1
    15b0:	11 05       	cpc	r17, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <fs_open0+0x138>
    15b4:	13 c2       	rjmp	.+1062   	; 0x19dc <fs_open0+0x55e>
      /* Ищем имя в папке */      
      fs_file.entry_able = 0;
    15b6:	10 92 89 03 	sts	0x0389, r1
      while(1) {              
        if(fs_readdir_nocheck()) return 1;    
    15ba:	0e 94 19 0a 	call	0x1432	; 0x1432 <fs_readdir_nocheck>
    15be:	81 11       	cpse	r24, r1
    15c0:	10 c2       	rjmp	.+1056   	; 0x19e2 <fs_open0+0x564>
        if(fs_file.entry_able == 0) break;
    15c2:	f0 90 89 03 	lds	r15, 0x0389
    15c6:	ff 20       	and	r15, r15
    15c8:	51 f0       	breq	.+20     	; 0x15de <fs_open0+0x160>
        if(!memcmp(FS_DIRENTRY, FS_DIRFIND, 11)) break;
    15ca:	4b e0       	ldi	r20, 0x0B	; 11
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	67 e5       	ldi	r22, 0x57	; 87
    15d0:	73 e0       	ldi	r23, 0x03	; 3
    15d2:	82 e6       	ldi	r24, 0x62	; 98
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	0e 94 94 14 	call	0x2928	; 0x2928 <memcmp>
    15da:	89 2b       	or	r24, r25
    15dc:	71 f7       	brne	.-36     	; 0x15ba <fs_open0+0x13c>
      }
      /* Последний элементу пути в режиме создания */            
      if(what && path == 0) {                        
    15de:	bb 20       	and	r11, r11
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <fs_open0+0x166>
    15e2:	6d c1       	rjmp	.+730    	; 0x18be <fs_open0+0x440>
    15e4:	01 15       	cp	r16, r1
    15e6:	11 05       	cpc	r17, r1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <fs_open0+0x16e>
    15ea:	69 c1       	rjmp	.+722    	; 0x18be <fs_open0+0x440>
        fs_parent_dir_cluster = fs_file.entry_start_cluster; /* Сохраняем в этой переменной результат для фунции fs_move */
    15ec:	80 91 94 03 	lds	r24, 0x0394
    15f0:	90 91 95 03 	lds	r25, 0x0395
    15f4:	a0 91 96 03 	lds	r26, 0x0396
    15f8:	b0 91 97 03 	lds	r27, 0x0397
    15fc:	80 93 a4 03 	sts	0x03A4, r24
    1600:	90 93 a5 03 	sts	0x03A5, r25
    1604:	a0 93 a6 03 	sts	0x03A6, r26
    1608:	b0 93 a7 03 	sts	0x03A7, r27
        if(fs_type == FS_FAT32 && fs_parent_dir_cluster == fs_dirbase) fs_parent_dir_cluster = 0; 
    160c:	20 91 dd 03 	lds	r18, 0x03DD
    1610:	21 30       	cpi	r18, 0x01	; 1
    1612:	a9 f4       	brne	.+42     	; 0x163e <fs_open0+0x1c0>
    1614:	40 91 d1 03 	lds	r20, 0x03D1
    1618:	50 91 d2 03 	lds	r21, 0x03D2
    161c:	60 91 d3 03 	lds	r22, 0x03D3
    1620:	70 91 d4 03 	lds	r23, 0x03D4
    1624:	84 17       	cp	r24, r20
    1626:	95 07       	cpc	r25, r21
    1628:	a6 07       	cpc	r26, r22
    162a:	b7 07       	cpc	r27, r23
    162c:	41 f4       	brne	.+16     	; 0x163e <fs_open0+0x1c0>
    162e:	10 92 a4 03 	sts	0x03A4, r1
    1632:	10 92 a5 03 	sts	0x03A5, r1
    1636:	10 92 a6 03 	sts	0x03A6, r1
    163a:	10 92 a7 03 	sts	0x03A7, r1
        if(fs_file.entry_able == 0) return fs_open0_create(what-1); /* Продолжим там */          
    163e:	f1 10       	cpse	r15, r1
    1640:	3c c1       	rjmp	.+632    	; 0x18ba <fs_open0+0x43c>
    1642:	ba 94       	dec	r11
  uint8_t  new_name[11];
  unsigned long allocatedCluster = 0;
  uint8_t* allocatedEntry;

  /* Сохраняем имя, так как весь буфер будет затерт */
  memcpy(new_name, FS_DIRFIND, 11); 
    1644:	8b e0       	ldi	r24, 0x0B	; 11
    1646:	e7 e5       	ldi	r30, 0x57	; 87
    1648:	f3 e0       	ldi	r31, 0x03	; 3
    164a:	de 01       	movw	r26, r28
    164c:	11 96       	adiw	r26, 0x01	; 1
    164e:	01 90       	ld	r0, Z+
    1650:	0d 92       	st	X+, r0
    1652:	8a 95       	dec	r24
    1654:	e1 f7       	brne	.-8      	; 0x164e <fs_open0+0x1d0>

  /* Выделяем кластер для папки */   
  if(dir) {
    1656:	bb 20       	and	r11, r11
    1658:	71 f0       	breq	.+28     	; 0x1676 <fs_open0+0x1f8>
    if(fs_allocCluster(ALLOCCLUSTER)) goto abort; /* fs_file.entry_start_cluster изменен не будет, там первый кластер папки в которой мы создадим файл */
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	0e 94 c2 03 	call	0x784	; 0x784 <fs_allocCluster>
    1660:	81 11       	cpse	r24, r1
    1662:	bf c1       	rjmp	.+894    	; 0x19e2 <fs_open0+0x564>
    allocatedCluster = fs_tmp;
    1664:	c0 90 de 03 	lds	r12, 0x03DE
    1668:	d0 90 df 03 	lds	r13, 0x03DF
    166c:	e0 90 e0 03 	lds	r14, 0x03E0
    1670:	f0 90 e1 03 	lds	r15, 0x03E1
    1674:	03 c0       	rjmp	.+6      	; 0x167c <fs_open0+0x1fe>
  return (CONST uint8_t*)1;
}

static uint8_t fs_open0_create(uint8_t dir) {
  uint8_t  new_name[11];
  unsigned long allocatedCluster = 0;
    1676:	c1 2c       	mov	r12, r1
    1678:	d1 2c       	mov	r13, r1
    167a:	76 01       	movw	r14, r12
**************************************************************************/

static uint8_t* fs_allocEntry(void) {
  /* Ищем в папке пустой описатель. */
  while(1) {
    if(fs_readdirInt()) return 0;
    167c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <fs_readdirInt>
    1680:	81 11       	cpse	r24, r1
    1682:	69 c0       	rjmp	.+210    	; 0x1756 <fs_open0+0x2d8>

    /* Кластеры кончились */
    if(!fs_file.entry_able) break;
    1684:	80 91 89 03 	lds	r24, 0x0389
    1688:	88 23       	and	r24, r24
    168a:	01 f1       	breq	.+64     	; 0x16cc <fs_open0+0x24e>

    /* Это свободный описатель */
    if(FS_DIRENTRY[0] == 0xE5 || FS_DIRENTRY[0] == 0) { /* Может быть еще 0x05 */
    168c:	80 91 62 03 	lds	r24, 0x0362
    1690:	85 3e       	cpi	r24, 0xE5	; 229
    1692:	11 f0       	breq	.+4      	; 0x1698 <fs_open0+0x21a>
    1694:	81 11       	cpse	r24, r1
    1696:	f2 cf       	rjmp	.-28     	; 0x167c <fs_open0+0x1fe>

      /* Читаем сектор */
      if(sd_readBuf(fs_file.entry_sector)) return 0; 
    1698:	60 91 90 03 	lds	r22, 0x0390
    169c:	70 91 91 03 	lds	r23, 0x0391
    16a0:	80 91 92 03 	lds	r24, 0x0392
    16a4:	90 91 93 03 	lds	r25, 0x0393
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    16ac:	81 11       	cpse	r24, r1
    16ae:	53 c0       	rjmp	.+166    	; 0x1756 <fs_open0+0x2d8>

      /* Найденный описатель */
      return buf + (fs_file.entry_index % 16) * 32;
    16b0:	40 91 8a 03 	lds	r20, 0x038A
    16b4:	50 91 8b 03 	lds	r21, 0x038B
    16b8:	4f 70       	andi	r20, 0x0F	; 15
    16ba:	55 27       	eor	r21, r21
    16bc:	65 e0       	ldi	r22, 0x05	; 5
    16be:	44 0f       	add	r20, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	6a 95       	dec	r22
    16c4:	e1 f7       	brne	.-8      	; 0x16be <fs_open0+0x240>
    16c6:	4e 57       	subi	r20, 0x7E	; 126
    16c8:	5e 4f       	sbci	r21, 0xFE	; 254
    16ca:	42 c0       	rjmp	.+132    	; 0x1750 <fs_open0+0x2d2>
    }
  }               
    
  /* Ограничение по кол-ву файлов */ 
  /* Корневой каталог FAT16 так же вернет fs_file.entry_index == 0 */
  if(fs_file.entry_index == 0) { lastError = ERR_DIR_FULL; return 0; }
    16cc:	80 91 8a 03 	lds	r24, 0x038A
    16d0:	90 91 8b 03 	lds	r25, 0x038B
    16d4:	89 2b       	or	r24, r25
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <fs_open0+0x262>
    16d8:	85 e0       	ldi	r24, 0x05	; 5
    16da:	80 93 af 03 	sts	0x03AF, r24
    16de:	3b c0       	rjmp	.+118    	; 0x1756 <fs_open0+0x2d8>

  /* Выделить кластер. Результат в fs_tmp */
  if(fs_allocCluster(ALLOCCLUSTER)) return 0;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0e 94 c2 03 	call	0x784	; 0x784 <fs_allocCluster>
    16e6:	81 11       	cpse	r24, r1
    16e8:	36 c0       	rjmp	.+108    	; 0x1756 <fs_open0+0x2d8>

  /* Добавить еще один кластер к папке. */
  if(fs_setNextCluster(fs_file.entry_cluster)) return 0; /* fs_tmp сохранится, так как он не LAST и не FREE */
    16ea:	60 91 8c 03 	lds	r22, 0x038C
    16ee:	70 91 8d 03 	lds	r23, 0x038D
    16f2:	80 91 8e 03 	lds	r24, 0x038E
    16f6:	90 91 8f 03 	lds	r25, 0x038F
    16fa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fs_setNextCluster>
    16fe:	81 11       	cpse	r24, r1
    1700:	2a c0       	rjmp	.+84     	; 0x1756 <fs_open0+0x2d8>

  /* Заполняем ответ */ 
  fs_file.entry_cluster = fs_tmp;
    1702:	80 91 de 03 	lds	r24, 0x03DE
    1706:	90 91 df 03 	lds	r25, 0x03DF
    170a:	a0 91 e0 03 	lds	r26, 0x03E0
    170e:	b0 91 e1 03 	lds	r27, 0x03E1
    1712:	80 93 8c 03 	sts	0x038C, r24
    1716:	90 93 8d 03 	sts	0x038D, r25
    171a:	a0 93 8e 03 	sts	0x038E, r26
    171e:	b0 93 8f 03 	sts	0x038F, r27
  fs_clust2sect();   
    1722:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>
  fs_file.entry_sector  = fs_tmp;
    1726:	80 91 de 03 	lds	r24, 0x03DE
    172a:	90 91 df 03 	lds	r25, 0x03DF
    172e:	a0 91 e0 03 	lds	r26, 0x03E0
    1732:	b0 91 e1 03 	lds	r27, 0x03E1
    1736:	80 93 90 03 	sts	0x0390, r24
    173a:	90 93 91 03 	sts	0x0391, r25
    173e:	a0 93 92 03 	sts	0x0392, r26
    1742:	b0 93 93 03 	sts	0x0393, r27

  /* Очищаем кластер и за одно BUF (используется переменная fs_tmp) */
  fs_eraseCluster(0);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 a8 05 	call	0xb50	; 0xb50 <fs_eraseCluster>

  /* Найденный описатель */
  return buf;
    174c:	42 e8       	ldi	r20, 0x82	; 130
    174e:	51 e0       	ldi	r21, 0x01	; 1
    allocatedCluster = fs_tmp;
  }

  /* Добавляем в папку описатель (сектор не сохранен) */
  allocatedEntry = fs_allocEntry();
  if(allocatedEntry == 0) {       
    1750:	41 15       	cp	r20, r1
    1752:	51 05       	cpc	r21, r1
    1754:	69 f4       	brne	.+26     	; 0x1770 <fs_open0+0x2f2>
  
    /* В случае ошибки освобождаем кластер */
    fs_tmp = FREE_CLUSTER; 
    1756:	10 92 de 03 	sts	0x03DE, r1
    175a:	10 92 df 03 	sts	0x03DF, r1
    175e:	10 92 e0 03 	sts	0x03E0, r1
    1762:	10 92 e1 03 	sts	0x03E1, r1
    fs_setNextCluster(allocatedCluster);
    1766:	c7 01       	movw	r24, r14
    1768:	b6 01       	movw	r22, r12
    176a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fs_setNextCluster>
    176e:	39 c1       	rjmp	.+626    	; 0x19e2 <fs_open0+0x564>
    goto abort;
  }

  /* Устаналиваем имя в описатель. */
  memset(allocatedEntry, 0, 32);
    1770:	20 e2       	ldi	r18, 0x20	; 32
    1772:	fa 01       	movw	r30, r20
    1774:	11 92       	st	Z+, r1
    1776:	2a 95       	dec	r18
    1778:	e9 f7       	brne	.-6      	; 0x1774 <fs_open0+0x2f6>
  memcpy(allocatedEntry, new_name, 11);        
    177a:	2b e0       	ldi	r18, 0x0B	; 11
    177c:	fe 01       	movw	r30, r28
    177e:	31 96       	adiw	r30, 0x01	; 1
    1780:	da 01       	movw	r26, r20
    1782:	01 90       	ld	r0, Z+
    1784:	0d 92       	st	X+, r0
    1786:	2a 95       	dec	r18
    1788:	e1 f7       	brne	.-8      	; 0x1782 <fs_open0+0x304>
    178a:	60 91 90 03 	lds	r22, 0x0390
    178e:	70 91 91 03 	lds	r23, 0x0391
    1792:	80 91 92 03 	lds	r24, 0x0392
    1796:	90 91 93 03 	lds	r25, 0x0393

  if(!dir) {    
    179a:	b1 10       	cpse	r11, r1
    179c:	20 c0       	rjmp	.+64     	; 0x17de <fs_open0+0x360>
    /* Сохраняем описатель на диск */
    if(sd_writeBuf(fs_file.entry_sector)) goto abort;
    179e:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    17a2:	81 11       	cpse	r24, r1
    17a4:	1e c1       	rjmp	.+572    	; 0x19e2 <fs_open0+0x564>
    /* fs_file.entry_sector, fs_file.entry_index - устанавлиается в fs_allocCluster */
    fs_file.entry_start_cluster = 0; 
    17a6:	10 92 94 03 	sts	0x0394, r1
    17aa:	10 92 95 03 	sts	0x0395, r1
    17ae:	10 92 96 03 	sts	0x0396, r1
    17b2:	10 92 97 03 	sts	0x0397, r1
    fs_file.size           = 0;
    17b6:	10 92 9c 03 	sts	0x039C, r1
    17ba:	10 92 9d 03 	sts	0x039D, r1
    17be:	10 92 9e 03 	sts	0x039E, r1
    17c2:	10 92 9f 03 	sts	0x039F, r1
    fs_file.ptr            = 0;
    17c6:	10 92 98 03 	sts	0x0398, r1
    17ca:	10 92 99 03 	sts	0x0399, r1
    17ce:	10 92 9a 03 	sts	0x039A, r1
    17d2:	10 92 9b 03 	sts	0x039B, r1
#ifndef FS_DISABLE_CHECK
    fs_file.opened              = OPENED_FILE;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 88 03 	sts	0x0388, r24
    17dc:	04 c1       	rjmp	.+520    	; 0x19e6 <fs_open0+0x568>
#endif
    return 0;
  }
  
  /* Это папка */
  allocatedEntry[DIR_Attr] = AM_DIR;
    17de:	10 e1       	ldi	r17, 0x10	; 16
    17e0:	fa 01       	movw	r30, r20
    17e2:	13 87       	std	Z+11, r17	; 0x0b
/**************************************************************************
*  Установить в описатель кластер                                         *
**************************************************************************/

static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
  LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
    17e4:	d3 8e       	std	Z+27, r13	; 0x1b
    17e6:	c2 8e       	std	Z+26, r12	; 0x1a
  LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
    17e8:	47 01       	movw	r8, r14
    17ea:	aa 24       	eor	r10, r10
    17ec:	bb 24       	eor	r11, r11
    17ee:	95 8a       	std	Z+21, r9	; 0x15
    17f0:	84 8a       	std	Z+20, r8	; 0x14
  /* Это папка */
  allocatedEntry[DIR_Attr] = AM_DIR;
  fs_setEntryCluster(allocatedEntry, allocatedCluster);

  /* Сохраняем описатель на диск */
  if(sd_writeBuf(fs_file.entry_sector)) goto abort;
    17f2:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    17f6:	81 11       	cpse	r24, r1
    17f8:	f4 c0       	rjmp	.+488    	; 0x19e2 <fs_open0+0x564>
           
  /* Сектор для новой папки */ 
  fs_tmp = allocatedCluster;
    17fa:	c0 92 de 03 	sts	0x03DE, r12
    17fe:	d0 92 df 03 	sts	0x03DF, r13
    1802:	e0 92 e0 03 	sts	0x03E0, r14
    1806:	f0 92 e1 03 	sts	0x03E1, r15
  fs_clust2sect();
    180a:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>

  /* Очищаем fs_tmp и за одно buf */
  fs_eraseCluster(1); 
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	0e 94 a8 05 	call	0xb50	; 0xb50 <fs_eraseCluster>
  
  /* Создаем пустую папку */
  memset(buf, ' ', 11); buf[0] = '.'; buf[11] = 0x10;
    1814:	4b e0       	ldi	r20, 0x0B	; 11
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	60 e2       	ldi	r22, 0x20	; 32
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	82 e8       	ldi	r24, 0x82	; 130
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 aa 14 	call	0x2954	; 0x2954 <memset>
    1824:	0e e2       	ldi	r16, 0x2E	; 46
    1826:	00 93 82 01 	sts	0x0182, r16
    182a:	10 93 8d 01 	sts	0x018D, r17
/**************************************************************************
*  Установить в описатель кластер                                         *
**************************************************************************/

static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
  LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
    182e:	d0 92 9d 01 	sts	0x019D, r13
    1832:	c0 92 9c 01 	sts	0x019C, r12
  LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
    1836:	90 92 97 01 	sts	0x0197, r9
    183a:	80 92 96 01 	sts	0x0196, r8
  
  /* Создаем пустую папку */
  memset(buf, ' ', 11); buf[0] = '.'; buf[11] = 0x10;
  fs_setEntryCluster(buf, allocatedCluster);         
  
  memset(buf+32, ' ', 11); buf[32] = '.'; buf[33] = '.'; buf[32+11] = 0x10;
    183e:	4b e0       	ldi	r20, 0x0B	; 11
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	60 e2       	ldi	r22, 0x20	; 32
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	82 ea       	ldi	r24, 0xA2	; 162
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	0e 94 aa 14 	call	0x2954	; 0x2954 <memset>
    184e:	00 93 a2 01 	sts	0x01A2, r16
    1852:	00 93 a3 01 	sts	0x01A3, r16
    1856:	10 93 ad 01 	sts	0x01AD, r17
  if(fs_notrootdir) fs_setEntryCluster(buf + 32, fs_file.entry_start_cluster); /* Сейчас в fs_file.size==0 значит корневой каталог */
    185a:	80 91 9c 03 	lds	r24, 0x039C
    185e:	88 23       	and	r24, r24
    1860:	81 f0       	breq	.+32     	; 0x1882 <fs_open0+0x404>
    1862:	80 91 94 03 	lds	r24, 0x0394
    1866:	90 91 95 03 	lds	r25, 0x0395
    186a:	a0 91 96 03 	lds	r26, 0x0396
    186e:	b0 91 97 03 	lds	r27, 0x0397
/**************************************************************************
*  Установить в описатель кластер                                         *
**************************************************************************/

static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
  LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
    1872:	90 93 bd 01 	sts	0x01BD, r25
    1876:	80 93 bc 01 	sts	0x01BC, r24
  LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
    187a:	b0 93 b7 01 	sts	0x01B7, r27
    187e:	a0 93 b6 01 	sts	0x01B6, r26
  
  memset(buf+32, ' ', 11); buf[32] = '.'; buf[33] = '.'; buf[32+11] = 0x10;
  if(fs_notrootdir) fs_setEntryCluster(buf + 32, fs_file.entry_start_cluster); /* Сейчас в fs_file.size==0 значит корневой каталог */

  /* Сохраняем папку */
  return sd_writeBuf(fs_tmp);      
    1882:	60 91 de 03 	lds	r22, 0x03DE
    1886:	70 91 df 03 	lds	r23, 0x03DF
    188a:	80 91 e0 03 	lds	r24, 0x03E0
    188e:	90 91 e1 03 	lds	r25, 0x03E1
  return 0;
abort_noPath:
  lastError = ERR_NO_PATH;
abort: 
  return 1;
}
    1892:	2b 96       	adiw	r28, 0x0b	; 11
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
  
  memset(buf+32, ' ', 11); buf[32] = '.'; buf[33] = '.'; buf[32+11] = 0x10;
  if(fs_notrootdir) fs_setEntryCluster(buf + 32, fs_file.entry_start_cluster); /* Сейчас в fs_file.size==0 значит корневой каталог */

  /* Сохраняем папку */
  return sd_writeBuf(fs_tmp);      
    18b6:	0c 94 88 03 	jmp	0x710	; 0x710 <sd_writeBuf>
      /* Последний элементу пути в режиме создания */            
      if(what && path == 0) {                        
        fs_parent_dir_cluster = fs_file.entry_start_cluster; /* Сохраняем в этой переменной результат для фунции fs_move */
        if(fs_type == FS_FAT32 && fs_parent_dir_cluster == fs_dirbase) fs_parent_dir_cluster = 0; 
        if(fs_file.entry_able == 0) return fs_open0_create(what-1); /* Продолжим там */          
        lastError = ERR_FILE_EXISTS; goto abort; 
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	90 c0       	rjmp	.+288    	; 0x19de <fs_open0+0x560>
      }
      /* Файл/папка не найдена */            
      if(fs_file.entry_able == 0) goto abort_noPath;
    18be:	ff 20       	and	r15, r15
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <fs_open0+0x446>
    18c2:	8c c0       	rjmp	.+280    	; 0x19dc <fs_open0+0x55e>
*  Получить кластер из FS_DIRENTRY                                        *
*  Функция не портит buf (функции, в которых этого не написано, портят)   *
**************************************************************************/

static unsigned long fs_getEntryCluster(void) {
  unsigned long c = LD_WORD(FS_DIRENTRY + DIR_FstClusLO);
    18c4:	40 91 7c 03 	lds	r20, 0x037C
    18c8:	50 91 7d 03 	lds	r21, 0x037D
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
  if(fs_type != FS_FAT16) c |= ((unsigned long)LD_WORD(FS_DIRENTRY + DIR_FstClusHI)) << 16;  
    18d0:	80 91 dd 03 	lds	r24, 0x03DD
    18d4:	88 23       	and	r24, r24
    18d6:	69 f0       	breq	.+26     	; 0x18f2 <fs_open0+0x474>
    18d8:	80 91 76 03 	lds	r24, 0x0376
    18dc:	90 91 77 03 	lds	r25, 0x0377
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	dc 01       	movw	r26, r24
    18e6:	99 27       	eor	r25, r25
    18e8:	88 27       	eor	r24, r24
    18ea:	48 2b       	or	r20, r24
    18ec:	59 2b       	or	r21, r25
    18ee:	6a 2b       	or	r22, r26
    18f0:	7b 2b       	or	r23, r27
      }
      /* Файл/папка не найдена */            
      if(fs_file.entry_able == 0) goto abort_noPath;
      
      /* Что то найдено */            
      fs_file.entry_start_cluster = fs_getEntryCluster();
    18f2:	40 93 94 03 	sts	0x0394, r20
    18f6:	50 93 95 03 	sts	0x0395, r21
    18fa:	60 93 96 03 	sts	0x0396, r22
    18fe:	70 93 97 03 	sts	0x0397, r23
      /* Это был последний элемент пути */            
      if(path == 0) break;                      
    1902:	01 15       	cp	r16, r1
    1904:	11 05       	cpc	r17, r1
    1906:	b9 f0       	breq	.+46     	; 0x1936 <fs_open0+0x4b8>
      /* Это должна быть папка */            
      if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) goto abort_noPath;
    1908:	80 91 6d 03 	lds	r24, 0x036D
    190c:	84 ff       	sbrs	r24, 4
    190e:	66 c0       	rjmp	.+204    	; 0x19dc <fs_open0+0x55e>
      /* Предотвращаем рекурсию для функции fs_move */
      if(r && fs_file.entry_start_cluster == fs_parent_dir_cluster) goto abort_noPath;
    1910:	aa 20       	and	r10, r10
    1912:	71 f0       	breq	.+28     	; 0x1930 <fs_open0+0x4b2>
    1914:	c0 90 a4 03 	lds	r12, 0x03A4
    1918:	d0 90 a5 03 	lds	r13, 0x03A5
    191c:	e0 90 a6 03 	lds	r14, 0x03A6
    1920:	f0 90 a7 03 	lds	r15, 0x03A7
    1924:	4c 15       	cp	r20, r12
    1926:	5d 05       	cpc	r21, r13
    1928:	6e 05       	cpc	r22, r14
    192a:	7f 05       	cpc	r23, r15
    192c:	09 f4       	brne	.+2      	; 0x1930 <fs_open0+0x4b2>
    192e:	56 c0       	rjmp	.+172    	; 0x19dc <fs_open0+0x55e>
      /* Наденная папка уже не будет корневой */            
      fs_notrootdir = 1;
    1930:	90 92 9c 03 	sts	0x039C, r9
    }
    1934:	04 ce       	rjmp	.-1016   	; 0x153e <fs_open0+0xc0>
  }
  /* Устанавливаем переменные */   
  fs_file.entry_able = 0;
    1936:	10 92 89 03 	sts	0x0389, r1
  fs_file.size  = LD_DWORD(FS_DIRENTRY + DIR_FileSize);
    193a:	80 91 7e 03 	lds	r24, 0x037E
    193e:	90 91 7f 03 	lds	r25, 0x037F
    1942:	a0 91 80 03 	lds	r26, 0x0380
    1946:	b0 91 81 03 	lds	r27, 0x0381
    194a:	80 93 9c 03 	sts	0x039C, r24
    194e:	90 93 9d 03 	sts	0x039D, r25
    1952:	a0 93 9e 03 	sts	0x039E, r26
    1956:	b0 93 9f 03 	sts	0x039F, r27
  fs_file.ptr   = 0;  
    195a:	10 92 98 03 	sts	0x0398, r1
    195e:	10 92 99 03 	sts	0x0399, r1
    1962:	10 92 9a 03 	sts	0x039A, r1
    1966:	10 92 9b 03 	sts	0x039B, r1
#ifndef FS_DISABLE_CHECK
  fs_file.opened     = OPENED_FILE;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 88 03 	sts	0x0388, r24
  if(FS_DIRENTRY[DIR_Attr] & AM_DIR) fs_file.opened = OPENED_DIR; 
    1970:	80 91 6d 03 	lds	r24, 0x036D
    1974:	84 ff       	sbrs	r24, 4
    1976:	03 c0       	rjmp	.+6      	; 0x197e <fs_open0+0x500>
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	80 93 88 03 	sts	0x0388, r24
#endif

  /* Нельзя дважды открывать файл */
#ifndef FS_DISABLE_CHECK
#ifndef FS_DISABLE_SWAP
  if(fs_secondFile.opened==OPENED_FILE && fs_file.opened==OPENED_FILE && fs_secondFile.entry_sector == fs_file.entry_sector && fs_secondFile.entry_index==fs_file.entry_index) {
    197e:	80 91 b0 03 	lds	r24, 0x03B0
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	81 f5       	brne	.+96     	; 0x19e6 <fs_open0+0x568>
    1986:	80 91 88 03 	lds	r24, 0x0388
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	61 f5       	brne	.+88     	; 0x19e6 <fs_open0+0x568>
    198e:	40 91 b8 03 	lds	r20, 0x03B8
    1992:	50 91 b9 03 	lds	r21, 0x03B9
    1996:	60 91 ba 03 	lds	r22, 0x03BA
    199a:	70 91 bb 03 	lds	r23, 0x03BB
    199e:	80 91 90 03 	lds	r24, 0x0390
    19a2:	90 91 91 03 	lds	r25, 0x0391
    19a6:	a0 91 92 03 	lds	r26, 0x0392
    19aa:	b0 91 93 03 	lds	r27, 0x0393
    19ae:	48 17       	cp	r20, r24
    19b0:	59 07       	cpc	r21, r25
    19b2:	6a 07       	cpc	r22, r26
    19b4:	7b 07       	cpc	r23, r27
    19b6:	b9 f4       	brne	.+46     	; 0x19e6 <fs_open0+0x568>
    19b8:	20 91 b2 03 	lds	r18, 0x03B2
    19bc:	30 91 b3 03 	lds	r19, 0x03B3
    19c0:	80 91 8a 03 	lds	r24, 0x038A
    19c4:	90 91 8b 03 	lds	r25, 0x038B
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <fs_open0+0x568>
    fs_secondFile.opened = OPENED_NONE; //!9-05-2014 Закрываем второй файл
    19ce:	10 92 b0 03 	sts	0x03B0, r1
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <fs_open0+0x568>
    /* Слишком длинное име */
    if(i == ni) break;
    /* Запрещенные символы */
#ifndef FS_DISABLE_CHECK    
    if(exists(PSTR("+,;=[]*?<:>\\|\""), c)) break;
    if(c <= 0x20) break;
    19d4:	8f ed       	ldi	r24, 0xDF	; 223
    19d6:	86 0f       	add	r24, r22
    19d8:	8f 35       	cpi	r24, 0x5F	; 95
    19da:	38 f0       	brcs	.+14     	; 0x19ea <fs_open0+0x56c>
#endif
#endif

  return 0;
abort_noPath:
  lastError = ERR_NO_PATH;
    19dc:	84 e0       	ldi	r24, 0x04	; 4
    19de:	80 93 af 03 	sts	0x03AF, r24
      path = fs_open0_name(path);
      if(path == (CONST uint8_t*)1) goto abort_noPath;      	
      /* Ищем имя в папке */      
      fs_file.entry_able = 0;
      while(1) {              
        if(fs_readdir_nocheck()) return 1;    
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e c0       	rjmp	.+28     	; 0x1a02 <fs_open0+0x584>
    fs_secondFile.opened = OPENED_NONE; //!9-05-2014 Закрываем второй файл
  }
#endif
#endif

  return 0;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0c c0       	rjmp	.+24     	; 0x1a02 <fs_open0+0x584>
    if(exists(PSTR("+,;=[]*?<:>\\|\""), c)) break;
    if(c <= 0x20) break;
    if(c >= 0x80) break;
#endif    
    /* Приводим к верхнему регистру */
    if(c >= 'a' && c <= 'z') c -= 0x20;
    19ea:	8f e9       	ldi	r24, 0x9F	; 159
    19ec:	86 0f       	add	r24, r22
    19ee:	8a 31       	cpi	r24, 0x1A	; 26
    19f0:	08 f4       	brcc	.+2      	; 0x19f4 <fs_open0+0x576>
    19f2:	60 52       	subi	r22, 0x20	; 32
    /* Сохраняем имя */
    FS_DIRFIND[i++] = c;
    19f4:	e7 2f       	mov	r30, r23
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	e9 5a       	subi	r30, 0xA9	; 169
    19fa:	fc 4f       	sbci	r31, 0xFC	; 252
    19fc:	60 83       	st	Z, r22
    19fe:	7f 5f       	subi	r23, 0xFF	; 255
    1a00:	c3 cd       	rjmp	.-1146   	; 0x1588 <fs_open0+0x10a>
  return 0;
abort_noPath:
  lastError = ERR_NO_PATH;
abort: 
  return 1;
}
    1a02:	2b 96       	adiw	r28, 0x0b	; 11
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	9f 90       	pop	r9
    1a24:	8f 90       	pop	r8
    1a26:	08 95       	ret

00001a28 <fs_open>:
/**************************************************************************
*  Открыть файл                                                           *
**************************************************************************/

uint8_t fs_open(void) {
  if(fs_openany()) goto abort;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <fs_open+0x1c>
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened == OPENED_FILE) return 0;
    1a32:	80 91 88 03 	lds	r24, 0x0388
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	39 f0       	breq	.+14     	; 0x1a48 <fs_open+0x20>
  fs_file.opened = OPENED_NONE;
    1a3a:	10 92 88 03 	sts	0x0388, r1
#else  
  if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) return 0;
#endif
  lastError = ERR_NO_PATH;
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	80 93 af 03 	sts	0x03AF, r24
abort:
  return 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	08 95       	ret
**************************************************************************/

uint8_t fs_open(void) {
  if(fs_openany()) goto abort;
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened == OPENED_FILE) return 0;
    1a48:	80 e0       	ldi	r24, 0x00	; 0
  if((FS_DIRENTRY[DIR_Attr] & AM_DIR) == 0) return 0;
#endif
  lastError = ERR_NO_PATH;
abort:
  return 1;
}
    1a4a:	08 95       	ret

00001a4c <fs_opendir>:
/**************************************************************************
*  Открыть папку                                                          *
**************************************************************************/

uint8_t fs_opendir(void) {
  if(fs_openany()) goto abort;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
    1a52:	81 11       	cpse	r24, r1
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <fs_opendir+0x1c>
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened == OPENED_DIR) return 0;
    1a56:	80 91 88 03 	lds	r24, 0x0388
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	39 f0       	breq	.+14     	; 0x1a6c <fs_opendir+0x20>
  fs_file.opened = OPENED_NONE;
    1a5e:	10 92 88 03 	sts	0x0388, r1
#else  
  if(FS_DIRENTRY[DIR_Attr] & AM_DIR) return 0;
#endif
  lastError = ERR_NO_PATH;
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	80 93 af 03 	sts	0x03AF, r24
abort:
  return 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	08 95       	ret
**************************************************************************/

uint8_t fs_opendir(void) {
  if(fs_openany()) goto abort;
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened == OPENED_DIR) return 0;
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
  if(FS_DIRENTRY[DIR_Attr] & AM_DIR) return 0;
#endif
  lastError = ERR_NO_PATH;
abort:
  return 1;
}
    1a6e:	08 95       	ret

00001a70 <fs_read0>:
*  Аргументы:                                                             *
*    ptr      - буфер для чтения, может быть buf                          *
*    len      - кол-во байт, которые необходимо прочитать                 *
**************************************************************************/

uint8_t fs_read0(uint8_t* ptr, WORD len) {
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	6c 01       	movw	r12, r24
    1a86:	eb 01       	movw	r28, r22
  WORD sectorLen;

  /* Проверка ошибок программиста */
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
    1a88:	80 91 88 03 	lds	r24, 0x0388
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	21 f4       	brne	.+8      	; 0x1a98 <fs_read0+0x28>
  while(len) {
    /* Если указатель находится на границе сектора */    
    if(fs_nextRWSector()) goto abort;
  
    /* Кол-во байт до конца сектора */      
    sectorLen = 512 - ((WORD)fs_file.ptr % 512);
    1a90:	a1 2c       	mov	r10, r1
    1a92:	72 e0       	ldi	r23, 0x02	; 2
    1a94:	b7 2e       	mov	r11, r23
    1a96:	2e c0       	rjmp	.+92     	; 0x1af4 <fs_read0+0x84>
uint8_t fs_read0(uint8_t* ptr, WORD len) {
  WORD sectorLen;

  /* Проверка ошибок программиста */
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	80 93 af 03 	sts	0x03AF, r24
    1a9e:	5f c0       	rjmp	.+190    	; 0x1b5e <fs_read0+0xee>
#endif

  while(len) {
    /* Если указатель находится на границе сектора */    
    if(fs_nextRWSector()) goto abort;
    1aa0:	0e 94 4c 07 	call	0xe98	; 0xe98 <fs_nextRWSector>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	5b c0       	rjmp	.+182    	; 0x1b5e <fs_read0+0xee>
  
    /* Кол-во байт до конца сектора */      
    sectorLen = 512 - ((WORD)fs_file.ptr % 512);
    1aa8:	20 91 98 03 	lds	r18, 0x0398
    1aac:	30 91 99 03 	lds	r19, 0x0399
    1ab0:	31 70       	andi	r19, 0x01	; 1
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	82 1b       	sub	r24, r18
    1ab6:	93 0b       	sbc	r25, r19
    1ab8:	7e 01       	movw	r14, r28
    1aba:	8c 17       	cp	r24, r28
    1abc:	9d 07       	cpc	r25, r29
    1abe:	08 f4       	brcc	.+2      	; 0x1ac2 <fs_read0+0x52>
    1ac0:	7c 01       	movw	r14, r24
    if(len < sectorLen) sectorLen = len;

    /* Читаем данные */
    if(ptr) {
    1ac2:	c1 14       	cp	r12, r1
    1ac4:	d1 04       	cpc	r13, r1
    1ac6:	c9 f4       	brne	.+50     	; 0x1afa <fs_read0+0x8a>
      if(sd_read(ptr, fs_file.sector, (WORD)fs_file.ptr % 512, sectorLen)) goto abort;
      ptr += sectorLen;         
    }
  
    /* Увеличиваем смещение */
    fs_file.ptr += sectorLen;
    1ac8:	80 91 98 03 	lds	r24, 0x0398
    1acc:	90 91 99 03 	lds	r25, 0x0399
    1ad0:	a0 91 9a 03 	lds	r26, 0x039A
    1ad4:	b0 91 9b 03 	lds	r27, 0x039B
    1ad8:	8e 0d       	add	r24, r14
    1ada:	9f 1d       	adc	r25, r15
    1adc:	a1 1d       	adc	r26, r1
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	80 93 98 03 	sts	0x0398, r24
    1ae4:	90 93 99 03 	sts	0x0399, r25
    1ae8:	a0 93 9a 03 	sts	0x039A, r26
    1aec:	b0 93 9b 03 	sts	0x039B, r27
    len -= sectorLen;
    1af0:	ce 19       	sub	r28, r14
    1af2:	df 09       	sbc	r29, r15
  /* Проверка ошибок программиста */
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
#endif

  while(len) {
    1af4:	20 97       	sbiw	r28, 0x00	; 0
    1af6:	a1 f6       	brne	.-88     	; 0x1aa0 <fs_read0+0x30>
    1af8:	11 c0       	rjmp	.+34     	; 0x1b1c <fs_read0+0xac>
    sectorLen = 512 - ((WORD)fs_file.ptr % 512);
    if(len < sectorLen) sectorLen = len;

    /* Читаем данные */
    if(ptr) {
      if(sd_read(ptr, fs_file.sector, (WORD)fs_file.ptr % 512, sectorLen)) goto abort;
    1afa:	40 91 a4 03 	lds	r20, 0x03A4
    1afe:	50 91 a5 03 	lds	r21, 0x03A5
    1b02:	60 91 a6 03 	lds	r22, 0x03A6
    1b06:	70 91 a7 03 	lds	r23, 0x03A7
    1b0a:	87 01       	movw	r16, r14
    1b0c:	c6 01       	movw	r24, r12
    1b0e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <sd_read>
    1b12:	81 11       	cpse	r24, r1
    1b14:	24 c0       	rjmp	.+72     	; 0x1b5e <fs_read0+0xee>
      ptr += sectorLen;         
    1b16:	ce 0c       	add	r12, r14
    1b18:	df 1c       	adc	r13, r15
    1b1a:	d6 cf       	rjmp	.-84     	; 0x1ac8 <fs_read0+0x58>
    fs_file.ptr += sectorLen;
    len -= sectorLen;
  }

  /* Увеличение размера файла */
  if(fs_file.ptr > fs_file.size) fs_file.size = fs_file.ptr, fs_file.changed = 1;
    1b1c:	80 91 98 03 	lds	r24, 0x0398
    1b20:	90 91 99 03 	lds	r25, 0x0399
    1b24:	a0 91 9a 03 	lds	r26, 0x039A
    1b28:	b0 91 9b 03 	lds	r27, 0x039B
    1b2c:	40 91 9c 03 	lds	r20, 0x039C
    1b30:	50 91 9d 03 	lds	r21, 0x039D
    1b34:	60 91 9e 03 	lds	r22, 0x039E
    1b38:	70 91 9f 03 	lds	r23, 0x039F
    1b3c:	48 17       	cp	r20, r24
    1b3e:	59 07       	cpc	r21, r25
    1b40:	6a 07       	cpc	r22, r26
    1b42:	7b 07       	cpc	r23, r27
    1b44:	80 f4       	brcc	.+32     	; 0x1b66 <fs_read0+0xf6>
    1b46:	80 93 9c 03 	sts	0x039C, r24
    1b4a:	90 93 9d 03 	sts	0x039D, r25
    1b4e:	a0 93 9e 03 	sts	0x039E, r26
    1b52:	b0 93 9f 03 	sts	0x039F, r27
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 a8 03 	sts	0x03A8, r24
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <fs_read0+0xf6>
    
  return 0;
abort:
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
    1b5e:	10 92 88 03 	sts	0x0388, r1
#endif
  return 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <fs_read0+0xf8>
    fs_file.ptr += sectorLen;
    len -= sectorLen;
  }

  /* Увеличение размера файла */
  if(fs_file.ptr > fs_file.size) fs_file.size = fs_file.ptr, fs_file.changed = 1;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
abort:
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
#endif
  return 1;
}
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	08 95       	ret

00001b7e <fs_read>:
*    ptr      - буфер для чтения, может быть buf                          *
*    len      - кол-во байт, которые необходимо прочитать                 *
*    readed   - указатель, для сохранения кол-ва реально прочитанных байт *
**************************************************************************/

uint8_t fs_read(uint8_t* ptr, WORD len, WORD* readed) {
    1b7e:	4f 92       	push	r4
    1b80:	5f 92       	push	r5
    1b82:	6f 92       	push	r6
    1b84:	7f 92       	push	r7
    1b86:	8f 92       	push	r8
    1b88:	9f 92       	push	r9
    1b8a:	af 92       	push	r10
    1b8c:	bf 92       	push	r11
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
  /* Ограничиваем кол-во байт для чтения */
  if(len > fs_file.size - fs_file.ptr) len = (WORD)(fs_file.size - fs_file.ptr);
    1b9a:	c0 90 9c 03 	lds	r12, 0x039C
    1b9e:	d0 90 9d 03 	lds	r13, 0x039D
    1ba2:	e0 90 9e 03 	lds	r14, 0x039E
    1ba6:	f0 90 9f 03 	lds	r15, 0x039F
    1baa:	00 91 98 03 	lds	r16, 0x0398
    1bae:	10 91 99 03 	lds	r17, 0x0399
    1bb2:	20 91 9a 03 	lds	r18, 0x039A
    1bb6:	30 91 9b 03 	lds	r19, 0x039B
    1bba:	2b 01       	movw	r4, r22
    1bbc:	61 2c       	mov	r6, r1
    1bbe:	71 2c       	mov	r7, r1
    1bc0:	46 01       	movw	r8, r12
    1bc2:	57 01       	movw	r10, r14
    1bc4:	80 1a       	sub	r8, r16
    1bc6:	91 0a       	sbc	r9, r17
    1bc8:	a2 0a       	sbc	r10, r18
    1bca:	b3 0a       	sbc	r11, r19
    1bcc:	84 14       	cp	r8, r4
    1bce:	95 04       	cpc	r9, r5
    1bd0:	a6 04       	cpc	r10, r6
    1bd2:	b7 04       	cpc	r11, r7
    1bd4:	18 f4       	brcc	.+6      	; 0x1bdc <fs_read+0x5e>
    1bd6:	b6 01       	movw	r22, r12
    1bd8:	60 1b       	sub	r22, r16
    1bda:	71 0b       	sbc	r23, r17
  *readed = len; 
    1bdc:	fa 01       	movw	r30, r20
    1bde:	71 83       	std	Z+1, r23	; 0x01
    1be0:	60 83       	st	Z, r22
  
  /* Проверка на ошибки происходит там */
  return fs_read0(ptr, len);
}
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	cf 90       	pop	r12
    1bee:	bf 90       	pop	r11
    1bf0:	af 90       	pop	r10
    1bf2:	9f 90       	pop	r9
    1bf4:	8f 90       	pop	r8
    1bf6:	7f 90       	pop	r7
    1bf8:	6f 90       	pop	r6
    1bfa:	5f 90       	pop	r5
    1bfc:	4f 90       	pop	r4
  /* Ограничиваем кол-во байт для чтения */
  if(len > fs_file.size - fs_file.ptr) len = (WORD)(fs_file.size - fs_file.ptr);
  *readed = len; 
  
  /* Проверка на ошибки происходит там */
  return fs_read0(ptr, len);
    1bfe:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <fs_read0>

00001c02 <fs_lseek>:
*  Установить смещение чтения/записи файла                                *
**************************************************************************/

#define LSEEK_STEP 32768

uint8_t fs_lseek(unsigned long off, uint8_t mode) {
    1c02:	8f 92       	push	r8
    1c04:	9f 92       	push	r9
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	6b 01       	movw	r12, r22
    1c14:	7c 01       	movw	r14, r24
    1c16:	80 91 98 03 	lds	r24, 0x0398
    1c1a:	90 91 99 03 	lds	r25, 0x0399
    1c1e:	a0 91 9a 03 	lds	r26, 0x039A
    1c22:	b0 91 9b 03 	lds	r27, 0x039B
  unsigned long l;

  /* Режим */
  if(mode==1) off += fs_file.ptr; else
    1c26:	41 30       	cpi	r20, 0x01	; 1
    1c28:	29 f4       	brne	.+10     	; 0x1c34 <fs_lseek+0x32>
    1c2a:	c8 0e       	add	r12, r24
    1c2c:	d9 1e       	adc	r13, r25
    1c2e:	ea 1e       	adc	r14, r26
    1c30:	fb 1e       	adc	r15, r27
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <fs_lseek+0x4e>
  if(mode==2) off += fs_file.size;                        
    1c34:	42 30       	cpi	r20, 0x02	; 2
    1c36:	61 f4       	brne	.+24     	; 0x1c50 <fs_lseek+0x4e>
    1c38:	40 91 9c 03 	lds	r20, 0x039C
    1c3c:	50 91 9d 03 	lds	r21, 0x039D
    1c40:	60 91 9e 03 	lds	r22, 0x039E
    1c44:	70 91 9f 03 	lds	r23, 0x039F
    1c48:	c4 0e       	add	r12, r20
    1c4a:	d5 1e       	adc	r13, r21
    1c4c:	e6 1e       	adc	r14, r22
    1c4e:	f7 1e       	adc	r15, r23

  /* Можно заменить на fs_file.ptr = 0 для уменьшения кода*/ 
  if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
    1c50:	c8 16       	cp	r12, r24
    1c52:	d9 06       	cpc	r13, r25
    1c54:	ea 06       	cpc	r14, r26
    1c56:	fb 06       	cpc	r15, r27
    1c58:	28 f0       	brcs	.+10     	; 0x1c64 <fs_lseek+0x62>
    1c5a:	c8 1a       	sub	r12, r24
    1c5c:	d9 0a       	sbc	r13, r25
    1c5e:	ea 0a       	sbc	r14, r26
    1c60:	fb 0a       	sbc	r15, r27
    1c62:	08 c0       	rjmp	.+16     	; 0x1c74 <fs_lseek+0x72>
    1c64:	10 92 98 03 	sts	0x0398, r1
    1c68:	10 92 99 03 	sts	0x0399, r1
    1c6c:	10 92 9a 03 	sts	0x039A, r1
    1c70:	10 92 9b 03 	sts	0x039B, r1
    1c74:	46 01       	movw	r8, r12
    1c76:	57 01       	movw	r10, r14
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	c8 16       	cp	r12, r24
    1c7c:	80 e8       	ldi	r24, 0x80	; 128
    1c7e:	d8 06       	cpc	r13, r24
    1c80:	e1 04       	cpc	r14, r1
    1c82:	f1 04       	cpc	r15, r1
    1c84:	28 f0       	brcs	.+10     	; 0x1c90 <fs_lseek+0x8e>
    1c86:	81 2c       	mov	r8, r1
    1c88:	e0 e8       	ldi	r30, 0x80	; 128
    1c8a:	9e 2e       	mov	r9, r30
    1c8c:	a1 2c       	mov	r10, r1
    1c8e:	b1 2c       	mov	r11, r1
  
  do { /* Выполняем один цикл даже для off=0, так как внутри происходит проверка на ошибки */
    l = off;
    if(l > LSEEK_STEP) l = LSEEK_STEP;
    if(fs_read0(0, (WORD)l)) return 1;
    1c90:	b4 01       	movw	r22, r8
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fs_read0>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	19 c0       	rjmp	.+50     	; 0x1cd0 <fs_lseek+0xce>
    off -= l;
    1c9e:	c8 18       	sub	r12, r8
    1ca0:	d9 08       	sbc	r13, r9
    1ca2:	ea 08       	sbc	r14, r10
    1ca4:	fb 08       	sbc	r15, r11
  } while(off);
    1ca6:	31 f7       	brne	.-52     	; 0x1c74 <fs_lseek+0x72>

  /* Размер файла мог изменится */
  fs_saveFileLength();
    1ca8:	0e 94 12 08 	call	0x1024	; 0x1024 <fs_saveFileLength>
  
  /* Результат */
  fs_tmp = fs_file.ptr;
    1cac:	80 91 98 03 	lds	r24, 0x0398
    1cb0:	90 91 99 03 	lds	r25, 0x0399
    1cb4:	a0 91 9a 03 	lds	r26, 0x039A
    1cb8:	b0 91 9b 03 	lds	r27, 0x039B
    1cbc:	80 93 de 03 	sts	0x03DE, r24
    1cc0:	90 93 df 03 	sts	0x03DF, r25
    1cc4:	a0 93 e0 03 	sts	0x03E0, r26
    1cc8:	b0 93 e1 03 	sts	0x03E1, r27

  return 0;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <fs_lseek+0xd0>
  if(off >= fs_file.ptr) off -= fs_file.ptr; else fs_file.ptr = 0;
  
  do { /* Выполняем один цикл даже для off=0, так как внутри происходит проверка на ошибки */
    l = off;
    if(l > LSEEK_STEP) l = LSEEK_STEP;
    if(fs_read0(0, (WORD)l)) return 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
  
  /* Результат */
  fs_tmp = fs_file.ptr;

  return 0;
}
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	9f 90       	pop	r9
    1ce0:	8f 90       	pop	r8
    1ce2:	08 95       	ret

00001ce4 <fs_write_start>:

/**************************************************************************
*  Записать в файл (шаг 1)                                                *
***************************************************************************/

uint8_t fs_write_start(void) {
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
  WORD len;

  /* Проверка ошибок программиста */
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
    1cf4:	80 91 88 03 	lds	r24, 0x0388
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	11 f0       	breq	.+4      	; 0x1d00 <fs_write_start+0x1c>
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <fs_write_start+0x2c>
  if(fs_wtotal == 0) { lastError = ERR_NO_DATA; goto abort; }
    1d00:	00 91 82 03 	lds	r16, 0x0382
    1d04:	10 91 83 03 	lds	r17, 0x0383
    1d08:	01 15       	cp	r16, r1
    1d0a:	11 05       	cpc	r17, r1
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <fs_write_start+0x32>
    1d0e:	89 e0       	ldi	r24, 0x09	; 9
    1d10:	80 93 af 03 	sts	0x03AF, r24
    1d14:	59 c0       	rjmp	.+178    	; 0x1dc8 <fs_write_start+0xe4>
#endif

  /* Сколько можно еще дописать в этот сектор? */
  len = 512 - (WORD)fs_file.ptr % 512;
    1d16:	c0 90 98 03 	lds	r12, 0x0398
    1d1a:	d0 90 99 03 	lds	r13, 0x0399
    1d1e:	e0 90 9a 03 	lds	r14, 0x039A
    1d22:	f0 90 9b 03 	lds	r15, 0x039B
    
  /* Ограничиваем остатком данных в файле */
  if(len > fs_wtotal) len = (WORD)fs_wtotal;

  /* Вычисление fs_file.sector, выделение кластеров */
  if(fs_nextRWSector()) goto abort; /* Должно вылетать только по ошибкам ERR_NO_FREE_SPACE, ERR_DISK_ERR */
    1d26:	0e 94 4c 07 	call	0xe98	; 0xe98 <fs_nextRWSector>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	4d c0       	rjmp	.+154    	; 0x1dc8 <fs_write_start+0xe4>
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
  if(fs_wtotal == 0) { lastError = ERR_NO_DATA; goto abort; }
#endif

  /* Сколько можно еще дописать в этот сектор? */
  len = 512 - (WORD)fs_file.ptr % 512;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	d8 22       	and	r13, r24
    1d32:	c0 e0       	ldi	r28, 0x00	; 0
    1d34:	d2 e0       	ldi	r29, 0x02	; 2
    1d36:	cc 19       	sub	r28, r12
    1d38:	dd 09       	sbc	r29, r13
    1d3a:	0c 17       	cp	r16, r28
    1d3c:	1d 07       	cpc	r17, r29
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <fs_write_start+0x5e>
    1d40:	e8 01       	movw	r28, r16

  /* Вычисление fs_file.sector, выделение кластеров */
  if(fs_nextRWSector()) goto abort; /* Должно вылетать только по ошибкам ERR_NO_FREE_SPACE, ERR_DISK_ERR */

  /* Корректируем длину файла */
  if(fs_file.size < fs_file.ptr + len) {
    1d42:	80 91 98 03 	lds	r24, 0x0398
    1d46:	90 91 99 03 	lds	r25, 0x0399
    1d4a:	a0 91 9a 03 	lds	r26, 0x039A
    1d4e:	b0 91 9b 03 	lds	r27, 0x039B
    1d52:	8c 0f       	add	r24, r28
    1d54:	9d 1f       	adc	r25, r29
    1d56:	a1 1d       	adc	r26, r1
    1d58:	b1 1d       	adc	r27, r1
    1d5a:	40 91 9c 03 	lds	r20, 0x039C
    1d5e:	50 91 9d 03 	lds	r21, 0x039D
    1d62:	60 91 9e 03 	lds	r22, 0x039E
    1d66:	70 91 9f 03 	lds	r23, 0x039F
    1d6a:	48 17       	cp	r20, r24
    1d6c:	59 07       	cpc	r21, r25
    1d6e:	6a 07       	cpc	r22, r26
    1d70:	7b 07       	cpc	r23, r27
    1d72:	58 f4       	brcc	.+22     	; 0x1d8a <fs_write_start+0xa6>
    fs_file.size = fs_file.ptr + len;
    1d74:	80 93 9c 03 	sts	0x039C, r24
    1d78:	90 93 9d 03 	sts	0x039D, r25
    1d7c:	a0 93 9e 03 	sts	0x039E, r26
    1d80:	b0 93 9f 03 	sts	0x039F, r27
    fs_file.changed = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 a8 03 	sts	0x03A8, r24
  }

  /* Читаем данные сектора, если не весь сектор будет заполнен */
  if(len != 512) {      
    1d8a:	c1 15       	cp	r28, r1
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	d8 07       	cpc	r29, r24
    1d90:	79 f4       	brne	.+30     	; 0x1db0 <fs_write_start+0xcc>
    if(sd_readBuf(fs_file.sector)) goto abort;
  }
                              
  fs_file_wlen = len;
    1d92:	d0 93 df 03 	sts	0x03DF, r29
    1d96:	c0 93 de 03 	sts	0x03DE, r28
  fs_file_woff = (WORD)fs_file.ptr % 512;
    1d9a:	80 91 98 03 	lds	r24, 0x0398
    1d9e:	90 91 99 03 	lds	r25, 0x0399
    1da2:	91 70       	andi	r25, 0x01	; 1
    1da4:	90 93 e1 03 	sts	0x03E1, r25
    1da8:	80 93 e0 03 	sts	0x03E0, r24
  return 0;
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	11 c0       	rjmp	.+34     	; 0x1dd2 <fs_write_start+0xee>
    fs_file.changed = 1;
  }

  /* Читаем данные сектора, если не весь сектор будет заполнен */
  if(len != 512) {      
    if(sd_readBuf(fs_file.sector)) goto abort;
    1db0:	60 91 a4 03 	lds	r22, 0x03A4
    1db4:	70 91 a5 03 	lds	r23, 0x03A5
    1db8:	80 91 a6 03 	lds	r24, 0x03A6
    1dbc:	90 91 a7 03 	lds	r25, 0x03A7
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    1dc4:	88 23       	and	r24, r24
    1dc6:	29 f3       	breq	.-54     	; 0x1d92 <fs_write_start+0xae>
  fs_file_woff = (WORD)fs_file.ptr % 512;
  return 0;
abort:
  /* Скорее всего это ошибка ERR_NO_FREE_SPACE */
  /* Если размер файла был изменен, то надо бы сохранить изменения в описатель файла. */
  fs_saveFileLength();
    1dc8:	0e 94 12 08 	call	0x1024	; 0x1024 <fs_saveFileLength>
  /* Закрываем файл */ 
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
    1dcc:	10 92 88 03 	sts	0x0388, r1
#endif
  return 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
}
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	08 95       	ret

00001de4 <fs_write_end>:
*  Записать в файл (шаг 2)                                                *
***************************************************************************/

uint8_t fs_write_end(void) {
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }
    1de4:	80 91 88 03 	lds	r24, 0x0388
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	21 f0       	breq	.+8      	; 0x1df4 <fs_write_end+0x10>
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	80 93 af 03 	sts	0x03AF, r24
    1df2:	36 c0       	rjmp	.+108    	; 0x1e60 <fs_write_end+0x7c>
#endif

  /* Записываем изменения на диск */
  if(sd_writeBuf(fs_file.sector)) goto abort;
    1df4:	60 91 a4 03 	lds	r22, 0x03A4
    1df8:	70 91 a5 03 	lds	r23, 0x03A5
    1dfc:	80 91 a6 03 	lds	r24, 0x03A6
    1e00:	90 91 a7 03 	lds	r25, 0x03A7
    1e04:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	2a c0       	rjmp	.+84     	; 0x1e60 <fs_write_end+0x7c>
  /* В случае ошибки файл может содержать больше кластеров, чем требуется по его размеру. */
  /* Но это не плохо, данные не повреждены. А эта ошибка проявится лишь в уменьшении */ 
  /* места на диске. */
  
  /* Счетчики */
  fs_file.ptr += fs_file_wlen;
    1e0c:	20 91 de 03 	lds	r18, 0x03DE
    1e10:	30 91 df 03 	lds	r19, 0x03DF
    1e14:	80 91 98 03 	lds	r24, 0x0398
    1e18:	90 91 99 03 	lds	r25, 0x0399
    1e1c:	a0 91 9a 03 	lds	r26, 0x039A
    1e20:	b0 91 9b 03 	lds	r27, 0x039B
    1e24:	82 0f       	add	r24, r18
    1e26:	93 1f       	adc	r25, r19
    1e28:	a1 1d       	adc	r26, r1
    1e2a:	b1 1d       	adc	r27, r1
    1e2c:	80 93 98 03 	sts	0x0398, r24
    1e30:	90 93 99 03 	sts	0x0399, r25
    1e34:	a0 93 9a 03 	sts	0x039A, r26
    1e38:	b0 93 9b 03 	sts	0x039B, r27
  fs_wtotal   -= fs_file_wlen;
    1e3c:	80 91 82 03 	lds	r24, 0x0382
    1e40:	90 91 83 03 	lds	r25, 0x0383
    1e44:	82 1b       	sub	r24, r18
    1e46:	93 0b       	sbc	r25, r19
    1e48:	90 93 83 03 	sts	0x0383, r25
    1e4c:	80 93 82 03 	sts	0x0382, r24

  /* Если запись закончена, сохраняем размера файла и первый кластер */   
  if(fs_wtotal == 0) {
    1e50:	89 2b       	or	r24, r25
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <fs_write_end+0x74>
    if(fs_saveFileLength()) goto abort;
  }

  /* Ок */  
  return 0;  
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	08 95       	ret
  fs_file.ptr += fs_file_wlen;
  fs_wtotal   -= fs_file_wlen;

  /* Если запись закончена, сохраняем размера файла и первый кластер */   
  if(fs_wtotal == 0) {
    if(fs_saveFileLength()) goto abort;
    1e58:	0e 94 12 08 	call	0x1024	; 0x1024 <fs_saveFileLength>
    1e5c:	88 23       	and	r24, r24
    1e5e:	d1 f3       	breq	.-12     	; 0x1e54 <fs_write_end+0x70>

  /* Ок */  
  return 0;  
abort:  
#ifndef FS_DISABLE_CHECK
    fs_file.opened = OPENED_NONE;
    1e60:	10 92 88 03 	sts	0x0388, r1
#endif
  return 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
}
    1e66:	08 95       	ret

00001e68 <fs_move0>:

/**************************************************************************
*  Переместить файл/папку                                                 *
**************************************************************************/

uint8_t fs_move0(void) {
    1e68:	8f 92       	push	r8
    1e6a:	9f 92       	push	r9
    1e6c:	af 92       	push	r10
    1e6e:	bf 92       	push	r11
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	65 97       	sbiw	r28, 0x15	; 21
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
  uint8_t tmp[21];
  WORD old_index;
  unsigned long old_sector, old_start_cluster;

#ifndef FS_DISABLE_CHECK
  if(fs_file.opened == OPENED_NONE) { lastError = ERR_NOT_OPENED; goto abort; }
    1e90:	80 91 88 03 	lds	r24, 0x0388
    1e94:	81 11       	cpse	r24, r1
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <fs_move0+0x38>
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	80 93 af 03 	sts	0x03AF, r24
    1e9e:	19 c0       	rjmp	.+50     	; 0x1ed2 <fs_move0+0x6a>
#endif

  /* Запоминаем старый описатель */
  old_index         = fs_file.entry_index;
    1ea0:	00 91 8a 03 	lds	r16, 0x038A
    1ea4:	10 91 8b 03 	lds	r17, 0x038B
  old_sector        = fs_file.entry_sector;
    1ea8:	c0 90 90 03 	lds	r12, 0x0390
    1eac:	d0 90 91 03 	lds	r13, 0x0391
    1eb0:	e0 90 92 03 	lds	r14, 0x0392
    1eb4:	f0 90 93 03 	lds	r15, 0x0393
  old_start_cluster = fs_file.entry_start_cluster;
    1eb8:	80 90 94 03 	lds	r8, 0x0394
    1ebc:	90 90 95 03 	lds	r9, 0x0395
    1ec0:	a0 90 96 03 	lds	r10, 0x0396
    1ec4:	b0 90 97 03 	lds	r11, 0x0397

  /* Создаем новый файл. В папку он превратится позже. 0x80 - это предотвращаем рекурсию. */  
  if(fs_open0(OPENED_FILE | 0x80)) goto abort;
    1ec8:	81 e8       	ldi	r24, 0x81	; 129
    1eca:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
    1ece:	88 23       	and	r24, r24
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <fs_move0+0x6e>
    if(sd_writeBuf(fs_tmp)) goto abort;
  }
                    
  return 0;
abort:
  return 1;
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	8c c0       	rjmp	.+280    	; 0x1fee <fs_move0+0x186>
  /* Создаем новый файл. В папку он превратится позже. 0x80 - это предотвращаем рекурсию. */  
  if(fs_open0(OPENED_FILE | 0x80)) goto abort;
  
  /* Предотвращаем ошибки программиста */
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
    1ed6:	10 92 88 03 	sts	0x0388, r1
#ifndef FS_DISABLE_SWAP  
  fs_secondFile.opened = OPENED_NONE; 
    1eda:	10 92 b0 03 	sts	0x03B0, r1
#endif
#endif
  /* fs_file.sector содежит первый кластер папки, в которой находится созданный файл. */

  /* Удаление старого файла/папки и перенос всех свойств */
  if(sd_readBuf(old_sector)) goto abort;
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	f4 cf       	rjmp	.-24     	; 0x1ed2 <fs_move0+0x6a>
  entry = buf + (old_index % 16) * 32;
    1eea:	c8 01       	movw	r24, r16
    1eec:	8f 70       	andi	r24, 0x0F	; 15
    1eee:	99 27       	eor	r25, r25
    1ef0:	a5 e0       	ldi	r26, 0x05	; 5
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	aa 95       	dec	r26
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <fs_move0+0x8a>
    1efa:	8e 57       	subi	r24, 0x7E	; 126
    1efc:	9e 4f       	sbci	r25, 0xFE	; 254
  memcpy(tmp, entry+11, 21);
    1efe:	25 e1       	ldi	r18, 0x15	; 21
    1f00:	fc 01       	movw	r30, r24
    1f02:	3b 96       	adiw	r30, 0x0b	; 11
    1f04:	de 01       	movw	r26, r28
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	01 90       	ld	r0, Z+
    1f0a:	0d 92       	st	X+, r0
    1f0c:	2a 95       	dec	r18
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <fs_move0+0xa0>
  entry[0] = 0xE5;
    1f10:	25 ee       	ldi	r18, 0xE5	; 229
    1f12:	fc 01       	movw	r30, r24
    1f14:	20 83       	st	Z, r18
  if(sd_writeBuf(old_sector)) goto abort;
    1f16:	c7 01       	movw	r24, r14
    1f18:	b6 01       	movw	r22, r12
    1f1a:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    1f1e:	81 11       	cpse	r24, r1
    1f20:	d8 cf       	rjmp	.-80     	; 0x1ed2 <fs_move0+0x6a>

  /* Копируем все свойства новому файлу, тем самым превращая его в папку */
  if(sd_readBuf(fs_file.entry_sector)) goto abort;
    1f22:	60 91 90 03 	lds	r22, 0x0390
    1f26:	70 91 91 03 	lds	r23, 0x0391
    1f2a:	80 91 92 03 	lds	r24, 0x0392
    1f2e:	90 91 93 03 	lds	r25, 0x0393
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    1f36:	81 11       	cpse	r24, r1
    1f38:	cc cf       	rjmp	.-104    	; 0x1ed2 <fs_move0+0x6a>
  entry = buf + (fs_file.entry_index % 16) * 32;
    1f3a:	00 91 8a 03 	lds	r16, 0x038A
    1f3e:	10 91 8b 03 	lds	r17, 0x038B
    1f42:	0f 70       	andi	r16, 0x0F	; 15
    1f44:	11 27       	eor	r17, r17
    1f46:	f5 e0       	ldi	r31, 0x05	; 5
    1f48:	00 0f       	add	r16, r16
    1f4a:	11 1f       	adc	r17, r17
    1f4c:	fa 95       	dec	r31
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <fs_move0+0xe0>
    1f50:	0e 57       	subi	r16, 0x7E	; 126
    1f52:	1e 4f       	sbci	r17, 0xFE	; 254
  memcpy(entry+11, tmp, 21);
    1f54:	85 e1       	ldi	r24, 0x15	; 21
    1f56:	fe 01       	movw	r30, r28
    1f58:	31 96       	adiw	r30, 0x01	; 1
    1f5a:	d8 01       	movw	r26, r16
    1f5c:	1b 96       	adiw	r26, 0x0b	; 11
    1f5e:	01 90       	ld	r0, Z+
    1f60:	0d 92       	st	X+, r0
    1f62:	8a 95       	dec	r24
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <fs_move0+0xf6>
  if(sd_writeBuf(fs_file.entry_sector)) goto abort;
    1f66:	60 91 90 03 	lds	r22, 0x0390
    1f6a:	70 91 91 03 	lds	r23, 0x0391
    1f6e:	80 91 92 03 	lds	r24, 0x0392
    1f72:	90 91 93 03 	lds	r25, 0x0393
    1f76:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	aa cf       	rjmp	.-172    	; 0x1ed2 <fs_move0+0x6a>

  /* В папке надо еще скорретировать описатель .. */
  if(entry[DIR_Attr] & AM_DIR) {
    1f7e:	f8 01       	movw	r30, r16
    1f80:	83 85       	ldd	r24, Z+11	; 0x0b
    1f82:	84 ff       	sbrs	r24, 4
    1f84:	33 c0       	rjmp	.+102    	; 0x1fec <fs_move0+0x184>
    fs_tmp = old_start_cluster; /* Первый кластер нашей папки */
    1f86:	80 92 de 03 	sts	0x03DE, r8
    1f8a:	90 92 df 03 	sts	0x03DF, r9
    1f8e:	a0 92 e0 03 	sts	0x03E0, r10
    1f92:	b0 92 e1 03 	sts	0x03E1, r11
    fs_clust2sect();
    1f96:	0e 94 4f 03 	call	0x69e	; 0x69e <fs_clust2sect>
    if(sd_readBuf(fs_tmp)) goto abort;
    1f9a:	60 91 de 03 	lds	r22, 0x03DE
    1f9e:	70 91 df 03 	lds	r23, 0x03DF
    1fa2:	80 91 e0 03 	lds	r24, 0x03E0
    1fa6:	90 91 e1 03 	lds	r25, 0x03E1
    1faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    1fae:	81 11       	cpse	r24, r1
    1fb0:	90 cf       	rjmp	.-224    	; 0x1ed2 <fs_move0+0x6a>
    fs_setEntryCluster(buf+32, fs_parent_dir_cluster); /* Первый кластер папки предка.*/
    1fb2:	80 91 a4 03 	lds	r24, 0x03A4
    1fb6:	90 91 a5 03 	lds	r25, 0x03A5
    1fba:	a0 91 a6 03 	lds	r26, 0x03A6
    1fbe:	b0 91 a7 03 	lds	r27, 0x03A7
/**************************************************************************
*  Установить в описатель кластер                                         *
**************************************************************************/

static void fs_setEntryCluster(uint8_t* entry, unsigned long cluster) {  
  LD_WORD(entry + DIR_FstClusLO) = (WORD)(cluster);
    1fc2:	90 93 bd 01 	sts	0x01BD, r25
    1fc6:	80 93 bc 01 	sts	0x01BC, r24
  LD_WORD(entry + DIR_FstClusHI) = (WORD)(cluster >> 16);
    1fca:	b0 93 b7 01 	sts	0x01B7, r27
    1fce:	a0 93 b6 01 	sts	0x01B6, r26
  if(entry[DIR_Attr] & AM_DIR) {
    fs_tmp = old_start_cluster; /* Первый кластер нашей папки */
    fs_clust2sect();
    if(sd_readBuf(fs_tmp)) goto abort;
    fs_setEntryCluster(buf+32, fs_parent_dir_cluster); /* Первый кластер папки предка.*/
    if(sd_writeBuf(fs_tmp)) goto abort;
    1fd2:	60 91 de 03 	lds	r22, 0x03DE
    1fd6:	70 91 df 03 	lds	r23, 0x03DF
    1fda:	80 91 e0 03 	lds	r24, 0x03E0
    1fde:	90 91 e1 03 	lds	r25, 0x03E1
    1fe2:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	81 11       	cpse	r24, r1
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <fs_move0+0x186>
  }
                    
  return 0;
    1fec:	90 e0       	ldi	r25, 0x00	; 0
abort:
  return 1;
}
    1fee:	89 2f       	mov	r24, r25
    1ff0:	65 96       	adiw	r28, 0x15	; 21
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	bf 90       	pop	r11
    200e:	af 90       	pop	r10
    2010:	9f 90       	pop	r9
    2012:	8f 90       	pop	r8
    2014:	08 95       	ret

00002016 <fs_move>:

uint8_t fs_move(const char* from, const char* to) {
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	eb 01       	movw	r28, r22
  strcpy((char*)buf, from);
    201c:	bc 01       	movw	r22, r24
    201e:	82 e8       	ldi	r24, 0x82	; 130
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	0e 94 b1 14 	call	0x2962	; 0x2962 <strcpy>
  if(fs_openany()) return 1;
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
    202c:	81 11       	cpse	r24, r1
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <fs_move+0x2c>
  strcpy((char*)buf, to);
    2030:	be 01       	movw	r22, r28
    2032:	82 e8       	ldi	r24, 0x82	; 130
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	0e 94 b1 14 	call	0x2962	; 0x2962 <strcpy>
  return fs_move0();
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28

uint8_t fs_move(const char* from, const char* to) {
  strcpy((char*)buf, from);
  if(fs_openany()) return 1;
  strcpy((char*)buf, to);
  return fs_move0();
    203e:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <fs_move0>
}
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <fs_delete>:
*  Удалить файл или пустую папку                                          *
*  Имя файла должно содержаться в buf и не превышать FS_MAXFILE симолов   *
*  включая терминатор                                                     *
**************************************************************************/

uint8_t fs_delete(void) {
    204a:	cf 92       	push	r12
    204c:	df 92       	push	r13
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
  unsigned long entrySector;
  uint8_t* entry;
     
  /* Там будет проверен fs_type == FS_ERROR */
  if(fs_openany()) goto abort;
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0e 94 3f 0a 	call	0x147e	; 0x147e <fs_open0>
    205c:	81 11       	cpse	r24, r1
    205e:	58 c0       	rjmp	.+176    	; 0x2110 <fs_delete+0xc6>
    
  /* Предотвращаем ошибки программиста */
  fs_file.opened = OPENED_NONE;
    2060:	10 92 88 03 	sts	0x0388, r1
#ifndef FS_DISABLE_SWAP  
  fs_secondFile.opened = OPENED_NONE; 
    2064:	10 92 b0 03 	sts	0x03B0, r1
#endif
                                                                   
  /* Корневую папку удалять нельзя */
  if(FS_DIRENTRY[0] == 0) { lastError = ERR_NO_PATH; goto abort; } 
    2068:	80 91 62 03 	lds	r24, 0x0362
    206c:	81 11       	cpse	r24, r1
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <fs_delete+0x2a>
    2070:	84 e0       	ldi	r24, 0x04	; 4
    2072:	1b c0       	rjmp	.+54     	; 0x20aa <fs_delete+0x60>

  /* Сохраняем интерформацию о найденном файле, так как fs_readdir ниже их прибьет */
  entrySector = fs_file.entry_sector;
    2074:	c0 90 90 03 	lds	r12, 0x0390
    2078:	d0 90 91 03 	lds	r13, 0x0391
    207c:	e0 90 92 03 	lds	r14, 0x0392
    2080:	f0 90 93 03 	lds	r15, 0x0393
  entry = buf + (fs_file.entry_index % 16) * 32;
    2084:	c0 91 8a 03 	lds	r28, 0x038A
    2088:	d0 91 8b 03 	lds	r29, 0x038B

  /* В папке не должно быть файлов */
  if(FS_DIRENTRY[DIR_Attr] & AM_DIR) {
    208c:	80 91 6d 03 	lds	r24, 0x036D
    2090:	84 ff       	sbrs	r24, 4
    2092:	0e c0       	rjmp	.+28     	; 0x20b0 <fs_delete+0x66>
    /* Перематывем папку на начало */
    fs_file.entry_able = 0;                                                      
    2094:	10 92 89 03 	sts	0x0389, r1
    /* Ищем первый файл или папку */
    /* fs_file.entry_start_cluster сохряняется (содержит первый кластер файла или папки) */   
    if(fs_readdir_nocheck()) goto abort;
    2098:	0e 94 19 0a 	call	0x1432	; 0x1432 <fs_readdir_nocheck>
    209c:	81 11       	cpse	r24, r1
    209e:	38 c0       	rjmp	.+112    	; 0x2110 <fs_delete+0xc6>
    /* Если нашли, то ошибка */                                        
    if(fs_file.entry_able) { lastError = ERR_DIR_NOT_EMPTY; goto abort; } 
    20a0:	80 91 89 03 	lds	r24, 0x0389
    20a4:	88 23       	and	r24, r24
    20a6:	21 f0       	breq	.+8      	; 0x20b0 <fs_delete+0x66>
    20a8:	87 e0       	ldi	r24, 0x07	; 7
    20aa:	80 93 af 03 	sts	0x03AF, r24
    20ae:	30 c0       	rjmp	.+96     	; 0x2110 <fs_delete+0xc6>
  }

  /* Удаляем описатель */
  if(sd_readBuf(entrySector)) goto abort;
    20b0:	c7 01       	movw	r24, r14
    20b2:	b6 01       	movw	r22, r12
    20b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sd_readBuf>
    20b8:	81 11       	cpse	r24, r1
    20ba:	2a c0       	rjmp	.+84     	; 0x2110 <fs_delete+0xc6>
  /* Корневую папку удалять нельзя */
  if(FS_DIRENTRY[0] == 0) { lastError = ERR_NO_PATH; goto abort; } 

  /* Сохраняем интерформацию о найденном файле, так как fs_readdir ниже их прибьет */
  entrySector = fs_file.entry_sector;
  entry = buf + (fs_file.entry_index % 16) * 32;
    20bc:	fe 01       	movw	r30, r28
    20be:	ef 70       	andi	r30, 0x0F	; 15
    20c0:	ff 27       	eor	r31, r31
    if(fs_file.entry_able) { lastError = ERR_DIR_NOT_EMPTY; goto abort; } 
  }

  /* Удаляем описатель */
  if(sd_readBuf(entrySector)) goto abort;
  entry[0] = 0xE5;
    20c2:	b5 e0       	ldi	r27, 0x05	; 5
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ba 95       	dec	r27
    20ca:	e1 f7       	brne	.-8      	; 0x20c4 <fs_delete+0x7a>
    20cc:	ee 57       	subi	r30, 0x7E	; 126
    20ce:	fe 4f       	sbci	r31, 0xFE	; 254
    20d0:	85 ee       	ldi	r24, 0xE5	; 229
    20d2:	80 83       	st	Z, r24
  if(sd_writeBuf(entrySector)) goto abort;
    20d4:	c7 01       	movw	r24, r14
    20d6:	b6 01       	movw	r22, r12
    20d8:	0e 94 88 03 	call	0x710	; 0x710 <sd_writeBuf>
    20dc:	81 11       	cpse	r24, r1
    20de:	18 c0       	rjmp	.+48     	; 0x2110 <fs_delete+0xc6>

  /* Освобождаем цепочку кластеров */
  fs_tmp = fs_file.entry_start_cluster;
    20e0:	80 91 94 03 	lds	r24, 0x0394
    20e4:	90 91 95 03 	lds	r25, 0x0395
    20e8:	a0 91 96 03 	lds	r26, 0x0396
    20ec:	b0 91 97 03 	lds	r27, 0x0397
    20f0:	80 93 de 03 	sts	0x03DE, r24
    20f4:	90 93 df 03 	sts	0x03DF, r25
    20f8:	a0 93 e0 03 	sts	0x03E0, r26
    20fc:	b0 93 e1 03 	sts	0x03E1, r27
  return fs_freeChain();  
abort:
  return 1;
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
  entry[0] = 0xE5;
  if(sd_writeBuf(entrySector)) goto abort;

  /* Освобождаем цепочку кластеров */
  fs_tmp = fs_file.entry_start_cluster;
  return fs_freeChain();  
    210c:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <fs_freeChain>
abort:
  return 1;
}
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	ff 90       	pop	r15
    2118:	ef 90       	pop	r14
    211a:	df 90       	pop	r13
    211c:	cf 90       	pop	r12
    211e:	08 95       	ret

00002120 <fs_write_eof>:
**************************************************************************/

uint8_t fs_write_eof(void) {
  /* Проверка ошибок программиста */
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) { lastError = ERR_NOT_OPENED; goto abort; }  
    2120:	80 91 88 03 	lds	r24, 0x0388
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	21 f0       	breq	.+8      	; 0x2130 <fs_write_eof+0x10>
    2128:	83 e0       	ldi	r24, 0x03	; 3
    212a:	80 93 af 03 	sts	0x03AF, r24
    212e:	58 c0       	rjmp	.+176    	; 0x21e0 <fs_write_eof+0xc0>
#endif

  /* Корректируем либо FAT, либо описатель файла. */
  if(fs_file.ptr == 0) {
    2130:	80 91 98 03 	lds	r24, 0x0398
    2134:	90 91 99 03 	lds	r25, 0x0399
    2138:	a0 91 9a 03 	lds	r26, 0x039A
    213c:	b0 91 9b 03 	lds	r27, 0x039B
    2140:	89 2b       	or	r24, r25
    2142:	8a 2b       	or	r24, r26
    2144:	8b 2b       	or	r24, r27
    2146:	c9 f4       	brne	.+50     	; 0x217a <fs_write_eof+0x5a>
    /* Удалем все кластеры файла */
    fs_tmp = fs_file.entry_start_cluster;
    2148:	80 91 94 03 	lds	r24, 0x0394
    214c:	90 91 95 03 	lds	r25, 0x0395
    2150:	a0 91 96 03 	lds	r26, 0x0396
    2154:	b0 91 97 03 	lds	r27, 0x0397
    2158:	80 93 de 03 	sts	0x03DE, r24
    215c:	90 93 df 03 	sts	0x03DF, r25
    2160:	a0 93 e0 03 	sts	0x03E0, r26
    2164:	b0 93 e1 03 	sts	0x03E1, r27
    fs_file.entry_start_cluster = 0;
    2168:	10 92 94 03 	sts	0x0394, r1
    216c:	10 92 95 03 	sts	0x0395, r1
    2170:	10 92 96 03 	sts	0x0396, r1
    2174:	10 92 97 03 	sts	0x0397, r1
    2178:	18 c0       	rjmp	.+48     	; 0x21aa <fs_write_eof+0x8a>
  } else {
    /* Этот кластер файла последний. */
    fs_tmp = LAST_CLUSTER;
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	9f ef       	ldi	r25, 0xFF	; 255
    217e:	af ef       	ldi	r26, 0xFF	; 255
    2180:	bf e0       	ldi	r27, 0x0F	; 15
    2182:	80 93 de 03 	sts	0x03DE, r24
    2186:	90 93 df 03 	sts	0x03DF, r25
    218a:	a0 93 e0 03 	sts	0x03E0, r26
    218e:	b0 93 e1 03 	sts	0x03E1, r27
    if(fs_setNextCluster(fs_file.cluster)) goto abort; /* fs_tmp будет содержать следующий кластер, так как записывается LAST_CLUSTER */
    2192:	60 91 a0 03 	lds	r22, 0x03A0
    2196:	70 91 a1 03 	lds	r23, 0x03A1
    219a:	80 91 a2 03 	lds	r24, 0x03A2
    219e:	90 91 a3 03 	lds	r25, 0x03A3
    21a2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fs_setNextCluster>
    21a6:	81 11       	cpse	r24, r1
    21a8:	1b c0       	rjmp	.+54     	; 0x21e0 <fs_write_eof+0xc0>
  }

  /* Удалем все кластеры файла после этого. (они содержатся в fs_tmp); */
  if(fs_freeChain()) goto abort;
    21aa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fs_freeChain>
    21ae:	81 11       	cpse	r24, r1
    21b0:	17 c0       	rjmp	.+46     	; 0x21e0 <fs_write_eof+0xc0>

  /* Сохраняем длну и первый кластер */
  fs_file.size    = fs_file.ptr;
    21b2:	80 91 98 03 	lds	r24, 0x0398
    21b6:	90 91 99 03 	lds	r25, 0x0399
    21ba:	a0 91 9a 03 	lds	r26, 0x039A
    21be:	b0 91 9b 03 	lds	r27, 0x039B
    21c2:	80 93 9c 03 	sts	0x039C, r24
    21c6:	90 93 9d 03 	sts	0x039D, r25
    21ca:	a0 93 9e 03 	sts	0x039E, r26
    21ce:	b0 93 9f 03 	sts	0x039F, r27
  fs_file.changed = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	80 93 a8 03 	sts	0x03A8, r24
  if(!fs_saveFileLength()) return 0;
    21d8:	0e 94 12 08 	call	0x1024	; 0x1024 <fs_saveFileLength>
    21dc:	88 23       	and	r24, r24
    21de:	21 f0       	breq	.+8      	; 0x21e8 <fs_write_eof+0xc8>

abort:
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
    21e0:	10 92 88 03 	sts	0x0388, r1
#endif
  return 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	08 95       	ret
  if(fs_freeChain()) goto abort;

  /* Сохраняем длну и первый кластер */
  fs_file.size    = fs_file.ptr;
  fs_file.changed = 1;
  if(!fs_saveFileLength()) return 0;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
abort:
#ifndef FS_DISABLE_CHECK
  fs_file.opened = OPENED_NONE;
#endif
  return 1;
}
    21ea:	08 95       	ret

000021ec <fs_write>:

/**************************************************************************
*  Записать в файл                                                        *
**************************************************************************/

uint8_t fs_write(CONST uint8_t* ptr, WORD len) {
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	ec 01       	movw	r28, r24
  /* Проверка на ошибки происходит в вызываемых функциях */

  /* Конец файла */
  if(len == 0) return fs_write_eof();
    21f6:	61 15       	cp	r22, r1
    21f8:	71 05       	cpc	r23, r1
    21fa:	31 f4       	brne	.+12     	; 0x2208 <fs_write+0x1c>
  } while(fs_wtotal);

  return 0;
abort:
  return 1;
}
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16

uint8_t fs_write(CONST uint8_t* ptr, WORD len) {
  /* Проверка на ошибки происходит в вызываемых функциях */

  /* Конец файла */
  if(len == 0) return fs_write_eof();
    2204:	0c 94 90 10 	jmp	0x2120	; 0x2120 <fs_write_eof>

  fs_wtotal = len;
    2208:	70 93 83 03 	sts	0x0383, r23
    220c:	60 93 82 03 	sts	0x0382, r22
  do {
    if(fs_write_start()) goto abort;
    2210:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <fs_write_start>
    2214:	88 23       	and	r24, r24
    2216:	11 f0       	breq	.+4      	; 0x221c <fs_write+0x30>
    if(fs_write_end()) goto abort;
  } while(fs_wtotal);

  return 0;
abort:
  return 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	1b c0       	rjmp	.+54     	; 0x2252 <fs_write+0x66>
  if(len == 0) return fs_write_eof();

  fs_wtotal = len;
  do {
    if(fs_write_start()) goto abort;
    memcpy(fs_file_wbuf, ptr, fs_file_wlen);
    221c:	00 91 de 03 	lds	r16, 0x03DE
    2220:	10 91 df 03 	lds	r17, 0x03DF
    2224:	80 91 e0 03 	lds	r24, 0x03E0
    2228:	90 91 e1 03 	lds	r25, 0x03E1
    222c:	a8 01       	movw	r20, r16
    222e:	be 01       	movw	r22, r28
    2230:	8e 57       	subi	r24, 0x7E	; 126
    2232:	9e 4f       	sbci	r25, 0xFE	; 254
    2234:	0e 94 a1 14 	call	0x2942	; 0x2942 <memcpy>
    ptr += fs_file_wlen;
    2238:	c0 0f       	add	r28, r16
    223a:	d1 1f       	adc	r29, r17
    if(fs_write_end()) goto abort;
    223c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <fs_write_end>
    2240:	81 11       	cpse	r24, r1
    2242:	ea cf       	rjmp	.-44     	; 0x2218 <fs_write+0x2c>
  } while(fs_wtotal);
    2244:	80 91 82 03 	lds	r24, 0x0382
    2248:	90 91 83 03 	lds	r25, 0x0383
    224c:	89 2b       	or	r24, r25
    224e:	01 f7       	brne	.-64     	; 0x2210 <fs_write+0x24>

  return 0;
    2250:	80 e0       	ldi	r24, 0x00	; 0
abort:
  return 1;
}
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <fs_swap>:
/**************************************************************************
*  Переключить файлы                                                      *
**************************************************************************/

#ifndef FS_DISABLE_SWAP
void fs_swap(void) {
    225c:	a8 e8       	ldi	r26, 0x88	; 136
    225e:	b3 e0       	ldi	r27, 0x03	; 3
  /* Это занимает меньше ПЗУ, чем три функции memcpy */
  uint8_t t, *a = (uint8_t*)&fs_file, *b = (uint8_t*)&fs_secondFile, n = sizeof(File);  
    2260:	e0 eb       	ldi	r30, 0xB0	; 176
    2262:	f3 e0       	ldi	r31, 0x03	; 3
  do {
    t=*a, *a=*b, *b=t; ++a; ++b;
    2264:	8c 91       	ld	r24, X
    2266:	90 81       	ld	r25, Z
    2268:	9d 93       	st	X+, r25
    226a:	81 93       	st	Z+, r24
  } while(--n);
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	e1 3d       	cpi	r30, 0xD1	; 209
    2270:	f8 07       	cpc	r31, r24
    2272:	c1 f7       	brne	.-16     	; 0x2264 <fs_swap+0x8>
}
    2274:	08 95       	ret

00002276 <fs_getfree>:
**************************************************************************/

#ifndef FS_DISABLE_GETFREESPACE
uint8_t fs_getfree(void) {
  /* Мы испортим переменную fs_file.sector, поэтому закрываем файл */
  fs_file.opened = OPENED_NONE;  
    2276:	10 92 88 03 	sts	0x0388, r1

  /* Кол-во свободных кластеров будет в fs_file.sector */  
  fs_file.sector = 0;  
    227a:	10 92 a4 03 	sts	0x03A4, r1
    227e:	10 92 a5 03 	sts	0x03A5, r1
    2282:	10 92 a6 03 	sts	0x03A6, r1
    2286:	10 92 a7 03 	sts	0x03A7, r1
  if(fs_allocCluster(1)) return 1; 
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	0e 94 c2 03 	call	0x784	; 0x784 <fs_allocCluster>
    2290:	81 11       	cpse	r24, r1
    2292:	26 c0       	rjmp	.+76     	; 0x22e0 <fs_getfree+0x6a>

  /* Пересчет в мегабайты */  
  fs_tmp = ((fs_file.sector >> 10) + 1) / 2 * fs_csize;
    2294:	20 91 a4 03 	lds	r18, 0x03A4
    2298:	30 91 a5 03 	lds	r19, 0x03A5
    229c:	40 91 a6 03 	lds	r20, 0x03A6
    22a0:	50 91 a7 03 	lds	r21, 0x03A7
    22a4:	8a e0       	ldi	r24, 0x0A	; 10
    22a6:	56 95       	lsr	r21
    22a8:	47 95       	ror	r20
    22aa:	37 95       	ror	r19
    22ac:	27 95       	ror	r18
    22ae:	8a 95       	dec	r24
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <fs_getfree+0x30>
    22b2:	2f 5f       	subi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	56 95       	lsr	r21
    22bc:	47 95       	ror	r20
    22be:	37 95       	ror	r19
    22c0:	27 95       	ror	r18
    22c2:	a0 91 e6 03 	lds	r26, 0x03E6
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__muluhisi3>
    22cc:	60 93 de 03 	sts	0x03DE, r22
    22d0:	70 93 df 03 	sts	0x03DF, r23
    22d4:	80 93 e0 03 	sts	0x03E0, r24
    22d8:	90 93 e1 03 	sts	0x03E1, r25

  return 0;
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	08 95       	ret
  /* Мы испортим переменную fs_file.sector, поэтому закрываем файл */
  fs_file.opened = OPENED_NONE;  

  /* Кол-во свободных кластеров будет в fs_file.sector */  
  fs_file.sector = 0;  
  if(fs_allocCluster(1)) return 1; 
    22e0:	81 e0       	ldi	r24, 0x01	; 1

  /* Пересчет в мегабайты */  
  fs_tmp = ((fs_file.sector >> 10) + 1) / 2 * fs_csize;

  return 0;
}  
    22e2:	08 95       	ret

000022e4 <fs_gettotal>:
**************************************************************************/

uint8_t fs_gettotal(void) {
  /* Проверка ошибок программиста */               
#ifndef FS_DISABLE_CHECK
  if(fs_type == FS_ERROR) { lastError = ERR_NO_FILESYSTEM; return 1; }  
    22e4:	80 91 dd 03 	lds	r24, 0x03DD
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <fs_gettotal+0x10>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	80 93 af 03 	sts	0x03AF, r24
    22f2:	08 95       	ret
#endif

  fs_tmp = ((fs_n_fatent >> 10) + 1) / 2 * fs_csize;
    22f4:	20 91 84 03 	lds	r18, 0x0384
    22f8:	30 91 85 03 	lds	r19, 0x0385
    22fc:	40 91 86 03 	lds	r20, 0x0386
    2300:	50 91 87 03 	lds	r21, 0x0387
    2304:	6a e0       	ldi	r22, 0x0A	; 10
    2306:	56 95       	lsr	r21
    2308:	47 95       	ror	r20
    230a:	37 95       	ror	r19
    230c:	27 95       	ror	r18
    230e:	6a 95       	dec	r22
    2310:	d1 f7       	brne	.-12     	; 0x2306 <fs_gettotal+0x22>
    2312:	2f 5f       	subi	r18, 0xFF	; 255
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	4f 4f       	sbci	r20, 0xFF	; 255
    2318:	5f 4f       	sbci	r21, 0xFF	; 255
    231a:	56 95       	lsr	r21
    231c:	47 95       	ror	r20
    231e:	37 95       	ror	r19
    2320:	27 95       	ror	r18
    2322:	a0 91 e6 03 	lds	r26, 0x03E6
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__muluhisi3>
    232c:	60 93 de 03 	sts	0x03DE, r22
    2330:	70 93 df 03 	sts	0x03DF, r23
    2334:	80 93 e0 03 	sts	0x03E0, r24
    2338:	90 93 e1 03 	sts	0x03E1, r25
  return 0;
    233c:	80 e0       	ldi	r24, 0x00	; 0
}  
    233e:	08 95       	ret

00002340 <fs_getfilesize>:
*  Размер файла                                                           *
**************************************************************************/

uint8_t fs_getfilesize(void) {
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) {
    2340:	80 91 88 03 	lds	r24, 0x0388
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	29 f0       	breq	.+10     	; 0x2352 <fs_getfilesize+0x12>
    lastError = ERR_NOT_OPENED;
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	80 93 af 03 	sts	0x03AF, r24
    return 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	08 95       	ret
  }
#endif
  fs_tmp = fs_file.size;
    2352:	80 91 9c 03 	lds	r24, 0x039C
    2356:	90 91 9d 03 	lds	r25, 0x039D
    235a:	a0 91 9e 03 	lds	r26, 0x039E
    235e:	b0 91 9f 03 	lds	r27, 0x039F
    2362:	80 93 de 03 	sts	0x03DE, r24
    2366:	90 93 df 03 	sts	0x03DF, r25
    236a:	a0 93 e0 03 	sts	0x03E0, r26
    236e:	b0 93 e1 03 	sts	0x03E1, r27
  return 0;
    2372:	80 e0       	ldi	r24, 0x00	; 0
}
    2374:	08 95       	ret

00002376 <fs_tell>:
*  Указатель чтения записи файла                                          *
**************************************************************************/

uint8_t fs_tell(void) {
#ifndef FS_DISABLE_CHECK
  if(fs_file.opened != OPENED_FILE) {
    2376:	80 91 88 03 	lds	r24, 0x0388
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	29 f0       	breq	.+10     	; 0x2388 <fs_tell+0x12>
    lastError = ERR_NOT_OPENED;
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	80 93 af 03 	sts	0x03AF, r24
    return 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	08 95       	ret
  }
#endif
  fs_tmp = fs_file.ptr;
    2388:	80 91 98 03 	lds	r24, 0x0398
    238c:	90 91 99 03 	lds	r25, 0x0399
    2390:	a0 91 9a 03 	lds	r26, 0x039A
    2394:	b0 91 9b 03 	lds	r27, 0x039B
    2398:	80 93 de 03 	sts	0x03DE, r24
    239c:	90 93 df 03 	sts	0x03DF, r25
    23a0:	a0 93 e0 03 	sts	0x03E0, r26
    23a4:	b0 93 e1 03 	sts	0x03E1, r27
  return 0;
    23a8:	80 e0       	ldi	r24, 0x00	; 0
}
    23aa:	08 95       	ret

000023ac <wait>:
#include <avr/io.h>
#include "proto.h"

void wait(void) {
    // Ждем перепад 0->1
    while( !(PINC && (1 << PC5)) );
    23ac:	86 b1       	in	r24, 0x06	; 6
    23ae:	88 23       	and	r24, r24
    23b0:	e9 f3       	breq	.-6      	; 0x23ac <wait>
    while( PINC && (1 << PC5) ); 
    23b2:	86 b1       	in	r24, 0x06	; 6
    23b4:	81 11       	cpse	r24, r1
    23b6:	fd cf       	rjmp	.-6      	; 0x23b2 <wait+0x6>
//    while((PINC&0x3F)==0); 
//    while((PINC&0x3F)==0x20);
    if((PINC&0x3F)==0) return;
    23b8:	86 b1       	in	r24, 0x06	; 6
    23ba:	8f 73       	andi	r24, 0x3F	; 63
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <wait+0x14>
    asm volatile("RJMP 0");
    23be:	f6 cf       	rjmp	.-20     	; 0x23ac <wait>
    23c0:	08 95       	ret

000023c2 <sendStart>:
}

void sendStart(uint8_t c) {
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	1f 92       	push	r1
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    wait();
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	0e 94 d6 11 	call	0x23ac	; 0x23ac <wait>
    DATA_OUT
    23d2:	9f ef       	ldi	r25, 0xFF	; 255
    23d4:	9a b9       	out	0x0a, r25	; 10
    PORTD = c;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	8b b9       	out	0x0b, r24	; 11
}
    23da:	0f 90       	pop	r0
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <recvStart>:

void recvStart(void) {
    wait();
    23e2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <wait>
    DATA_IN
    23e6:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0xFF;
    23e8:	8f ef       	ldi	r24, 0xFF	; 255
    23ea:	8b b9       	out	0x0b, r24	; 11
    23ec:	08 95       	ret

000023ee <wrecv>:
} 

uint8_t wrecv(void) {
    wait();
    23ee:	0e 94 d6 11 	call	0x23ac	; 0x23ac <wait>
    return PIND;
    23f2:	89 b1       	in	r24, 0x09	; 9
}
    23f4:	08 95       	ret

000023f6 <send>:

void send(uint8_t c) {
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	1f 92       	push	r1
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    wait();
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	0e 94 d6 11 	call	0x23ac	; 0x23ac <wait>
    PORTD = c;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	8b b9       	out	0x0b, r24	; 11
}
    240a:	0f 90       	pop	r0
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <spi_transmit>:

#define SPI_INIT      { SPCR = 0x52; SPSR = 0x00; }    
#define SPI_HIGHSPEED { SPCR = 0x50; SPSR |= (1<<SPI2X); _delay_ms(1); }

static void spi_transmit(uint8_t data) {
  SPDR = data;  
    2412:	8e bd       	out	0x2e, r24	; 46
  while((SPSR & 0x80) == 0);
    2414:	0d b4       	in	r0, 0x2d	; 45
    2416:	07 fe       	sbrs	r0, 7
    2418:	fd cf       	rjmp	.-6      	; 0x2414 <spi_transmit+0x2>
}
    241a:	08 95       	ret

0000241c <spi_receive>:

static uint8_t spi_receive(void) {
  SPDR = 0xFF;
    241c:	8f ef       	ldi	r24, 0xFF	; 255
    241e:	8e bd       	out	0x2e, r24	; 46
  while((SPSR & 0x80) == 0);
    2420:	0d b4       	in	r0, 0x2d	; 45
    2422:	07 fe       	sbrs	r0, 7
    2424:	fd cf       	rjmp	.-6      	; 0x2420 <spi_receive+0x4>
  return SPDR;
    2426:	8e b5       	in	r24, 0x2e	; 46
}
    2428:	08 95       	ret

0000242a <sd_sendCommand>:
#define WRITE_SINGLE_BLOCK (0x40 | 24)
#define SD_SEND_OP_COND    (0x40 | 41)
#define APP_CMD            (0x40 | 55)
#define READ_OCR           (0x40 | 58)

static uint8_t sd_sendCommand(uint8_t cmd, unsigned long arg) {
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	00 d0       	rcall	.+0      	; 0x2436 <sd_sendCommand+0xc>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <sd_sendCommand+0xe>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	18 2f       	mov	r17, r24
    243e:	49 83       	std	Y+1, r20	; 0x01
    2440:	5a 83       	std	Y+2, r21	; 0x02
    2442:	6b 83       	std	Y+3, r22	; 0x03
    2444:	7c 83       	std	Y+4, r23	; 0x04
  uint8_t response, retry;
                  
  /* Размещение этого кода тут -4 команды, хотя вроде лишине проверки */
  if(sd_sdhc == 0 && (cmd==READ_SINGLE_BLOCK || cmd==WRITE_SINGLE_BLOCK))  
    2446:	80 91 e7 03 	lds	r24, 0x03E7
    244a:	81 11       	cpse	r24, r1
    244c:	13 c0       	rjmp	.+38     	; 0x2474 <sd_sendCommand+0x4a>
    244e:	11 35       	cpi	r17, 0x51	; 81
    2450:	11 f0       	breq	.+4      	; 0x2456 <sd_sendCommand+0x2c>
    2452:	18 35       	cpi	r17, 0x58	; 88
    2454:	79 f4       	brne	.+30     	; 0x2474 <sd_sendCommand+0x4a>
    arg <<= 9;
    2456:	49 81       	ldd	r20, Y+1	; 0x01
    2458:	5a 81       	ldd	r21, Y+2	; 0x02
    245a:	6b 81       	ldd	r22, Y+3	; 0x03
    245c:	7c 81       	ldd	r23, Y+4	; 0x04
    245e:	89 e0       	ldi	r24, 0x09	; 9
    2460:	44 0f       	add	r20, r20
    2462:	55 1f       	adc	r21, r21
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	8a 95       	dec	r24
    246a:	d1 f7       	brne	.-12     	; 0x2460 <sd_sendCommand+0x36>
    246c:	49 83       	std	Y+1, r20	; 0x01
    246e:	5a 83       	std	Y+2, r21	; 0x02
    2470:	6b 83       	std	Y+3, r22	; 0x03
    2472:	7c 83       	std	Y+4, r23	; 0x04
  
  /* Выбираем карту */
  SD_CS_ENABLE
    2474:	2a 98       	cbi	0x05, 2	; 5

  /* Заголовок команды */
  spi_transmit(cmd);
    2476:	81 2f       	mov	r24, r17
    2478:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
  spi_transmit(((uint8_t*)&arg)[3]);
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
  spi_transmit(((uint8_t*)&arg)[2]);
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
  spi_transmit(((uint8_t*)&arg)[1]);
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
  spi_transmit(((uint8_t*)&arg)[0]);
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>

  /* Пару каоманд требуют CRC. Остальные же команды игнорируют его, поэтому упрощаем код */
  spi_transmit(cmd == SEND_IF_COND ? 0x87 : 0x95);
    2494:	18 34       	cpi	r17, 0x48	; 72
    2496:	11 f4       	brne	.+4      	; 0x249c <sd_sendCommand+0x72>
    2498:	87 e8       	ldi	r24, 0x87	; 135
    249a:	01 c0       	rjmp	.+2      	; 0x249e <sd_sendCommand+0x74>
    249c:	85 e9       	ldi	r24, 0x95	; 149
    249e:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>

  /* Ждем подтвреждение (256 тактов) */  
  retry = 0;
  while((response = spi_receive()) == 0xFF) 
    24a2:	f1 2c       	mov	r15, r1
    24a4:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    24a8:	08 2f       	mov	r16, r24
    24aa:	8f 3f       	cpi	r24, 0xFF	; 255
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <sd_sendCommand+0x8a>
    24ae:	fa 94       	dec	r15
    if(++retry == 0) break;
    24b0:	c9 f7       	brne	.-14     	; 0x24a4 <sd_sendCommand+0x7a>
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <sd_sendCommand+0xa8>

  /* Результат команды READ_OCR обрабатываем тут, так как в конце этой функции мы снимем CS и пропускаем 1 байт */
  if(response == 0 && cmd == READ_OCR) {  
    24b4:	81 11       	cpse	r24, r1
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <sd_sendCommand+0xa8>
    24b8:	1a 37       	cpi	r17, 0x7A	; 122
    24ba:	59 f4       	brne	.+22     	; 0x24d2 <sd_sendCommand+0xa8>
    /* 32 бита из которых нас интересует один бит */
    sd_sdhc = spi_receive() & 0x40;
    24bc:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    24c0:	80 74       	andi	r24, 0x40	; 64
    24c2:	80 93 e7 03 	sts	0x03E7, r24
    spi_receive();
    24c6:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    spi_receive();
    24ca:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    spi_receive(); 
    24ce:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
  }

  /* отпускаем CS и пауза в 1 байт*/
  SD_CS_DISABLE
    24d2:	2a 9a       	sbi	0x05, 2	; 5
  spi_receive(); 
    24d4:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>

  return response;
}
    24d8:	80 2f       	mov	r24, r16
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	08 95       	ret

000024ee <sd_check>:

/**************************************************************************
*  Проверка готовности/наличия карты                                      *
**************************************************************************/

uint8_t sd_check(void) {
    24ee:	cf 93       	push	r28
  uint8_t i = 0;
    24f0:	c0 e0       	ldi	r28, 0x00	; 0
  do { 
    sd_sendCommand(APP_CMD, 0);
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	ba 01       	movw	r22, r20
    24f8:	87 e7       	ldi	r24, 0x77	; 119
    24fa:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    if(sd_sendCommand(SD_SEND_OP_COND, 0x40000000) == 0) return 0;
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e4       	ldi	r23, 0x40	; 64
    2506:	89 e6       	ldi	r24, 0x69	; 105
    2508:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    250c:	88 23       	and	r24, r24
    250e:	21 f0       	breq	.+8      	; 0x2518 <sd_check+0x2a>
  } while(--i);
    2510:	c1 50       	subi	r28, 0x01	; 1
    2512:	79 f7       	brne	.-34     	; 0x24f2 <sd_check+0x4>
  return 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	01 c0       	rjmp	.+2      	; 0x251a <sd_check+0x2c>

uint8_t sd_check(void) {
  uint8_t i = 0;
  do { 
    sd_sendCommand(APP_CMD, 0);
    if(sd_sendCommand(SD_SEND_OP_COND, 0x40000000) == 0) return 0;
    2518:	80 e0       	ldi	r24, 0x00	; 0
  } while(--i);
  return 1;
}
    251a:	cf 91       	pop	r28
    251c:	08 95       	ret

0000251e <sd_init>:

/**************************************************************************
*  Инициализация карты                                                    *
**************************************************************************/

uint8_t sd_init(void) {
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
  uint8_t tries;

  /* Освобождаем CS на всякий случай */
  SD_CS_DISABLE
    2524:	2a 9a       	sbi	0x05, 2	; 5

  /* Включаем SPI */
  SPI_INIT
    2526:	82 e5       	ldi	r24, 0x52	; 82
    2528:	8c bd       	out	0x2c, r24	; 44
    252a:	1d bc       	out	0x2d, r1	; 45

  /* Делаем несколько попыток инициализации */
  tries = 10;  
  while(sd_init_int()) 
    252c:	da e0       	ldi	r29, 0x0A	; 10

static uint8_t sd_init_int(void) {
  uint8_t i;

  /* Сбрасываем SDHC флаг */
  sd_sdhc = 0;
    252e:	10 92 e7 03 	sts	0x03E7, r1
    2532:	ca e0       	ldi	r28, 0x0A	; 10

  /* Минимум 80 пустых тактов */
  for(i=10; i; --i)
    spi_receive();   
    2534:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    2538:	c1 50       	subi	r28, 0x01	; 1

  /* Сбрасываем SDHC флаг */
  sd_sdhc = 0;

  /* Минимум 80 пустых тактов */
  for(i=10; i; --i)
    253a:	e1 f7       	brne	.-8      	; 0x2534 <sd_init+0x16>
    spi_receive();   

  /* CMD0 Посылаем команду сброса */
  if(sd_sendCommand(GO_IDLE_STATE, 0) != 1) goto abort;
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	ba 01       	movw	r22, r20
    2542:	80 e4       	ldi	r24, 0x40	; 64
    2544:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	11 f5       	brne	.+68     	; 0x2590 <sd_init+0x72>

  /* CMD8 Узнаем версию карты */
  i = 0;
  if(sd_sendCommand(SEND_IF_COND, 0x000001AA)) 
    254c:	4a ea       	ldi	r20, 0xAA	; 170
    254e:	51 e0       	ldi	r21, 0x01	; 1
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	88 e4       	ldi	r24, 0x48	; 72
    2556:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    255a:	18 2f       	mov	r17, r24
    i = 1;

  /* CMD41 Ожидание окончания инициализации */
  if(sd_check()) goto abort;
    255c:	0e 94 77 12 	call	0x24ee	; 0x24ee <sd_check>
    2560:	81 11       	cpse	r24, r1
    2562:	16 c0       	rjmp	.+44     	; 0x2590 <sd_init+0x72>

  /* Только для второй версии карты */
  if(i) {
    2564:	11 23       	and	r17, r17
    2566:	41 f0       	breq	.+16     	; 0x2578 <sd_init+0x5a>
    /* CMD58 определение SDHC карты. Ответ обрабатывается в функции sd_sendCommand */
    if(sd_sendCommand(READ_OCR, 0) != 0) goto abort;
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	ba 01       	movw	r22, r20
    256e:	8a e7       	ldi	r24, 0x7A	; 122
    2570:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    2574:	81 11       	cpse	r24, r1
    2576:	0c c0       	rjmp	.+24     	; 0x2590 <sd_init+0x72>
      lastError = ERR_DISK_ERR;
      return 1;       
    }
          
  /* Вклчюаем максимальную скорость */
  SPI_HIGHSPEED     
    2578:	80 e5       	ldi	r24, 0x50	; 80
    257a:	8c bd       	out	0x2c, r24	; 44
    257c:	8d b5       	in	r24, 0x2d	; 45
    257e:	81 60       	ori	r24, 0x01	; 1
    2580:	8d bd       	out	0x2d, r24	; 45
    2582:	8f ec       	ldi	r24, 0xCF	; 207
    2584:	97 e0       	ldi	r25, 0x07	; 7
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <sd_init+0x68>
    258a:	00 c0       	rjmp	.+0      	; 0x258c <sd_init+0x6e>
    258c:	00 00       	nop
  
  return 0;
    258e:	06 c0       	rjmp	.+12     	; 0x259c <sd_init+0x7e>
    2590:	d1 50       	subi	r29, 0x01	; 1
  SPI_INIT

  /* Делаем несколько попыток инициализации */
  tries = 10;  
  while(sd_init_int()) 
    if(--tries == 0) {
    2592:	69 f6       	brne	.-102    	; 0x252e <sd_init+0x10>
      lastError = ERR_DISK_ERR;
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	80 93 af 03 	sts	0x03AF, r24
      return 1;       
    259a:	c1 e0       	ldi	r28, 0x01	; 1
          
  /* Вклчюаем максимальную скорость */
  SPI_HIGHSPEED     
  
  return 0;
}
    259c:	8c 2f       	mov	r24, r28
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	08 95       	ret

000025a6 <sd_read>:

/**************************************************************************
*  Чтение произвольного участка сектора                                   *
**************************************************************************/

uint8_t sd_read(uint8_t* buffer, unsigned long sector, WORD offsetInSector, WORD length) {
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	ec 01       	movw	r28, r24
    25b8:	79 01       	movw	r14, r18
  uint8_t b;
  WORD i;
    
  /* Посылаем команду */
  if(sd_sendCommand(READ_SINGLE_BLOCK, sector)) goto abort;
    25ba:	81 e5       	ldi	r24, 0x51	; 81
    25bc:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    25c0:	81 11       	cpse	r24, r1
    25c2:	30 c0       	rjmp	.+96     	; 0x2624 <sd_read+0x7e>

  /* Сразу же возращаем CS, что бы принять ответ команды */
  SD_CS_ENABLE
    25c4:	2a 98       	cbi	0x05, 2	; 5
    25c6:	c1 2c       	mov	r12, r1
    25c8:	d1 2c       	mov	r13, r1
**************************************************************************/

static uint8_t sd_waitBus(uint8_t byte) {
  WORD retry = 0;
  do {
    if(spi_receive() == byte) return 0;
    25ca:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    25ce:	8e 3f       	cpi	r24, 0xFE	; 254
    25d0:	39 f0       	breq	.+14     	; 0x25e0 <sd_read+0x3a>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	c8 1a       	sub	r12, r24
    25d6:	d1 08       	sbc	r13, r1
  } while(++retry); 
    25d8:	c1 14       	cp	r12, r1
    25da:	d1 04       	cpc	r13, r1
    25dc:	b1 f7       	brne	.-20     	; 0x25ca <sd_read+0x24>
    25de:	22 c0       	rjmp	.+68     	; 0x2624 <sd_read+0x7e>
**************************************************************************/

static uint8_t sd_waitBus(uint8_t byte) {
  WORD retry = 0;
  do {
    if(spi_receive() == byte) return 0;
    25e0:	c1 2c       	mov	r12, r1
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	d9 2e       	mov	r13, r25
  /* Ждем стартовый байт */
  if(sd_waitBus(0xFE)) goto abort;

  /* Принимаем 512 байт */
  for(i=512; i; --i) {
    b = spi_receive();
    25e6:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    if(offsetInSector) { offsetInSector--; continue; }
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	21 f0       	breq	.+8      	; 0x25f8 <sd_read+0x52>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	e8 1a       	sub	r14, r24
    25f4:	f1 08       	sbc	r15, r1
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <sd_read+0x60>
    if(length == 0) continue;
    25f8:	01 15       	cp	r16, r1
    25fa:	11 05       	cpc	r17, r1
    25fc:	21 f0       	breq	.+8      	; 0x2606 <sd_read+0x60>
    length--;
    25fe:	01 50       	subi	r16, 0x01	; 1
    2600:	11 09       	sbc	r17, r1
    *buffer++ = b;
    2602:	88 83       	st	Y, r24
    2604:	21 96       	adiw	r28, 0x01	; 1
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	c8 1a       	sub	r12, r24
    260a:	d1 08       	sbc	r13, r1

  /* Ждем стартовый байт */
  if(sd_waitBus(0xFE)) goto abort;

  /* Принимаем 512 байт */
  for(i=512; i; --i) {
    260c:	c1 14       	cp	r12, r1
    260e:	d1 04       	cpc	r13, r1
    2610:	51 f7       	brne	.-44     	; 0x25e6 <sd_read+0x40>
    length--;
    *buffer++ = b;
  }

  /* CRC игнорируем */
  spi_receive();
    2612:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
  spi_receive();
    2616:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>

  /* отпускаем CS и пауза в 1 байт*/
  SD_CS_DISABLE
    261a:	2a 9a       	sbi	0x05, 2	; 5
  spi_receive(); 
    261c:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>

  /* Ок */
  return 0;
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	05 c0       	rjmp	.+10     	; 0x262e <sd_read+0x88>

  /* Ошибка и отпускаем CS.*/
abort:
  SD_CS_DISABLE
    2624:	2a 9a       	sbi	0x05, 2	; 5
  lastError = ERR_DISK_ERR;
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	80 93 af 03 	sts	0x03AF, r24
  return 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
}
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	08 95       	ret

00002640 <sd_write512>:

/**************************************************************************
*  Запись сектора (512 байт)                                              *
**************************************************************************/

uint8_t sd_write512(uint8_t* buffer, unsigned long sector) {
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	18 2f       	mov	r17, r24
    264a:	09 2f       	mov	r16, r25
  WORD n;
  
  /* Посылаем команду */
  if(sd_sendCommand(WRITE_SINGLE_BLOCK, sector)) goto abort;
    264c:	88 e5       	ldi	r24, 0x58	; 88
    264e:	0e 94 15 12 	call	0x242a	; 0x242a <sd_sendCommand>
    2652:	88 23       	and	r24, r24
    2654:	31 f0       	breq	.+12     	; 0x2662 <sd_write512+0x22>
  /* Ок */
  return 0;
              
  /* Ошибка.*/
abort:  
  SD_CS_DISABLE 
    2656:	2a 9a       	sbi	0x05, 2	; 5
  lastError = ERR_DISK_ERR;
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	80 93 af 03 	sts	0x03AF, r24
  return 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	27 c0       	rjmp	.+78     	; 0x26b0 <sd_write512+0x70>
  
  /* Посылаем команду */
  if(sd_sendCommand(WRITE_SINGLE_BLOCK, sector)) goto abort;

  /* Сразу же возращаем CS, что бы отправить блок данных */
  SD_CS_ENABLE
    2662:	2a 98       	cbi	0x05, 2	; 5

  /* Посылаем стартовый байт */
  spi_transmit(0xFE);
    2664:	8e ef       	ldi	r24, 0xFE	; 254
    2666:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
    266a:	c1 2f       	mov	r28, r17
    266c:	d0 2f       	mov	r29, r16
    266e:	8e 01       	movw	r16, r28
    2670:	1e 5f       	subi	r17, 0xFE	; 254
  
  /* Данные */
  for(n=512; n; --n)    
    spi_transmit(*buffer++);
    2672:	89 91       	ld	r24, Y+
    2674:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>

  /* Посылаем стартовый байт */
  spi_transmit(0xFE);
  
  /* Данные */
  for(n=512; n; --n)    
    2678:	c0 17       	cp	r28, r16
    267a:	d1 07       	cpc	r29, r17
    267c:	d1 f7       	brne	.-12     	; 0x2672 <sd_write512+0x32>
    spi_transmit(*buffer++);
      
  /* CRC игнорируется */
  spi_transmit(0xFF);
    267e:	8f ef       	ldi	r24, 0xFF	; 255
    2680:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>
  spi_transmit(0xFF);
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	0e 94 09 12 	call	0x2412	; 0x2412 <spi_transmit>

  /* Ответ МК */
  if((spi_receive() & 0x1F) != 0x05) goto abort;
    268a:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    268e:	8f 71       	andi	r24, 0x1F	; 31
    2690:	85 30       	cpi	r24, 0x05	; 5
    2692:	09 f7       	brne	.-62     	; 0x2656 <sd_write512+0x16>
    2694:	c0 e0       	ldi	r28, 0x00	; 0
    2696:	d0 e0       	ldi	r29, 0x00	; 0
**************************************************************************/

static uint8_t sd_waitBus(uint8_t byte) {
  WORD retry = 0;
  do {
    if(spi_receive() == byte) return 0;
    2698:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>
    269c:	8f 3f       	cpi	r24, 0xFF	; 255
    269e:	21 f0       	breq	.+8      	; 0x26a8 <sd_write512+0x68>
    26a0:	21 97       	sbiw	r28, 0x01	; 1
  } while(++retry); 
    26a2:	20 97       	sbiw	r28, 0x00	; 0
    26a4:	c9 f7       	brne	.-14     	; 0x2698 <sd_write512+0x58>
    26a6:	d7 cf       	rjmp	.-82     	; 0x2656 <sd_write512+0x16>
                    
  /* Ждем окончания записи, т.е. пока не освободится шина */
  if(sd_waitBus(0xFF)) goto abort;
  
  /* отпускаем CS и пауза в 1 байт*/
  SD_CS_DISABLE
    26a8:	2a 9a       	sbi	0x05, 2	; 5
  spi_receive();
    26aa:	0e 94 0e 12 	call	0x241c	; 0x241c <spi_receive>

  /* Ок */
  return 0;
    26ae:	80 e0       	ldi	r24, 0x00	; 0
  /* Ошибка.*/
abort:  
  SD_CS_DISABLE 
  lastError = ERR_DISK_ERR;
  return 1;
}
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	08 95       	ret

000026ba <spi_init>:
#ifndef SPI2X
#define SPI2X 0
#endif
         
void spi_init(void) {
  SPCR = 0x52; // setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    26ba:	82 e5       	ldi	r24, 0x52	; 82
    26bc:	8c bd       	out	0x2c, r24	; 44
  SPSR = 0x00;    
    26be:	1d bc       	out	0x2d, r1	; 45
    26c0:	08 95       	ret

000026c2 <spi_transmit>:
}
                    
uint8_t spi_transmit(uint8_t data) {
  SPDR = data;  
    26c2:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & 0x80)); // Wait for transmission complete
    26c4:	0d b4       	in	r0, 0x2d	; 45
    26c6:	07 fe       	sbrs	r0, 7
    26c8:	fd cf       	rjmp	.-6      	; 0x26c4 <spi_transmit+0x2>
  return SPDR;
    26ca:	8e b5       	in	r24, 0x2e	; 46
}
    26cc:	08 95       	ret

000026ce <spi_receive>:

uint8_t spi_receive(void) {
  SPDR = 0xFF;
    26ce:	8f ef       	ldi	r24, 0xFF	; 255
    26d0:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & 0x80)); // Wait for reception complete
    26d2:	0d b4       	in	r0, 0x2d	; 45
    26d4:	07 fe       	sbrs	r0, 7
    26d6:	fd cf       	rjmp	.-6      	; 0x26d2 <spi_receive+0x4>
  return SPDR;
    26d8:	8e b5       	in	r24, 0x2e	; 46
}
    26da:	08 95       	ret

000026dc <spi_highSpeed>:

void spi_highSpeed(void) {
  SPCR = 0x50;
    26dc:	80 e5       	ldi	r24, 0x50	; 80
    26de:	8c bd       	out	0x2c, r24	; 44
  SPSR |= (1<<SPI2X);
    26e0:	8d b5       	in	r24, 0x2d	; 45
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	8d bd       	out	0x2d, r24	; 45
    26e6:	8f ec       	ldi	r24, 0xCF	; 207
    26e8:	97 e0       	ldi	r25, 0x07	; 7
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <spi_highSpeed+0xe>
    26ee:	00 c0       	rjmp	.+0      	; 0x26f0 <spi_highSpeed+0x14>
    26f0:	00 00       	nop
    26f2:	08 95       	ret

000026f4 <RomEmu>:
.endm

.global RomEmu

RomEmu:
        PUSH R26
    26f4:	af 93       	push	r26
        PUSH R30
    26f6:	ef 93       	push	r30
        PUSH R31
    26f8:	ff 93       	push	r31
        LDI  R31, 1
    26fa:	f1 e0       	ldi	r31, 0x01	; 1
        GET_ADDR
    26fc:	e6 b1       	in	r30, 0x06	; 6
    26fe:	ef 73       	andi	r30, 0x3F	; 63
    2700:	a3 b1       	in	r26, 0x03	; 3
    2702:	a0 74       	andi	r26, 0x40	; 64
    2704:	ea 2b       	or	r30, r26

00002706 <loop0>:

        loop0:
        ROM_EMU
    2706:	e0 81       	ld	r30, Z
    2708:	eb b9       	out	0x0b, r30	; 11
        GET_ADDR
    270a:	e6 b1       	in	r30, 0x06	; 6
    270c:	ef 73       	andi	r30, 0x3F	; 63
    270e:	a3 b1       	in	r26, 0x03	; 3
    2710:	a0 74       	andi	r26, 0x40	; 64
    2712:	ea 2b       	or	r30, r26
        CPI  R30, 0x44
    2714:	e4 34       	cpi	r30, 0x44	; 68
        BRNE loop0
    2716:	b9 f7       	brne	.-18     	; 0x2706 <loop0>
        ROM_EMU
    2718:	e0 81       	ld	r30, Z
    271a:	eb b9       	out	0x0b, r30	; 11

0000271c <loop1>:

        loop1:
        GET_ADDR
    271c:	e6 b1       	in	r30, 0x06	; 6
    271e:	ef 73       	andi	r30, 0x3F	; 63
    2720:	a3 b1       	in	r26, 0x03	; 3
    2722:	a0 74       	andi	r26, 0x40	; 64
    2724:	ea 2b       	or	r30, r26
        CPI  R30, 0x44
    2726:	e4 34       	cpi	r30, 0x44	; 68
        BREQ loop1
    2728:	c9 f3       	breq	.-14     	; 0x271c <loop1>
        CPI  R30, 0x40
    272a:	e0 34       	cpi	r30, 0x40	; 64
        BRNE loop0
    272c:	61 f7       	brne	.-40     	; 0x2706 <loop0>
        ROM_EMU
    272e:	e0 81       	ld	r30, Z
    2730:	eb b9       	out	0x0b, r30	; 11

00002732 <loop2>:

        loop2:
        GET_ADDR
    2732:	e6 b1       	in	r30, 0x06	; 6
    2734:	ef 73       	andi	r30, 0x3F	; 63
    2736:	a3 b1       	in	r26, 0x03	; 3
    2738:	a0 74       	andi	r26, 0x40	; 64
    273a:	ea 2b       	or	r30, r26
        CPI  R30, 0x40
    273c:	e0 34       	cpi	r30, 0x40	; 64
        BREQ loop2
    273e:	c9 f3       	breq	.-14     	; 0x2732 <loop2>
        CPI  R30, 0
    2740:	e0 30       	cpi	r30, 0x00	; 0
        BRNE loop0
    2742:	09 f7       	brne	.-62     	; 0x2706 <loop0>

        POP R31
    2744:	ff 91       	pop	r31
        POP R30
    2746:	ef 91       	pop	r30
        POP R26
    2748:	af 91       	pop	r26

0000274a <main>:

int main(void) {

  uint8_t c;
    
  DATA_OUT            // Шина данных (DDRD)
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	8a b9       	out	0x0a, r24	; 10
  DDRC  = 0b00000000; // Шина адреса
    274e:	17 b8       	out	0x07, r1	; 7
  DDRB  = 0b00101101; // Шина адреса, карта и светодиод
    2750:	8d e2       	ldi	r24, 0x2D	; 45
    2752:	84 b9       	out	0x04, r24	; 4
  PORTB = 0b00010001; // Подтягивающий резистор на MISO и светодиод  
    2754:	81 e1       	ldi	r24, 0x11	; 17
    2756:	85 b9       	out	0x05, r24	; 5
    2758:	2f ef       	ldi	r18, 0xFF	; 255
    275a:	80 e7       	ldi	r24, 0x70	; 112
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	21 50       	subi	r18, 0x01	; 1
    2760:	80 40       	sbci	r24, 0x00	; 0
    2762:	90 40       	sbci	r25, 0x00	; 0
    2764:	e1 f7       	brne	.-8      	; 0x275e <main+0x14>
    2766:	00 c0       	rjmp	.+0      	; 0x2768 <main+0x1e>
    2768:	00 00       	nop
//  while(1) {
//     error();
//  }

  // Запуск файловой системы
  if(fs_init()) error();
    276a:	0e 94 57 08 	call	0x10ae	; 0x10ae <fs_init>
    276e:	81 11       	cpse	r24, r1
    2770:	0e 94 3a 03 	call	0x674	; 0x674 <error>
  strcpy_P((char*)buf, PSTR("boot/boot.rk"));
    2774:	6a e7       	ldi	r22, 0x7A	; 122
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	82 e8       	ldi	r24, 0x82	; 130
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	0e 94 8d 14 	call	0x291a	; 0x291a <strcpy_P>
  if(fs_open()) error();
    2780:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fs_open>
    2784:	81 11       	cpse	r24, r1
    2786:	f4 cf       	rjmp	.-24     	; 0x2770 <main+0x26>
  if(fs_getfilesize()) error();
    2788:	0e 94 a0 11 	call	0x2340	; 0x2340 <fs_getfilesize>
    278c:	81 11       	cpse	r24, r1
    278e:	f0 cf       	rjmp	.-32     	; 0x2770 <main+0x26>
  if(fs_tmp < 7) error();
    2790:	60 91 de 03 	lds	r22, 0x03DE
    2794:	70 91 df 03 	lds	r23, 0x03DF
    2798:	80 91 e0 03 	lds	r24, 0x03E0
    279c:	90 91 e1 03 	lds	r25, 0x03E1
    27a0:	8b 01       	movw	r16, r22
    27a2:	9c 01       	movw	r18, r24
    27a4:	07 50       	subi	r16, 0x07	; 7
    27a6:	11 09       	sbc	r17, r1
    27a8:	21 09       	sbc	r18, r1
    27aa:	31 09       	sbc	r19, r1
    27ac:	0a 37       	cpi	r16, 0x7A	; 122
    27ae:	11 05       	cpc	r17, r1
    27b0:	21 05       	cpc	r18, r1
    27b2:	31 05       	cpc	r19, r1
    27b4:	e8 f6       	brcc	.-70     	; 0x2770 <main+0x26>
  if(fs_tmp > 128) error();
  if(fs_read0(rom, (WORD)fs_tmp)) error();  
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <fs_read0>
    27be:	81 11       	cpse	r24, r1
    27c0:	d7 cf       	rjmp	.-82     	; 0x2770 <main+0x26>
                    
  // Гасим светодиод
  PORTB |= _BV(PB0);
    27c2:	28 9a       	sbi	0x05, 0	; 5
        case 4:  cmd_open();         break;     
        case 5:  cmd_lseek();        break;     
        case 6:  cmd_read();         break;     
        case 7:  cmd_write();        break; 
        case 8:  cmd_move();         break;
        default: lastError = ERR_INVALID_COMMAND;      
    27c4:	0c e0       	ldi	r16, 0x0C	; 12
      if(lastError) sendStart(lastError);
    }

    // Порт рабоатет на выход
    wait();
    DATA_OUT
    27c6:	1f ef       	ldi	r17, 0xFF	; 255
  PORTB |= _BV(PB0);
  
  while(1) {

    // Эмуляция ПЗУ
    RomEmu();
    27c8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <RomEmu>

    // Зажигаем светодиод
    PORTB |= _BV(PB0);
    27cc:	28 9a       	sbi	0x05, 0	; 5

    // Проверяем наличие карты
    sendStart(ERR_START);
    27ce:	80 e4       	ldi	r24, 0x40	; 64
    27d0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
    send(ERR_WAIT);
    27d4:	81 e4       	ldi	r24, 0x41	; 65
    27d6:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
    if(fs_check()) {
    27da:	0e 94 12 0a 	call	0x1424	; 0x1424 <fs_check>
    27de:	88 23       	and	r24, r24
    27e0:	21 f0       	breq	.+8      	; 0x27ea <main+0xa0>
      send(ERR_DISK_ERR);
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
    27e8:	34 c0       	rjmp	.+104    	; 0x2852 <main+0x108>
    } else {
      send(ERR_OK_DISK);
    27ea:	82 e4       	ldi	r24, 0x42	; 66
    27ec:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <send>
      recvStart();
    27f0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <recvStart>
      c = wrecv();
    27f4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <wrecv>
      
      // Сбрасываем ошибку
      lastError = 0;
    27f8:	10 92 af 03 	sts	0x03AF, r1
    
      // Принимаем аргументы 
      switch(c) {
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	89 30       	cpi	r24, 0x09	; 9
    2800:	91 05       	cpc	r25, r1
    2802:	00 f5       	brcc	.+64     	; 0x2844 <main+0xfa>
    2804:	fc 01       	movw	r30, r24
    2806:	ec 5c       	subi	r30, 0xCC	; 204
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__tablejump2__>
        case 0:  cmd_boot();         break; 
    280e:	0e 94 a4 01 	call	0x348	; 0x348 <cmd_boot>
    2812:	1a c0       	rjmp	.+52     	; 0x2848 <main+0xfe>
        case 1:  cmd_ver();          break;
    2814:	0e 94 5f 01 	call	0x2be	; 0x2be <cmd_ver>
    2818:	17 c0       	rjmp	.+46     	; 0x2848 <main+0xfe>
        case 2:  cmd_exec();         break; 
    281a:	0e 94 ab 01 	call	0x356	; 0x356 <cmd_exec>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <main+0xfe>
        case 3:  cmd_find();         break;
    2820:	0e 94 b7 01 	call	0x36e	; 0x36e <cmd_find>
    2824:	11 c0       	rjmp	.+34     	; 0x2848 <main+0xfe>
        case 4:  cmd_open();         break;     
    2826:	0e 94 29 02 	call	0x452	; 0x452 <cmd_open>
    282a:	0e c0       	rjmp	.+28     	; 0x2848 <main+0xfe>
        case 5:  cmd_lseek();        break;     
    282c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <cmd_lseek>
    2830:	0b c0       	rjmp	.+22     	; 0x2848 <main+0xfe>
        case 6:  cmd_read();         break;     
    2832:	0e 94 b3 02 	call	0x566	; 0x566 <cmd_read>
    2836:	08 c0       	rjmp	.+16     	; 0x2848 <main+0xfe>
        case 7:  cmd_write();        break; 
    2838:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <cmd_write>
    283c:	05 c0       	rjmp	.+10     	; 0x2848 <main+0xfe>
        case 8:  cmd_move();         break;
    283e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cmd_move>
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <main+0xfe>
        default: lastError = ERR_INVALID_COMMAND;      
    2844:	00 93 af 03 	sts	0x03AF, r16
      }
    
      // Вывод ошибки
      if(lastError) sendStart(lastError);
    2848:	80 91 af 03 	lds	r24, 0x03AF
    284c:	81 11       	cpse	r24, r1
    284e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendStart>
    }

    // Порт рабоатет на выход
    wait();
    2852:	0e 94 d6 11 	call	0x23ac	; 0x23ac <wait>
    DATA_OUT
    2856:	1a b9       	out	0x0a, r17	; 10
    
    // Гасим светодиод
    PORTB &=~_BV(PB0);
    2858:	28 98       	cbi	0x05, 0	; 5
    285a:	2f ef       	ldi	r18, 0xFF	; 255
    285c:	84 e3       	ldi	r24, 0x34	; 52
    285e:	9c e0       	ldi	r25, 0x0C	; 12
    2860:	21 50       	subi	r18, 0x01	; 1
    2862:	80 40       	sbci	r24, 0x00	; 0
    2864:	90 40       	sbci	r25, 0x00	; 0
    2866:	e1 f7       	brne	.-8      	; 0x2860 <main+0x116>
    2868:	00 c0       	rjmp	.+0      	; 0x286a <main+0x120>
    286a:	00 00       	nop
    286c:	ad cf       	rjmp	.-166    	; 0x27c8 <main+0x7e>

0000286e <__udivmodhi4>:
    286e:	aa 1b       	sub	r26, r26
    2870:	bb 1b       	sub	r27, r27
    2872:	51 e1       	ldi	r21, 0x11	; 17
    2874:	07 c0       	rjmp	.+14     	; 0x2884 <__udivmodhi4_ep>

00002876 <__udivmodhi4_loop>:
    2876:	aa 1f       	adc	r26, r26
    2878:	bb 1f       	adc	r27, r27
    287a:	a6 17       	cp	r26, r22
    287c:	b7 07       	cpc	r27, r23
    287e:	10 f0       	brcs	.+4      	; 0x2884 <__udivmodhi4_ep>
    2880:	a6 1b       	sub	r26, r22
    2882:	b7 0b       	sbc	r27, r23

00002884 <__udivmodhi4_ep>:
    2884:	88 1f       	adc	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	5a 95       	dec	r21
    288a:	a9 f7       	brne	.-22     	; 0x2876 <__udivmodhi4_loop>
    288c:	80 95       	com	r24
    288e:	90 95       	com	r25
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	08 95       	ret

00002896 <__udivmodsi4>:
    2896:	a1 e2       	ldi	r26, 0x21	; 33
    2898:	1a 2e       	mov	r1, r26
    289a:	aa 1b       	sub	r26, r26
    289c:	bb 1b       	sub	r27, r27
    289e:	fd 01       	movw	r30, r26
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <__udivmodsi4_ep>

000028a2 <__udivmodsi4_loop>:
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	ee 1f       	adc	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	a2 17       	cp	r26, r18
    28ac:	b3 07       	cpc	r27, r19
    28ae:	e4 07       	cpc	r30, r20
    28b0:	f5 07       	cpc	r31, r21
    28b2:	20 f0       	brcs	.+8      	; 0x28bc <__udivmodsi4_ep>
    28b4:	a2 1b       	sub	r26, r18
    28b6:	b3 0b       	sbc	r27, r19
    28b8:	e4 0b       	sbc	r30, r20
    28ba:	f5 0b       	sbc	r31, r21

000028bc <__udivmodsi4_ep>:
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	1a 94       	dec	r1
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <__udivmodsi4_loop>
    28c8:	60 95       	com	r22
    28ca:	70 95       	com	r23
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	bd 01       	movw	r22, r26
    28d6:	cf 01       	movw	r24, r30
    28d8:	08 95       	ret

000028da <__tablejump2__>:
    28da:	ee 0f       	add	r30, r30
    28dc:	ff 1f       	adc	r31, r31

000028de <__tablejump__>:
    28de:	05 90       	lpm	r0, Z+
    28e0:	f4 91       	lpm	r31, Z
    28e2:	e0 2d       	mov	r30, r0
    28e4:	09 94       	ijmp

000028e6 <__muluhisi3>:
    28e6:	0e 94 7e 14 	call	0x28fc	; 0x28fc <__umulhisi3>
    28ea:	a5 9f       	mul	r26, r21
    28ec:	90 0d       	add	r25, r0
    28ee:	b4 9f       	mul	r27, r20
    28f0:	90 0d       	add	r25, r0
    28f2:	a4 9f       	mul	r26, r20
    28f4:	80 0d       	add	r24, r0
    28f6:	91 1d       	adc	r25, r1
    28f8:	11 24       	eor	r1, r1
    28fa:	08 95       	ret

000028fc <__umulhisi3>:
    28fc:	a2 9f       	mul	r26, r18
    28fe:	b0 01       	movw	r22, r0
    2900:	b3 9f       	mul	r27, r19
    2902:	c0 01       	movw	r24, r0
    2904:	a3 9f       	mul	r26, r19
    2906:	70 0d       	add	r23, r0
    2908:	81 1d       	adc	r24, r1
    290a:	11 24       	eor	r1, r1
    290c:	91 1d       	adc	r25, r1
    290e:	b2 9f       	mul	r27, r18
    2910:	70 0d       	add	r23, r0
    2912:	81 1d       	adc	r24, r1
    2914:	11 24       	eor	r1, r1
    2916:	91 1d       	adc	r25, r1
    2918:	08 95       	ret

0000291a <strcpy_P>:
    291a:	fb 01       	movw	r30, r22
    291c:	dc 01       	movw	r26, r24
    291e:	05 90       	lpm	r0, Z+
    2920:	0d 92       	st	X+, r0
    2922:	00 20       	and	r0, r0
    2924:	e1 f7       	brne	.-8      	; 0x291e <strcpy_P+0x4>
    2926:	08 95       	ret

00002928 <memcmp>:
    2928:	fb 01       	movw	r30, r22
    292a:	dc 01       	movw	r26, r24
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <memcmp+0xe>
    292e:	8d 91       	ld	r24, X+
    2930:	01 90       	ld	r0, Z+
    2932:	80 19       	sub	r24, r0
    2934:	21 f4       	brne	.+8      	; 0x293e <memcmp+0x16>
    2936:	41 50       	subi	r20, 0x01	; 1
    2938:	50 40       	sbci	r21, 0x00	; 0
    293a:	c8 f7       	brcc	.-14     	; 0x292e <memcmp+0x6>
    293c:	88 1b       	sub	r24, r24
    293e:	99 0b       	sbc	r25, r25
    2940:	08 95       	ret

00002942 <memcpy>:
    2942:	fb 01       	movw	r30, r22
    2944:	dc 01       	movw	r26, r24
    2946:	02 c0       	rjmp	.+4      	; 0x294c <memcpy+0xa>
    2948:	01 90       	ld	r0, Z+
    294a:	0d 92       	st	X+, r0
    294c:	41 50       	subi	r20, 0x01	; 1
    294e:	50 40       	sbci	r21, 0x00	; 0
    2950:	d8 f7       	brcc	.-10     	; 0x2948 <memcpy+0x6>
    2952:	08 95       	ret

00002954 <memset>:
    2954:	dc 01       	movw	r26, r24
    2956:	01 c0       	rjmp	.+2      	; 0x295a <memset+0x6>
    2958:	6d 93       	st	X+, r22
    295a:	41 50       	subi	r20, 0x01	; 1
    295c:	50 40       	sbci	r21, 0x00	; 0
    295e:	e0 f7       	brcc	.-8      	; 0x2958 <memset+0x4>
    2960:	08 95       	ret

00002962 <strcpy>:
    2962:	fb 01       	movw	r30, r22
    2964:	dc 01       	movw	r26, r24
    2966:	01 90       	ld	r0, Z+
    2968:	0d 92       	st	X+, r0
    296a:	00 20       	and	r0, r0
    296c:	e1 f7       	brne	.-8      	; 0x2966 <strcpy+0x4>
    296e:	08 95       	ret

00002970 <_exit>:
    2970:	f8 94       	cli

00002972 <__stop_program>:
    2972:	ff cf       	rjmp	.-2      	; 0x2972 <__stop_program>
